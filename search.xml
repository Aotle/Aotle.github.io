<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP快速入门</title>
      <link href="/2020/09/07/PHP%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2020/09/07/PHP%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一篇PHP快速入门的总结</p></blockquote><a id="more"></a> <h2 id="hello，world"><a href="#hello，world" class="headerlink" title="hello，world"></a>hello，world</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;Hello World!&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>PHP 脚本可放置于文档中的任何位置</li><li>PHP 脚本以 <code>&lt;?php</code> 开头，以 <code>?&gt;</code> 结尾，文件后缀名.php</li><li>语句以分号结尾 <code>;</code></li><li>注释：<code># 单行注释</code>，<code>// 单行注释</code>，<code>/* 多行注释 */</code></li><li>变量名对大小写敏感：<code>$color</code> 和 <code>$Color</code> 是不同的变量</li><li><code>用户定义的函数</code>、<code>类</code>和<code>关键字</code>（例如 if、else、echo 等等）都对大小写不敏感：<code>Echo &quot;Ok&quot;</code> 和 <code>echo &quot;Ok&quot;</code> 是一样的效果</li><li>输出内容到网页上用 <code>echo</code></li><li><code>var_dump()</code>：会返回变量的数据类型和值，调试的时候很有用: var_dump(“text”): <code>string(4) &quot;text&quot;</code>;</li><li><code>print_r</code>：Prints human-readable information about a variable</li></ul><h2 id="PHP变量规则："><a href="#PHP变量规则：" class="headerlink" title="PHP变量规则："></a>PHP变量规则：</h2><ul><li>变量以 <code>$</code> 符号开头，其后是变量的名称</li><li>变量名称必须以字母或下划线开头</li><li>变量名称不能以数字开头</li><li>变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _）</li><li>变量名称对大小写敏感（$y 与 $Y 是两个不同的变量）</li></ul><h2 id="创建变量"><a href="#创建变量" class="headerlink" title="创建变量"></a>创建变量</h2><ul><li>创建变量的时候不指定变量的类型</li><li>变量没有类型</li><li>PHP 自动的根据变量的值转换为正确的数据类型</li><li>变量会在首次赋值时被创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$x &#x3D; 10; &#x2F;&#x2F; 这样就创建好了一个变量</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="创建常量"><a href="#创建常量" class="headerlink" title="创建常量"></a>创建常量</h2><ul><li>使用define()函数创建常量 它使用三个参数</li><li>首个参数定义常量的名称</li><li>第二个参数定义常量的值</li><li>可选的第三个参数规定常量是否对大小写敏感，默认是false（大小写敏感）</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">define(<span class="string">"TIME_ZONE"</span>, <span class="string">"Beijin"</span>);</span><br><span class="line"><span class="keyword">echo</span> TIME_ZONE; <span class="comment">// Beijin</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><ul><li><code>global</code>：<code>函数之外声明</code>的变量拥有 global 作用域，只能在函数以外进行访问</li><li><code>local</code> ：<code>函数内部声明</code>的变量拥有 local 作用域，只能在函数内部进行访问</li><li><code>static</code>：变量在函数执行完后不会被删除，就像 C 语言中用 static</li></ul><p><code>$GLOBALS[index]</code> 的数组中存储了所有的全局变量，下标为变量名</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x = <span class="number">10</span>; <span class="comment">// 全局变量</span></span><br><span class="line">$y = <span class="number">20</span>; <span class="comment">// 全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">()</span> </span>&#123; <span class="comment">// 函数定义</span></span><br><span class="line">    <span class="keyword">global</span> $x; <span class="comment">// 函数内访问全局变量需要在全局变量前加 global 关键字</span></span><br><span class="line">    $z = <span class="number">30</span>;   <span class="comment">// 局部变量</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出：[x: 10, y: , z: 30]，函数内不能访问全局变量</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"[x: $x, y: $y, z: $z]&lt;br&gt;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 用 GLOBAL 数组访问全局变量  </span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"x: &#123;$GLOBALS['x']&#125; &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(); <span class="comment">// 执行函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：[x: 10, y: 20, z: ]，函数外不能访问局部变量</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"[x: $x, y: $y, z: $z]&lt;br&gt;"</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> $x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"static: $x &lt;br&gt;"</span>;</span><br><span class="line">    $x++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar(); <span class="comment">// static: 0 </span></span><br><span class="line">bar(); <span class="comment">// static: 1</span></span><br><span class="line">bar(); <span class="comment">// static: 2</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p><code>+</code> <code>-</code> <code>*</code> <code>/</code> <code>%</code><br><code>&gt;</code> <code>&lt;</code> <code>&gt;=</code> <code>&lt;=</code> <code>!=</code> <code>==</code> <code>===</code> <code>||</code> <code>&amp;&amp;</code><br><code>前置++</code> <code>后置++</code> <code>前置--</code> <code>后置--</code><br><code>.</code> <code>.=</code> 用于字符串连接</p><p>比较特别的是 <code>==</code>(值相同就认为相等) <code>===</code>(值相同，并且类型也要相同)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$x = <span class="number">10</span>;</span><br><span class="line">$y = <span class="string">"10"</span>;</span><br><span class="line"></span><br><span class="line">var_dump($x); <span class="comment">// int(10)</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">var_dump($y); <span class="comment">// string(2) "10"</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> $x == $y;  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $x === $y; <span class="comment">// false 输出是空字符串</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> ($x === $y) == <span class="keyword">false</span>;  <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> ($x === $y) === <span class="keyword">false</span>; <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $x . <span class="string">" apples"</span>; <span class="comment">// 10 apples</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数字与字符串比较"><a href="#数字与字符串比较" class="headerlink" title="数字与字符串比较"></a>数字与字符串比较</h2><p>数字与字符串比较时, <code>先尝试将字符串转换为数字</code>, 再比较, 一个不能转换为数字的字符串, 转换结果为0, 故, 与 0 比较总返回 true</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// String to integer</span></span><br><span class="line"><span class="comment">// 返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。</span></span><br><span class="line"><span class="comment">// 如果字符串第一个是‘-'，则从第二个开始算起</span></span><br><span class="line"><span class="keyword">echo</span> (int)(<span class="string">"a11"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> (int)(<span class="string">"11a"</span>); <span class="comment">// 11</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> intval(<span class="string">"a11"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> intval(<span class="string">"11a"</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> intval(<span class="string">"11"</span>, <span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line"><span class="comment">// 这个函数后面的参数代表需要转化的数是几进制</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h2><p><code>if else</code> <code>for</code> <code>foreach</code> <code>while</code> <code>do while</code> <code>switch case</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// if else</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;If else&lt;br&gt;"</span>;</span><br><span class="line">$score = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($score &lt; <span class="number">60</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"小于 60 &lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ($score &lt; <span class="number">80</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"大于等于 60，小于 80 &lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"大于 80 &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// for: 输出 1 到 10</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;For&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$i&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// foreach: 输出数组中的所有元素</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;Foreach&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">$colors = <span class="keyword">array</span>(<span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>, <span class="string">"White"</span>, <span class="string">"Black"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> ($colors <span class="keyword">as</span> $color) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$color &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// while: 输出 1 到 10</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;While&lt;br&gt;"</span>;</span><br><span class="line">$i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ($i++ &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$i&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// do while: 输出 1 到 10</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;Do while&lt;br&gt;"</span>;</span><br><span class="line">$i = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$i&lt;br&gt;"</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (++$i &lt;= <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// switch: 可以使用字符串，数字等</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;&lt;br&gt;Switch&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line">$condition = <span class="string">"A"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> ($condition) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Is 1 &lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"a"</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">"A"</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Is A &lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"B"</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Is B &lt;br&gt;"</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Default &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>PHP 内置了 1000 多个函数，功能很强大，例如要计算一个字符串的 MD5 并转换为大写 <code>strtoupper(md5(&quot;Tidy Code&quot;))</code> 得到 <code>ADCF1E98EBD0FD99E1227346B70BD9E2</code>。</p><p>函数创建和 JavaScript 很像，都是以关键字 <code>function</code> 开头，然后是<code>函数名</code>和<code>参数列表</code>，<code>参数支持默认值</code>，函数的定义和<code>调用顺序</code>没有要求，可以递归调用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> fibonacc(<span class="number">10</span>) . <span class="string">"&lt;br&gt;"</span>; <span class="comment">// 函数调用，输出：55</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 函数定义: 递归实现斐波那契数列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fibonacc</span><span class="params">($n)</span> </span>&#123; <span class="comment">// 变量 $n 的作用域 是 local.</span></span><br><span class="line">    <span class="keyword">if</span> ($n == <span class="number">1</span> || $n == <span class="number">2</span>) &#123; <span class="comment">// 递归结束条件</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fibonacc($n - <span class="number">1</span>) + fibonacc($n - <span class="number">2</span>); <span class="comment">// 递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：1, 1, 2, 3, 5, 8, 13, 21, 34, 55,</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">1</span>; $i &lt;= <span class="number">10</span>; $i++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> fibonacc($i) . <span class="string">", "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认参数只能在参数列表最后面，可以有多个默认参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">($name, $email = <span class="string">"xxxx@gmail.com"</span>, $mobile = <span class="string">"xxxxxxxxxxx"</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Name is: $name, EMail is: $email, Mobile is: $mobile &lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Name is: Alice, EMail is: alice@salmon.com, Mobile is: 12345678901</span></span><br><span class="line">foo(<span class="string">"Alice"</span>, <span class="string">"alice@salmon.com"</span>, <span class="string">"12345678901"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Name is: Alice, EMail is: alice@salmon.com, Mobile is: xxxxxxxxxxx</span></span><br><span class="line">foo(<span class="string">"Alice"</span>, <span class="string">"alice@salmon.com"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：Name is: Alice, EMail is: xxxx@gmail.com, Mobile is: xxxxxxxxxxx</span></span><br><span class="line">foo(<span class="string">"Alice"</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>PHP 里的数组</code>实际上是一个字典 <code>Dictionary</code>，也可以叫 <code>Map</code>，就是用 <code>key/value</code> 的形式存储。没有给出 key 的时候 key 默认就是用下标 0，1，2 等。</p><p>数组用 <code>array()</code> 来创建，数组的长度用 <code>count()</code> 来计算。</p><blockquote><p>同一个 <code>array</code> 对象推荐单纯的作为<code>数组</code>使用，或者是 <code>Map</code> 使用。<br>不要既有数组的用法，同时也有 Map 的用法。</p></blockquote><h3 id="作为普通数组使用"><a href="#作为普通数组使用" class="headerlink" title="作为普通数组使用"></a><code>作为普通数组使用</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$colors = <span class="keyword">array</span>(<span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>); <span class="comment">// 定义数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 使用下标直接访问数组元素</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">$colors[<span class="number">0</span>] = <span class="string">"Yellow"</span>; <span class="comment">// 给数组赋元素值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"$colors[0], $colors[1], $colors[2] &lt;br&gt;"</span>; <span class="comment">// 用下标访问数组的元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 使用 for 循环遍历数组</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">$len = count($colors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; $i++) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $colors[$i];</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 使用 foreach 循环遍历数组</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">foreach</span> ($colors <span class="keyword">as</span> $color) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $color;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 使用数组排序</span></span><br><span class="line">sort() <span class="comment">// 以升序对数组排序</span></span><br><span class="line">rsort() <span class="comment">// 以降序对数组排序</span></span><br><span class="line">asort() <span class="comment">// 根据值，以升序对关联数组进行排序</span></span><br><span class="line">ksort() <span class="comment">// 根据键，以升序对关联数组进行排序</span></span><br><span class="line">arsort() <span class="comment">// 根据值，以降序对关联数组进行排序</span></span><br><span class="line">krsort() <span class="comment">// 根据键，以降序对关联数组进行排序</span></span><br><span class="line"><span class="comment">//////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$numbers = <span class="keyword">array</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">$len = count($numbers);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> join(<span class="string">", "</span>, $numbers) . <span class="string">"&lt;br&gt;"</span>; <span class="comment">// 输出数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择排序: 升序</span></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len - <span class="number">1</span>; $i++) &#123;</span><br><span class="line">    $k = $i;</span><br><span class="line">    <span class="keyword">for</span> ($j = $i; $j &lt; $len; $j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($numbers[$j] &lt; $numbers[$k]) &#123;</span><br><span class="line">            $k = $j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    $temp = $numbers[$k];</span><br><span class="line">    $numbers[$k] = $numbers[$i];</span><br><span class="line">    $numbers[$i] = $temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> join(<span class="string">", "</span>, $numbers) . <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作为-Map-使用"><a href="#作为-Map-使用" class="headerlink" title="作为 Map 使用"></a><code>作为 Map 使用</code></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$ages = <span class="keyword">array</span>(<span class="string">"Alice"</span>=&gt;<span class="string">"20"</span>, <span class="string">"Bob"</span>=&gt;<span class="string">"25"</span>, <span class="string">"Josh"</span>=&gt;<span class="string">"30"</span>); <span class="comment">// 创建 Map</span></span><br><span class="line"><span class="comment">// 另外一种声明方法</span></span><br><span class="line">$age[<span class="string">'Peter'</span>]=<span class="string">"35"</span>;</span><br><span class="line">$age[<span class="string">'Ben'</span>]=<span class="string">"37"</span>;</span><br><span class="line">$age[<span class="string">'Joe'</span>]=<span class="string">"43"</span>;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 使用 key 访问 value，就像 Java 的 Map： map.getValue(key)</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">echo</span> $ages[<span class="string">"Alice"</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 输出所有的 key 和 value.</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">foreach</span>($ages <span class="keyword">as</span> $key=&gt;$value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Key: $key, Value: $value"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">// 输出所有的 value</span></span><br><span class="line"><span class="comment">///////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line"><span class="keyword">foreach</span>($ages <span class="keyword">as</span> $value) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"Value: $value"</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="作为数组和-Map-混用，下标和-key-理解起来就比较混乱"><a href="#作为数组和-Map-混用，下标和-key-理解起来就比较混乱" class="headerlink" title="作为数组和 Map 混用，下标和 key 理解起来就比较混乱"></a>作为数组和 Map 混用，<code>下标</code>和 <code>key</code> 理解起来就比较混乱</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$colors = <span class="keyword">array</span>(<span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>); <span class="comment">// 下标是 0，1，2，实际应该理解为 key。</span></span><br><span class="line">$colors[<span class="number">5</span>] = <span class="string">"Yellow"</span>;</span><br><span class="line">$colors[<span class="number">6</span>] = <span class="string">"Purple"</span>;</span><br><span class="line">$colors[<span class="string">"pink"</span>] = <span class="string">"Pink"</span>; <span class="comment">// 第 5 个元素，但是不能用 $colors[5] 访问(是 Yellow)</span></span><br><span class="line"></span><br><span class="line">$len = count($colors);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $len; ++$i) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $i . <span class="string">"  "</span> . $colors[$i]; <span class="comment">// 下标 3，4 没有元素，所以输出 到 3，4 时会报错</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">foreach</span> ($colors <span class="keyword">as</span> $color) &#123;</span><br><span class="line">    <span class="keyword">echo</span> $color;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------------------------------------&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $colors[<span class="number">5</span>]; <span class="comment">// 数字为 key 时可以不用引号</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> $colors[<span class="string">"5"</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="处理-GET-和-POST-请求"><a href="#处理-GET-和-POST-请求" class="headerlink" title="处理 GET 和 POST 请求"></a>处理 GET 和 POST 请求</h2><p>使用 <code>$_GET[&quot;fieldName&quot;]</code> 取得 get 请求的数据<br>使用 <code>$_POST[&quot;fieldName&quot;]</code> 取得 post 请求的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;form.php&quot; method&#x3D;&quot;GET&quot;&gt; &lt;!-- 换成 POST --&gt;</span><br><span class="line">        Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt;</span><br><span class="line">        Mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail&quot;&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$name &#x3D; $_GET[&quot;name&quot;]; &#x2F;&#x2F; 换成 $_POST</span><br><span class="line">$mail &#x3D; $_GET[&quot;mail&quot;];</span><br><span class="line"></span><br><span class="line">echo &quot;Name is: $name, Mail is: $mail&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">$name &#x3D; &quot;&quot;;</span><br><span class="line">$mail &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; &quot;GET&quot;) &#123; &#x2F;&#x2F; GET or POST</span><br><span class="line">    $name &#x3D; $_GET[&quot;name&quot;];</span><br><span class="line">    $mail &#x3D; $_GET[&quot;mail&quot;];</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    $name &#x3D; $_POST[&quot;name&quot;];</span><br><span class="line">    $mail &#x3D; $_POST[&quot;mail&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo &quot;Request method: &#123;$_SERVER[&quot;REQUEST_METHOD&quot;]&#125;&lt;br&gt;&quot;;</span><br><span class="line">echo &quot;Name is: $name, Mail is: $mail&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p><code>设置 cookie</code>: setcookie(name, value, expire, path, domain)<br><code>取得 cookie</code>: $_COOKIE[name]<br><code>删除 cookie</code>: setcookie(name, “”, time()-3600) 设置 cookie 过期就可以了<br><code>测试 cookie</code>: isset($_COOKIE[name])</p><h3 id="设置-cookie-的页面"><a href="#设置-cookie-的页面" class="headerlink" title="设置 cookie 的页面"></a><code>设置 cookie 的页面</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">setcookie(&quot;user&quot;, &quot;Bob&quot;, time() + 3600); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="访问-cookie-的页面"><a href="#访问-cookie-的页面" class="headerlink" title="访问 cookie 的页面"></a><code>访问 cookie 的页面</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo $_COOKIE[&quot;user&quot;];</span><br><span class="line">echo &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">if (isset($_COOKIE[&quot;mail&quot;])) &#123;</span><br><span class="line">    echo $_COOKIE[&quot;mail&quot;];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>使用 session 前必须<code>启动 session</code>: session_start()<br><code>设置 session</code>: $_SESSION[name]=value<br><code>取得 session</code>: $_SESSION[name]<br><code>删除 session</code>: unset($_SESSION[name])，session_destroy()<br><code>测试 session</code>: isset($\ _SESSION[name])</p><h3 id="设置-session-的页面"><a href="#设置-session-的页面" class="headerlink" title="设置 session 的页面"></a><code>设置 session 的页面</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie</span><br><span class="line">$_SESSION[&#39;number&#39;]&#x3D;1;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="访问-session-的页面"><a href="#访问-session-的页面" class="headerlink" title="访问 session 的页面"></a><code>访问 session 的页面</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start(); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">echo $_SESSION[&quot;number&quot;];</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="Include-Require-文件"><a href="#Include-Require-文件" class="headerlink" title="Include / Require 文件"></a>Include / Require 文件</h2><blockquote><p>通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。<br>include 和 require 语句是相同的，除了错误处理方面：</p></blockquote><ul><li><p>require 会生成致命错误（E_COMPILE_ERROR）并停止脚本</p></li><li><p>include 只生成警告（E_WARNING），并且脚本会继续</p><blockquote><p>因此，如果您希望继续执行，并向用户输出结果，<code>即使包含文件已丢失，那么请使用 include</code>。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。<br>包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。</p></blockquote></li></ul><p><code>include &#39;filename&#39;;</code><br><code>require &#39;filename&#39;;</code><br><code>include_once(&quot;fileName&quot;);</code><br><code>require_once(&quot;fileName&quot;);</code> 括号可要可不要 类的定义推荐用 require_once</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- footer.php --&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;p&gt;Copyright © 2006-"</span> . date(<span class="string">"Y"</span>) . <span class="string">" W3School.com.cn&lt;/p&gt;"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- hello.php --&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">include</span> <span class="string">'header1.php'</span>;<span class="meta">?&gt;</span>&lt;/body&gt;</span><br><span class="line">    &lt;h1&gt;Hello World!&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;Section <span class="number">1</span>&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;Section <span class="number">2</span>&lt;/p&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span> <span class="keyword">require</span> <span class="string">'footer.php'</span>;<span class="meta">?&gt;</span>&lt;/body&gt;</span><br><span class="line">    &lt;p&gt;End&lt;/p&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="PHP-的面向对象：类，和-Java-的类很像"><a href="#PHP-的面向对象：类，和-Java-的类很像" class="headerlink" title="PHP 的面向对象：类，和 Java 的类很像"></a>PHP 的面向对象：类，和 Java 的类很像</h2><ul><li>类的定义：<code>class className {}</code> 没有访问权限一说</li><li>成员变量定义：<code>[qualifier|var] $field;</code> 可以初始化</li><li>成员函数定义：<code>[qualifier] function methodName() {}</code>，可带参数</li><li>构造函数：<code>__construct() {}</code>，可带参数</li><li>创建对象：<code>$obj = new className();</code>，<code>$obj = new className($v1,$v2);</code></li><li>函数调用：<code>$obj-&gt;methodName();</code></li><li>成员函数内访问成员变量：<code>$this-&gt;fieldName</code> 不是 $this-&gt;$fieldName</li><li>成员函数内访问成员函数：<code>$this-&gt;methodName()</code></li><li>PHP 不会自动调用父类的构造函数(不支持构造函数重载，可以使用默认参数实现重载)，必须使用 <code>parent</code> 关键字显式地调用</li><li>PHP 只支持<code>单继承</code>，使用关键字 <code>extends</code></li><li>PHP 也有<code>接口</code>，使用关键字 <code>interface</code> 定义接口，实现接口使用关键字 <code>implements</code></li><li>接口的方法没有实现会报错</li><li>访问权限 <code>qualifier</code>：<code>public</code>, <code>protected</code>, <code>private</code>, <code>abstract</code>, <code>final</code>, <code>static</code>。<code>默认是 public</code> 的访问权限</li><li>可以把类的定义放在单独的文件里，然后使用 <code>require_once</code> 加载</li></ul><h3 id="类定义和继承"><a href="#类定义和继承" class="headerlink" title="类定义和继承"></a><code>类定义和继承</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">class Employee &#123;</span><br><span class="line">    var $name;</span><br><span class="line">    var $salary;</span><br><span class="line">    protected $id;</span><br><span class="line"></span><br><span class="line">    function __construct($name, $salary) &#123; &#x2F;&#x2F; 构造函数</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">        $this-&gt;salary &#x3D; $salary;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getName() &#123;</span><br><span class="line">        return $this-&gt;name; &#x2F;&#x2F; 不能直接用 return $name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setName($name) &#123;</span><br><span class="line">        $this-&gt;name &#x3D; $name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$employee &#x3D; new Employee(&quot;Alice&quot;, 2000);</span><br><span class="line">echo $employee-&gt;getName() . &quot;&lt;br&gt;&quot;;</span><br><span class="line"></span><br><span class="line">$employee-&gt;setName(&quot;Bob&quot;);</span><br><span class="line">echo $employee-&gt;getName() . &quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">&#x2F;&#x2F; 使用继承</span><br><span class="line">class Manager extends Employee &#123;</span><br><span class="line">    var $title;</span><br><span class="line"></span><br><span class="line">    function __construct($name, $salary, $title) &#123;</span><br><span class="line">        parent::__construct($name, $salary); &#x2F;&#x2F; 调用父类的构造函数</span><br><span class="line">        $this-&gt;title &#x3D; $title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getTitle() &#123;</span><br><span class="line">        return $this-&gt;title;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$manager &#x3D; new Manager(&quot;Alice&quot;, 3000, &quot;Project Manager&quot;);</span><br><span class="line">echo $manager-&gt;getName() . &quot;, &quot; . $manager-&gt;getTitle() . &quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a><code>实现接口</code></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">interface Flyable &#123;</span><br><span class="line">    function fly();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Runnable &#123;</span><br><span class="line">    function run();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Bird implements Flyable, Runnable &#123;</span><br><span class="line">    function fly() &#123;</span><br><span class="line">        echo &quot;I can fly.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function run() &#123;</span><br><span class="line">        echo &quot;I can run.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$bird &#x3D; new Bird();</span><br><span class="line">$bird-&gt;fly();</span><br><span class="line">$bird-&gt;run();</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="静态访问-关键字-self"><a href="#静态访问-关键字-self" class="headerlink" title="静态访问 关键字 self"></a><code>静态访问</code> 关键字 self</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;?php</span><br><span class="line">class Test &#123;</span><br><span class="line">    public static $count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 每创建一个对象 count 就加 1</span><br><span class="line">    function __construct() &#123;</span><br><span class="line">        self::$count++; &#x2F;&#x2F; 函数内部访问静态成员</span><br><span class="line">        echo self::$count . &quot; instances are created.&lt;br&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static function getCount() &#123;</span><br><span class="line">        return self::$count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo Test::getCount() . &quot;&lt;br&gt;&quot;; &#x2F;&#x2F; 类外部访问静态成员函数</span><br><span class="line">new Test();</span><br><span class="line">new Test();</span><br><span class="line">new Test();</span><br><span class="line">echo Test::getCount() . &quot;&lt;br&gt;&quot;;</span><br><span class="line">?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h2 id="实用代码"><a href="#实用代码" class="headerlink" title="实用代码"></a>实用代码</h2><h3 id="Array-to-JSON"><a href="#Array-to-JSON" class="headerlink" title="Array to JSON"></a>Array to JSON</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$props = <span class="keyword">array</span>(<span class="string">"background"</span>=&gt;<span class="string">"black"</span>, <span class="string">"width"</span>=&gt;<span class="number">300</span>, <span class="string">"height"</span>=&gt;<span class="number">600</span>);</span><br><span class="line"><span class="keyword">echo</span> json_encode($props); <span class="comment">// &#123;"background":"black","width":300,"height":600&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="取得正在访问的网页的网址"><a href="#取得正在访问的网页的网址" class="headerlink" title="取得正在访问的网页的网址"></a>取得正在访问的网页的网址</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$url = <span class="string">"http://"</span>.$_SERVER[<span class="string">'HTTP_HOST'</span>].$_SERVER[<span class="string">'PHP_SELF'</span>];</span><br><span class="line"><span class="keyword">echo</span> $url . <span class="string">"&lt;br&gt;"</span>; <span class="comment">// http://localhost:8000/hello.php</span></span><br><span class="line"></span><br><span class="line">$name = dirname($url);</span><br><span class="line"><span class="keyword">echo</span> $name . <span class="string">"&lt;br&gt;"</span>; <span class="comment">// http://localhost:8000</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用-PHP-发邮件"><a href="#使用-PHP-发邮件" class="headerlink" title="使用 PHP 发邮件"></a>使用 PHP 发邮件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;form action&#x3D;&quot;hello.php&quot; method&#x3D;&quot;post&quot;&gt;</span><br><span class="line">        &lt;table&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Mail to:&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail_to&quot; &#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Subject:&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subject&quot; &#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;Mail From:&lt;&#x2F;td&gt;</span><br><span class="line">                &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail_from&quot; &#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;textarea name&#x3D;&quot;contents&quot; cols&#x3D;&quot;50&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Send Mail&quot;&#x2F;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;&#x2F;table&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;?php</span><br><span class="line">        $mailTo &#x3D; $_POST[&quot;mail_to&quot;];</span><br><span class="line">        $mailFrom &#x3D; $_POST[&quot;mail_from&quot;];</span><br><span class="line">        $subject &#x3D; $_POST[&quot;subject&quot;];</span><br><span class="line">        $contents &#x3D; $_POST[&quot;contents&quot;];</span><br><span class="line"></span><br><span class="line">        if ($mailTo &amp;&amp; $mailFrom &amp;&amp; $subject &amp;&amp; $contents) &#123;</span><br><span class="line">            &#x2F;&#x2F; 前面那些HTML代码都是为了填写信息更容易，实际发送邮件代码只是下面一句</span><br><span class="line">            &#x2F;&#x2F; 但首先机器上得启动邮件发送程序，Mac下是默认启动的，Linux好像要自己先配置启动</span><br><span class="line">            mail($mailTo, $subject, $contents, &quot;From:&quot;.$mailFrom);</span><br><span class="line">            echo &quot;Mail is successfully sent!&quot;, &quot;&lt;br&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    ?&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><h3 id="PHP中的非贪婪匹配，默认用的是贪婪匹配"><a href="#PHP中的非贪婪匹配，默认用的是贪婪匹配" class="headerlink" title="PHP中的非贪婪匹配，默认用的是贪婪匹配"></a>PHP中的非贪婪匹配，默认用的是贪婪匹配</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 替换图片的目录为统一路径</span></span><br><span class="line">$string = <span class="string">'a&lt;img src="a/b/x.png"&gt;,Biao,&lt;img src="uploads/y.jpg"&gt;'</span>;</span><br><span class="line">$string2 = <span class="string">'a&lt;img src="a/b/x.png"&gt;,Biao,&lt;img src="uploads/y.jpg"&gt;'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// /U为非贪婪，这种非贪婪，是从后面向前找，与+?有些区别</span></span><br><span class="line">$pattern =<span class="string">'/&lt;img src="(.*)\/(.+\\..+)"&gt;/U'</span>;</span><br><span class="line">$replacement = <span class="string">"&lt;img src=\"__IMG_BASE__/$2\"&gt;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> preg_replace($pattern, $replacement, $string);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------"</span>;</span><br><span class="line"></span><br><span class="line">$pattern =<span class="string">'/&lt;img src="(.*)\/(.+\\..+)"&gt;+?/'</span>; <span class="comment">// +?结果与上面的不一样</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> preg_replace($pattern, $replacement, $string2);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"-------------"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出所有的图片，图片名</span></span><br><span class="line">$pattern =<span class="string">"/&lt;img src=\"(.*)\/(.+\\..+)\"&gt;/U"</span>;</span><br><span class="line">preg_match_all($pattern, $string, $images);</span><br><span class="line">print_r($images);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出图片名</span></span><br><span class="line"><span class="keyword">foreach</span> ($images[<span class="number">2</span>] <span class="keyword">as</span> $index =&gt; $imageName) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"$imageName&lt;br/&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="字符串和timestamp的转换-Date-Document"><a href="#字符串和timestamp的转换-Date-Document" class="headerlink" title="字符串和timestamp的转换 Date Document"></a>字符串和timestamp的转换 <a href="http://php.net/manual/en/function.date.php" target="_blank" rel="noopener">Date Document</a></h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> (strtotime(<span class="string">"2010-10-28 10:52:21"</span>)); <span class="comment">// MySQL格式的字符串转换成秒数</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line"><span class="keyword">echo</span> (strtotime(<span class="string">"2010-10-01 00:00:00"</span>));</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span><br><span class="line">$d = date(<span class="string">"Y-m-d H:i:s"</span>, time()); <span class="comment">// 秒数转换成MySQL格式的timestamp</span></span><br><span class="line"><span class="keyword">echo</span> $d;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="访问-MySQL"><a href="#访问-MySQL" class="headerlink" title="访问 MySQL"></a>访问 MySQL</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 插入数据到数据库中, 数据库操作语句都是使用mysql_query</span></span><br><span class="line">mysql_connect(<span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"root"</span>); <span class="comment">// 连接到数据库: url, username, password</span></span><br><span class="line">mysql_select_db(<span class="string">"qt"</span>); <span class="comment">// 选择使用数据库中的表</span></span><br><span class="line"></span><br><span class="line">$result = mysql_query(<span class="string">"SELECT username, password FROM user"</span>);</span><br><span class="line"><span class="keyword">while</span> ($row = mysql_fetch_array($result)) &#123; <span class="comment">// 每使用一次后，会自动移向下一个游标</span></span><br><span class="line">    <span class="comment">// username 和 password 是数据库中列名</span></span><br><span class="line">    <span class="keyword">echo</span> $row[<span class="string">"username"</span>], <span class="string">", "</span>, $row[<span class="string">"password"</span>], <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$username = <span class="string">"Blabla"</span>;</span><br><span class="line">$password = date(<span class="string">"H:i:s"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数据</span></span><br><span class="line">mysql_query(<span class="string">"INSERT INTO USER (username, password) VALUES ('$username', '$password')"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Close MySQL connection</span></span><br><span class="line">mysql_close();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构--线性表</title>
      <link href="/2020/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/2020/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据结构之线性表</p></blockquote><a id="more"></a> <h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>线性表</strong>是数据结构中最简单的数据存储结构，可以理解为“线性的表”。</p><p>线性，是说数据在逻辑结构上具有线性关系。将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。</p><ul><li>首先是一个序列</li><li>其次是有限的</li><li>存储的数据本身的类型一定保持相同。</li><li>线性表的开始元素没有前驱元素只有后继元素，线性表的结束元素没有后继元素只有前驱元素，除了开头元素和结尾元素以外，每个元素都有且只有一个前驱元素和后继元素。</li><li>数据一旦用线性表存储，各个数据元素之间的相对位置就固定了。</li></ul><hr><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p>线性表的存储结构有顺序存储结构和链式存储结构两种，前者称为顺序表，后者称为链表。</p><hr><h3 id="顺序存储结构"><a href="#顺序存储结构" class="headerlink" title="顺序存储结构"></a>顺序存储结构</h3><p>顺序表就是把线性表中的所有元素按照某种逻辑顺序，依次存储到从指定位置开始的一块连续的存储空间，重点是<strong>连续的存储空间</strong>。</p><p>数组长度和线性表的长度区别：数组长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的，线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。</p><ul><li>在顺序表中，各个表项的逻辑顺序与其存放的物理顺序一致，即第i个表项存储于第i个物理位置（1&lt;i≤n）。</li><li>对顺序表中所有表项，既可以进行顺序访问，也可以进行随机访问。也就是说，既可以从表的第一个表项开始逐个访问表项，也可以按照表项的序号（亦称为下标）直接访问表项。</li></ul><h4 id="顺序表的静态存储表示："><a href="#顺序表的静态存储表示：" class="headerlink" title="顺序表的静态存储表示："></a>顺序表的静态存储表示：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxSize 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">T data[maxSize];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><h4 id="顺序表的动态存储表示："><a href="#顺序表的动态存储表示：" class="headerlink" title="顺序表的动态存储表示："></a>顺序表的动态存储表示：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> T;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">T* data;</span><br><span class="line"><span class="keyword">int</span> maxSize，n;</span><br><span class="line">&#125;SeqList;</span><br></pre></td></tr></table></figure><h4 id="顺序表搜索算法："><a href="#顺序表搜索算法：" class="headerlink" title="顺序表搜索算法："></a>顺序表搜索算法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">int</span> <span class="title">Seqlist</span>&lt;T&gt;:</span>:search(T&amp; x)&#123;</span><br><span class="line"><span class="comment">//搜索函数，在表中找到x，找到则返回元素位置，否则返回0</span></span><br><span class="line"><span class="comment">//last表示最后一个元素的数组标号，从0开始，表项是从1开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=last;++i)&#123;</span><br><span class="line">        <span class="keyword">if</span>(data[i]==x) <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序表插入算法："><a href="#顺序表插入算法：" class="headerlink" title="顺序表插入算法："></a>顺序表插入算法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">Seqlist</span>&lt;T&gt;:</span>:insert(<span class="keyword">int</span> i,T&amp; x)&#123;</span><br><span class="line"><span class="comment">//将新元素插入到表第i个元素之后，函数返回true，否则返回false</span></span><br><span class="line">    <span class="keyword">if</span>(last==maxsize<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">0</span>||i&gt;last+<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=last;j&gt;=i;j--)&#123;</span><br><span class="line">        data[j+<span class="number">1</span>]=data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    data[i]=x;</span><br><span class="line">last++;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="顺序表删除算法："><a href="#顺序表删除算法：" class="headerlink" title="顺序表删除算法："></a>顺序表删除算法：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">Seqlist</span>&lt;T&gt;:</span>:<span class="built_in">remove</span>(<span class="keyword">int</span> i,T&amp; x)&#123;</span><br><span class="line"><span class="comment">//删除第i个表项，通过x返回删除的元素值，成功返回true</span></span><br><span class="line">    <span class="keyword">if</span>(last==<span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;last+<span class="number">1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x=data[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=last;j++)&#123;</span><br><span class="line">        data[j<span class="number">-1</span>]=data[j];</span><br><span class="line">    &#125;</span><br><span class="line">    last--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="链式存储结构"><a href="#链式存储结构" class="headerlink" title="链式存储结构"></a>链式存储结构</h3><p>链表，别名链式存储结构或单链表，用于存储逻辑关系为 “一对一” 的数据。与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的，这就意味着这些数据元素可以存在内存未被占用的任意位置。还有一点就是在顺序存储结构中，每个数据空间只需要存储数据元素的信息即可，但是在链式结构中，除了要存储数据元素信息外，还需要存储他的后继元素的存储位置。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域，指针域中存储的信息称为指针或链，数据域和指针域组成数据元素的存储映像，称为结点。</p><hr><h4 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h4><h5 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">linknode</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">linknode* link;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    linknode* first;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="单链表的查找算法"><a href="#单链表的查找算法" class="headerlink" title="单链表的查找算法"></a>单链表的查找算法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">linknode</span>&lt;T&gt;* <span class="title">list</span>&lt;T&gt;:</span>:search(T X)&#123;</span><br><span class="line">    <span class="comment">//成功的时候返回地址，否则返回null</span></span><br><span class="line">    linknode&lt;T&gt;* current = first-&gt;link;<span class="comment">//带附加头结点</span></span><br><span class="line">    <span class="keyword">while</span>(current!=null)&#123;</span><br><span class="line">        <span class="keyword">if</span>(current-&gt;data==x)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> current=current-&gt;link;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> current;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单链表的插入算法"><a href="#单链表的插入算法" class="headerlink" title="单链表的插入算法"></a>单链表的插入算法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">list</span>&lt;T&gt;:</span>:inscrt(<span class="keyword">int</span> i,T&amp; X)&#123;</span><br><span class="line">    <span class="comment">//将新元素插入i结点之后</span></span><br><span class="line">    linknode&lt;T&gt; *current = locate(i);<span class="comment">//return i address</span></span><br><span class="line">    <span class="keyword">if</span>(current==null)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    linknode&lt;T&gt; *newnode = <span class="keyword">new</span> linknode&lt;T&gt;(x);</span><br><span class="line">    <span class="keyword">if</span>(newnode==null)&#123;<span class="built_in">cerr</span>&lt;&lt;<span class="string">"error"</span>&lt;&lt;<span class="built_in">endl</span>;<span class="built_in">exit</span>(<span class="number">1</span>)&#125;</span><br><span class="line">    newnnode-&gt;link=current-&gt;link;</span><br><span class="line">    current-&gt;link=newnode;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="单链表的删除算法"><a href="#单链表的删除算法" class="headerlink" title="单链表的删除算法"></a>单链表的删除算法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">bool</span> <span class="title">list</span>&lt;T&gt;:</span>:<span class="built_in">remove</span>(<span class="keyword">int</span> i,T&amp; X)&#123;</span><br><span class="line">    <span class="comment">//将第i个元素删除，x返回被删除的值</span></span><br><span class="line">    linknode&lt;T&gt; *current = locate(i<span class="number">-1</span>);<span class="comment">//return i-1 address</span></span><br><span class="line">    <span class="keyword">if</span>(current==null||current-&gt;link==null)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    linknode&lt;T&gt; *del = current-&gt;link;</span><br><span class="line">    x=del-&gt;data;</span><br><span class="line">    current-&gt;link=del-&gt;link;</span><br><span class="line">    <span class="keyword">delete</span> del;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h4><p>循环链表（circular list）是另一种形式的表示线性表的链表，它的结点结构与单链表相同，与单链表不同的是链表中表尾结点的link域中不是NULL，而是存放了一个指向链表开始结点的指针。这样，只要知道表中任何一个结点的地址，就能遍历表中其他任一结点。</p><h4 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h4><p>双向链表又称为双链表。使用双向链表（doubly linked list）的目的是为了解决在链表中访问直接前驱和直接后继的问题。因为在双向链表中每个结点都有两个链指针，一个指向结点的直接前驱，一个指向结点的直接后继，这样不论是向前驱方向搜索还是向后继方向搜索，其时间开销都只有O(1)。</p><h4 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h4><p>如果为数组中每一个元素附加一个链接指针，就形成静态链表结构。它允许我们不改变各元素的物理位置，只要重新链接就能够改变这些元素的逻辑顺序。由于它是利用数组定义的，在整个运算过程中存储空间的大小不会变化，因此称之为静态链表。<br>静态链表的每个结点由两个数据成员构成：data域存储数据，link域存放链接指针。所有结点形成一个结点数组。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用汇编指令整理</title>
      <link href="/2020/06/25/%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/25/%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是一些常用汇编指令的整理。</p></blockquote><a id="more"></a> <h2 id="数据传送指令"><a href="#数据传送指令" class="headerlink" title="数据传送指令"></a>数据传送指令</h2><h3 id="通用数据传送指令"><a href="#通用数据传送指令" class="headerlink" title="通用数据传送指令"></a>通用数据传送指令</h3><h4 id="MOV"><a href="#MOV" class="headerlink" title="MOV"></a>MOV</h4><ul><li>格式：<code>MOV dst,src</code></li><li>功能：将<code>src</code>传送到<code>dst</code></li><li>限制：段寄存器间不可直接相互传送，立即数不能直接送段寄存器，CS 不可作为目的操作数。</li></ul><h4 id="PUSH-amp-POP"><a href="#PUSH-amp-POP" class="headerlink" title="PUSH &amp; POP"></a>PUSH &amp; POP</h4><ul><li>格式：<code>PUSH src</code> &amp; <code>POP dst</code></li><li>功能：将 <code>src</code> 压栈 &amp; 出栈送入 <code>dst</code></li><li>限制：CS 不可作目的操作数</li></ul><h4 id="XCHG"><a href="#XCHG" class="headerlink" title="XCHG"></a>XCHG</h4><ul><li>格式：<code>XCHG dst,src</code></li><li>含义：交换两个操作数内容（Exchange）</li><li>限制：段寄存器不可为操作数，也不能同时为存储单元，两个操作数也不能同时为内存变量。</li></ul><h4 id="XLAT"><a href="#XLAT" class="headerlink" title="XLAT"></a>XLAT</h4><ul><li>格式：<code>XLAT</code></li><li>含义：转换表（Table Look-up Translation）</li><li>功能：把待查表格（表格位于 DS:BX）的一个字节内容送到AL累加器中。在执行该指令前，应将TABLE首地址送至BX寄存器中，然后将待查字节与其在表格中距表首地址位移量送AL,即AL&lt;–((BX)+(AL)). </li></ul><hr><h3 id="地址目标传送指令"><a href="#地址目标传送指令" class="headerlink" title="地址目标传送指令"></a>地址目标传送指令</h3><h4 id="LEA"><a href="#LEA" class="headerlink" title="LEA"></a>LEA</h4><ul><li>格式：<code>LEA dst,src</code></li><li>含义：把地址偏移量传送目的操作数（Load Effective Address）</li><li>功能：取<code>src</code>地址偏移量送<code>dst</code></li><li>注：源操作数必须是存储单元，目的操作数必须是除段寄存器之外的 16 位寄存器。</li></ul><h4 id="LDS-amp-LES"><a href="#LDS-amp-LES" class="headerlink" title="LDS &amp; LES"></a>LDS &amp; LES</h4><ul><li>格式：<code>LDS dst,src</code> &amp; <code>LES dst,src</code></li><li>含义：取双字指针送到目的寄存器和 DS/ES</li><li>功能：从源操作数指定的存储单元中取出 4 字节，前两个字节送到目的寄存器，后两个字节送到 DS/ES。</li></ul><hr><h3 id="标志传送指令"><a href="#标志传送指令" class="headerlink" title="标志传送指令"></a>标志传送指令</h3><h4 id="PUSHF-amp-POPF"><a href="#PUSHF-amp-POPF" class="headerlink" title="PUSHF &amp; POPF"></a>PUSHF &amp; POPF</h4><ul><li>格式：<code>PUSHF</code> &amp; <code>POPF</code></li><li>含义：将标志寄存器压栈/出栈</li><li>功能：PUSHF：执行操作: SP=SP-1,(SP)=PSW的高8位, SP=SP-1, (SP)=PSW的低8位，POPF相反。</li></ul><h4 id="LAHF-amp-SAHF"><a href="#LAHF-amp-SAHF" class="headerlink" title="LAHF &amp; SAHF"></a>LAHF &amp; SAHF</h4><ul><li>格式：<code>LAHF</code> &amp; <code>SAHF</code></li><li>含义：Load(Store) AH from(into) Flags</li><li>功能：将标志寄存器低字节送到 AH &amp; 将 AH 送到标志寄存器低字节</li></ul><hr><h3 id="输入输出指令"><a href="#输入输出指令" class="headerlink" title="输入输出指令"></a>输入输出指令</h3><h4 id="IN-amp-OUT"><a href="#IN-amp-OUT" class="headerlink" title="IN &amp; OUT"></a>IN &amp; OUT</h4><ul><li>格式：<code>IN AL/AX, ADDR</code> &amp; <code>OUT ADDR, AL/AX</code></li><li>功能：从端口地址（寄存器）获取数据送到寄存器（端口地址）</li><li>地址格式：端口地址有两种格式，小于 FFH 时可以是直接写出，否则必须先送入 DX 再使用。</li></ul><hr><h2 id="算术运算指令"><a href="#算术运算指令" class="headerlink" title="算术运算指令"></a>算术运算指令</h2><h3 id="加减法指令"><a href="#加减法指令" class="headerlink" title="加减法指令"></a>加减法指令</h3><h4 id="ADD-amp-ADC"><a href="#ADD-amp-ADC" class="headerlink" title="ADD &amp; ADC"></a>ADD &amp; ADC</h4><ul><li>格式：<code>ADD dst,src</code> &amp; <code>ADC dst,src</code></li><li>含义：（带进位）加法</li><li>功能：dst = src + dst (+ CF)</li></ul><h4 id="INC"><a href="#INC" class="headerlink" title="INC"></a>INC</h4><ul><li>格式：<code>INC dst</code></li><li>功能：自增 1，dst = dst + 1</li></ul><h4 id="SUB-amp-SBB"><a href="#SUB-amp-SBB" class="headerlink" title="SUB &amp; SBB:"></a>SUB &amp; SBB:</h4><ul><li>格式：<code>SUB dst,src</code> &amp; <code>SBB dst,src</code></li><li>含义：（带借位）减法</li><li>功能：dst = dst - src (- CF)</li></ul><h4 id="DEC"><a href="#DEC" class="headerlink" title="DEC:"></a>DEC:</h4><ul><li>格式：<code>DEC dst</code></li><li>功能：自减 1，dst = dst + 1</li></ul><h4 id="NEG"><a href="#NEG" class="headerlink" title="NEG:"></a>NEG:</h4><ul><li>格式：<code>NEG dst</code></li><li>功能：对目的操作数取负，dst = -dst</li></ul><hr><h3 id="乘除法指令"><a href="#乘除法指令" class="headerlink" title="乘除法指令"></a>乘除法指令</h3><h4 id="MUL-amp-IMUL"><a href="#MUL-amp-IMUL" class="headerlink" title="MUL &amp; IMUL"></a>MUL &amp; IMUL</h4><ul><li>格式：<code>IMUL src</code> &amp; <code>MUL src</code></li><li>含义：无符号数/整数乘法</li><li>功能：只有一个源操作数，当其为 8 位时，AX = AL * src，为 16 位时，（DX,AX）= AX * src</li></ul><h4 id="DIV-amp-IDIV"><a href="#DIV-amp-IDIV" class="headerlink" title="DIV &amp; IDIV"></a>DIV &amp; IDIV</h4><ul><li>格式：<code>IDIV src</code> &amp; <code>DIV src</code></li><li>含义：无符号数/整数乘法</li><li>功能：只有一个源操作数作为除数，当其为 8 位时，AX 为被除数，AL 作为商，AH 作为余数。当 src 为 16 位时，（DX,AX）作为被除数，AX 作为商，DX 作为余数。</li></ul><hr><h2 id="逻辑运算与移位指令"><a href="#逻辑运算与移位指令" class="headerlink" title="逻辑运算与移位指令"></a>逻辑运算与移位指令</h2><h3 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h3><table><thead><tr><th align="center">指令</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>NOT dst</code></td><td align="center">取反，逻辑非</td></tr><tr><td align="center"><code>AND dst,src</code></td><td align="center">逻辑与</td></tr><tr><td align="center"><code>OR dst,src</code></td><td align="center">逻辑或</td></tr><tr><td align="center"><code>XOR dst,src</code></td><td align="center">异或</td></tr></tbody></table><h3 id="算术逻辑移位"><a href="#算术逻辑移位" class="headerlink" title="算术逻辑移位"></a>算术逻辑移位</h3><table><thead><tr><th align="center">指令</th><th align="center">含义</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>SAL dst,cnt</code></td><td align="center">Shift Arithmetic Left</td><td align="center">算术左移 cnt 位</td></tr><tr><td align="center"><code>SAR dst,cnt</code></td><td align="center">Shift Arithmetic Right</td><td align="center">算术右移 cnt 位</td></tr><tr><td align="center"><code>SHL dst,cnt</code></td><td align="center">Shift Logic Left</td><td align="center">逻辑左移 cnt 位</td></tr><tr><td align="center"><code>SHR dst,cnt</code></td><td align="center">Shift Logic Right</td><td align="center">逻辑右移 cnt 位</td></tr></tbody></table><p>cnt 为 1 或者 CL。算术右移时补最高位，逻辑右移补 0，被移出的移入 CF。</p><h3 id="循环移位"><a href="#循环移位" class="headerlink" title="循环移位"></a>循环移位</h3><table><thead><tr><th align="center">指令</th><th align="center">含义</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>ROL dst,cnt</code></td><td align="center">Rotate Left</td><td align="center">循环左移 cnt 位</td></tr><tr><td align="center"><code>ROR dst,cnt</code></td><td align="center">Rotate Right</td><td align="center">循环右移 cnt 位</td></tr><tr><td align="center"><code>RCL dst,cnt</code></td><td align="center">Rotate through Carry Left</td><td align="center">带进位左移 cnt 位</td></tr><tr><td align="center"><code>RCR dst,cnt</code></td><td align="center">Rotate through Carry Right</td><td align="center">带进位右移 cnt 位</td></tr></tbody></table><hr><h2 id="字符串操作指令"><a href="#字符串操作指令" class="headerlink" title="字符串操作指令"></a>字符串操作指令</h2><table><thead><tr><th align="center">指令（字节/字）</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>MOVSB / MOVSW</code></td><td align="center">字符串传送</td></tr><tr><td align="center"><code>CMPSB / CMPSW</code></td><td align="center">字符串比较</td></tr><tr><td align="center"><code>SCASB / SCASW</code></td><td align="center">字符串扫描</td></tr><tr><td align="center"><code>LODSB / LODSW</code></td><td align="center">字符串装入</td></tr><tr><td align="center"><code>STOSB / STOSW</code></td><td align="center">字符串存储</td></tr></tbody></table><p>对于后三条指令，操作使用 AL/AX 寄存器（根据操作数类型决定）。</p><ul><li>源串起始地址为 DS:SI，目的串位于 ES:DI</li><li>每一次操作都会自动修改 SI 和 DI</li><li>DF 标志位可以控制字符串处理方向，DF = 0 递增，DF = 1 递减，可通过 <code>CLD/STD</code> 设置</li><li>处理字符串长度放在 CX 中</li></ul><p>这些指令前可以用重复前缀 <code>REP</code> 反复执行，或是 <code>REPE/REPZ</code> 相等/为零则重复，<code>REPNE/REPNZ</code> 不相等/非零则重复。</p><hr><h2 id="处理器控制指令"><a href="#处理器控制指令" class="headerlink" title="处理器控制指令"></a>处理器控制指令</h2><h3 id="标志处理指令"><a href="#标志处理指令" class="headerlink" title="标志处理指令"></a>标志处理指令</h3><table><thead><tr><th align="center">指令</th><th align="center">含义</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center"><code>CLC</code></td><td align="center">Clear Carry</td><td align="center">CF = 0</td></tr><tr><td align="center"><code>CMC</code></td><td align="center">Complement Carry</td><td align="center">CF = NOT CF</td></tr><tr><td align="center"><code>STC</code></td><td align="center">Set Carry</td><td align="center">CF = 1</td></tr><tr><td align="center"><code>CLD</code></td><td align="center">Clear Direction</td><td align="center">DF = 0</td></tr><tr><td align="center"><code>STD</code></td><td align="center">Set Direction</td><td align="center">DF = 1</td></tr><tr><td align="center"><code>CLI</code></td><td align="center">Clear Interrupt</td><td align="center">IF = 0</td></tr><tr><td align="center"><code>STI</code></td><td align="center">Set Interrupt</td><td align="center">IF = 1</td></tr></tbody></table><hr><h3 id="外部同步指令"><a href="#外部同步指令" class="headerlink" title="外部同步指令"></a>外部同步指令</h3><h4 id="ESC"><a href="#ESC" class="headerlink" title="ESC"></a>ESC</h4><ul><li>格式：<code>ESC 外部操作码，src</code></li><li>功能：用来实现对 8087 协处理器控制。</li></ul><h4 id="WAIT"><a href="#WAIT" class="headerlink" title="WAIT"></a>WAIT</h4><ul><li>格式：<code>WAIT</code></li><li>功能：往往跟在 <code>ESC</code> 后等待，直到 <code>TEST</code> 为低电平。</li></ul><h4 id="LOCK"><a href="#LOCK" class="headerlink" title="LOCK"></a>LOCK</h4><ul><li>格式：<code>LOCK</code></li><li>功能：封锁总线，禁止其他处理器使用总线。</li></ul><hr><h3 id="停机和空操作"><a href="#停机和空操作" class="headerlink" title="停机和空操作"></a>停机和空操作</h3><h4 id="HLT"><a href="#HLT" class="headerlink" title="HLT"></a>HLT</h4><ul><li>格式：<code>HLT</code></li><li>功能：进入暂停状态不进行任何操作，直到复位或 NMI 引脚/INTR 引脚出现中断请求信号。</li></ul><h4 id="NOP"><a href="#NOP" class="headerlink" title="NOP"></a>NOP</h4><ul><li>格式：<code>NOP</code></li><li>功能：耗费三个时钟周期但不进行任何操作。</li></ul><hr><h2 id="控制转移指令"><a href="#控制转移指令" class="headerlink" title="控制转移指令"></a>控制转移指令</h2><h3 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h3><h4 id="CMP"><a href="#CMP" class="headerlink" title="CMP"></a>CMP</h4><ul><li>格式：<code>CMP dst,src</code></li><li>功能：用 dst 减去 src，但结果仅反映到标志位，不送回目的操作数。</li><li>常见用法：后跟<code>JZ</code>（相等跳转） &amp; <code>JNZ</code> （不相等跳转）。</li></ul><h4 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h4><ul><li>格式：<code>TEST dst,src</code></li><li>功能：对两个操作数作逻辑与，结果仅反映到标志位，不送回目的操作数。</li><li>常见用法：测试某一位，为 1<code>JNZ</code>跳转，为 0 <code>JZ</code>跳转。</li></ul><hr><h3 id="无条件转移"><a href="#无条件转移" class="headerlink" title="无条件转移"></a>无条件转移</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><ul><li>格式：<code>JMP dst</code></li><li>功能：无条件跳转到目的地址。</li></ul><p>跳转分为两种，一种是段内转移或近（NEAR）转移，跳转时仅改变 IP 的值，另一种是段间转移或远（FAR）转移，此时跳转长度超过 IP 最大值，CS 和 IP 都要改变。这两种情况都提供直接转移和间接转移两种方法，前者直接给出目的地址，后者将目的地址放在寄存器或者存储单元中。</p><table><thead><tr><th align="center">类型</th><th align="center">方式</th><th align="center">寻址目标</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">段内</td><td align="center">直接</td><td align="center">立即短转移（8位）</td><td align="center"><code>JMP SHORT 标号</code></td></tr><tr><td align="center">段内</td><td align="center">直接</td><td align="center">立即近转移（16位）</td><td align="center"><code>JMP NEAR PTR 标号</code>或<code>JMP 标号</code></td></tr><tr><td align="center">段内</td><td align="center">间接</td><td align="center">寄存器（16位）</td><td align="center"><code>JMP BX</code></td></tr><tr><td align="center">段内</td><td align="center">间接</td><td align="center">存储器（16位）</td><td align="center"><code>JMP WORD PTR 5[BX]</code></td></tr><tr><td align="center">段间</td><td align="center">直接</td><td align="center">立即转移（32位）</td><td align="center"><code>JMP FAR PTR 标号</code></td></tr><tr><td align="center">段间</td><td align="center">间接</td><td align="center">存储器（32位）</td><td align="center"><code>JMP DWORD PTR[REG]</code></td></tr></tbody></table><h4 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h4><ul><li>格式：<code>CALL 过程名</code></li><li>功能：调用过程。</li></ul><p>同样有段内与段间，直接与间接的区分，指令格式与 JMP 类似。</p><table><thead><tr><th align="center">类型</th><th align="center">方式</th><th align="center">寻址目标</th><th align="center">举例</th></tr></thead><tbody><tr><td align="center">段内</td><td align="center">直接</td><td align="center">立即调用</td><td align="center"><code>CALL 标号</code></td></tr><tr><td align="center">段内</td><td align="center">间接</td><td align="center">寄存器（16位）</td><td align="center"><code>CALL BX</code></td></tr><tr><td align="center">段内</td><td align="center">间接</td><td align="center">存储器（16位）</td><td align="center"><code>CALL WORD PTR 5[BX]</code></td></tr><tr><td align="center">段间</td><td align="center">直接</td><td align="center">立即调用（32位）</td><td align="center"><code>CALL FAR PTR 标号</code></td></tr><tr><td align="center">段间</td><td align="center">间接</td><td align="center">存储器（32位）</td><td align="center"><code>CALL DWORD PTR[REG]</code></td></tr></tbody></table><h4 id="RET"><a href="#RET" class="headerlink" title="RET"></a>RET</h4><ul><li>格式：<code>RET (n)</code></li><li>功能：过程返回。如果有 n 则在弹出返回地址后再弹出 n 个字节，这一目的是让调用过程可以传递参数。</li></ul><hr><h3 id="条件转移"><a href="#条件转移" class="headerlink" title="条件转移"></a>条件转移</h3><ul><li>格式：<code>操作符 标号</code></li><li>功能：根据操作符，满足即跳转到标号。</li></ul><h4 id="直接标志转移"><a href="#直接标志转移" class="headerlink" title="直接标志转移"></a>直接标志转移</h4><table><thead><tr><th align="center">指令</th><th align="center">测试条件</th><th align="center">判断条件</th></tr></thead><tbody><tr><td align="center"><code>JC</code>/<code>JNC</code></td><td align="center">CF = 1 / 0</td><td align="center">有 / 无进位</td></tr><tr><td align="center"><code>JZ</code>/<code>JNZ</code></td><td align="center">ZF = 1 / 0</td><td align="center">相等 / 不相等</td></tr><tr><td align="center"><code>JE</code>/<code>JNE</code></td><td align="center">ZF = 1 / 0</td><td align="center">相等 / 不相等</td></tr><tr><td align="center"><code>JS</code>/<code>JNS</code></td><td align="center">SF = 1 / 0</td><td align="center">符号为负 / 正</td></tr><tr><td align="center"><code>JO</code>/<code>JNO</code></td><td align="center">OF = 1 / 0</td><td align="center">溢出 / 无溢出</td></tr><tr><td align="center"><code>JP</code>/<code>JNP</code></td><td align="center">PF = 1 / 0</td><td align="center">为偶数 / 奇数</td></tr><tr><td align="center"><code>JPE</code>/<code>JPO</code></td><td align="center">PF = 1 / 0</td><td align="center">为偶数 / 奇数</td></tr></tbody></table><h4 id="无符号数比较测试"><a href="#无符号数比较测试" class="headerlink" title="无符号数比较测试"></a>无符号数比较测试</h4><table><thead><tr><th align="center">指令</th><th align="center">测试条件</th><th align="center">判断条件</th></tr></thead><tbody><tr><td align="center"><code>JA</code>/<code>JNBE</code></td><td align="center">CF ∨∨ ZF = 0</td><td align="center">高于 / 不低于等于</td></tr><tr><td align="center"><code>JAE</code>/<code>JNB</code></td><td align="center">CF = 0</td><td align="center">高于等于 / 不低于</td></tr><tr><td align="center"><code>JNAE</code>/<code>JB</code></td><td align="center">CF = 1</td><td align="center">不高于等于 / 低于</td></tr><tr><td align="center"><code>JNA</code>/<code>JBE</code></td><td align="center">CF ∨∨ ZF = 1</td><td align="center">不高于 / 低于等于</td></tr></tbody></table><h4 id="有符号数比较测试"><a href="#有符号数比较测试" class="headerlink" title="有符号数比较测试"></a>有符号数比较测试</h4><table><thead><tr><th align="center">指令</th><th align="center">测试条件</th><th align="center">判断条件</th></tr></thead><tbody><tr><td align="center"><code>JG</code>/<code>JNLE</code></td><td align="center">(SF XORXOR OF) ∨∨ ZF = 0</td><td align="center">大于 / 不小于等于</td></tr><tr><td align="center"><code>JGE</code>/<code>JNL</code></td><td align="center">SF XORXOR OF = 0</td><td align="center">大于等于 / 不小于</td></tr><tr><td align="center"><code>JNGE</code>/<code>JL</code></td><td align="center">SF XORXOR OF = 1</td><td align="center">不大于等于 / 小于</td></tr><tr><td align="center"><code>JNG</code>/<code>JLE</code></td><td align="center">(SF XORXOR OF) ∨∨ ZF = 1</td><td align="center">不大于 / 小于等于</td></tr></tbody></table><hr><h3 id="循环控制指令"><a href="#循环控制指令" class="headerlink" title="循环控制指令"></a>循环控制指令</h3><h4 id="LOOP"><a href="#LOOP" class="headerlink" title="LOOP"></a>LOOP</h4><ul><li>格式：<code>LOOP 标号</code></li><li>功能：跳至标号继续循环，每执行一次 CX 减一，若减一后为零则不跳转。</li></ul><h4 id="LOOPE-amp-LOOPNE"><a href="#LOOPE-amp-LOOPNE" class="headerlink" title="LOOPE &amp; LOOPNE"></a>LOOPE &amp; LOOPNE</h4><ul><li>格式：<code>LOOPE 标号</code> &amp; <code>LOOPNE 标号</code></li><li>功能：（不）相等时循环，其他与 LOOP 相同。</li></ul><h4 id="LOOPZ-amp-LOOPNZ"><a href="#LOOPZ-amp-LOOPNZ" class="headerlink" title="LOOPZ &amp; LOOPNZ"></a>LOOPZ &amp; LOOPNZ</h4><ul><li>格式：<code>LOOPZ 标号</code> &amp; <code>LOOPNZ 标号</code></li><li>功能：结果（不）为零时循环，其他与 LOOP 相同。</li></ul><h4 id="JCXZ"><a href="#JCXZ" class="headerlink" title="JCXZ"></a>JCXZ</h4><ul><li>格式：<code>JCXZ 标号</code></li><li>功能：CX 为零则跳转，否则就往下执行， CS 不会减一。</li></ul><hr><h3 id="中断指令"><a href="#中断指令" class="headerlink" title="中断指令"></a>中断指令</h3><h4 id="INT"><a href="#INT" class="headerlink" title="INT"></a>INT</h4><ul><li>格式：<code>INT n</code></li><li>功能：调用 n 对应的功能。</li></ul><h4 id="INTO"><a href="#INTO" class="headerlink" title="INTO"></a>INTO</h4><ul><li>格式：<code>INTO</code></li><li>功能：如果溢出标识 OF 为 1 则产生类型为 4 的中断，否则就继续向下执行。</li></ul><h4 id="IRET"><a href="#IRET" class="headerlink" title="IRET"></a>IRET</h4><ul><li>格式：<code>IRET</code></li><li>功能：中断返回。</li></ul><hr><h2 id="BIOS-amp-DOS-调用"><a href="#BIOS-amp-DOS-调用" class="headerlink" title="BIOS &amp; DOS 调用"></a>BIOS &amp; DOS 调用</h2><p>调用这两者用的是 INT 中断指令。</p><ul><li>格式：<code>INT n</code></li><li>功能：调用 n 对应的功能。</li></ul><p>其中 n = 21H 是最为强大的 DOS 中断。一般调用中断须先将参数放入指定寄存器，功能号放入 AH，子功能号放入 AL，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MOV AX,4C00H </span><br><span class="line">INT 21H</span><br></pre></td></tr></table></figure><p>常用的功能号有</p><table><thead><tr><th align="center">功能号</th><th align="center">功能</th><th align="center">参数</th></tr></thead><tbody><tr><td align="center">01H</td><td align="center">输入一个字符</td><td align="center">AL = 输入字符</td></tr><tr><td align="center">0AH</td><td align="center">输入字符串</td><td align="center">DX:DX = 缓冲区首地址</td></tr><tr><td align="center">02H</td><td align="center">显示一个字符</td><td align="center">DL = 显示字符</td></tr><tr><td align="center">09H</td><td align="center">显示 $ 结尾的字符串</td><td align="center">DX:DX = 字符串首地址</td></tr></tbody></table><hr><h2 id="常用伪指令"><a href="#常用伪指令" class="headerlink" title="常用伪指令"></a>常用伪指令</h2><h3 id="数值回送操作符"><a href="#数值回送操作符" class="headerlink" title="数值回送操作符"></a>数值回送操作符</h3><h4 id="TYPE"><a href="#TYPE" class="headerlink" title="TYPE"></a>TYPE</h4><ul><li>格式：<code>TYPE expression_r(or label)</code></li><li>功能：返回变量以字节数表示的类型 &amp; 返回标号类型的数值</li></ul><h4 id="LENGTH"><a href="#LENGTH" class="headerlink" title="LENGTH"></a>LENGTH</h4><ul><li>格式：<code>TYPE variable</code></li><li>功能：对于变量使用DUP的情况,将回送分配给该变量的单元数; 对其它情况则回送1</li></ul><h4 id="SIZE"><a href="#SIZE" class="headerlink" title="SIZE"></a>SIZE</h4><ul><li>格式：<code>TYPE variable</code></li><li>功能：回送分配给该变量的字节数 = TYPE * LENGTH</li></ul><h4 id="OFFSET"><a href="#OFFSET" class="headerlink" title="OFFSET"></a>OFFSET</h4><ul><li>格式：<code>TYPE variable (or lable)</code></li><li>功能：回送变量或标号的偏移地址</li></ul><h4 id="SEG"><a href="#SEG" class="headerlink" title="SEG"></a>SEG</h4><ul><li>格式：<code>TYPE variable (or lable)</code></li><li>功能：回送变量或标号的段地址</li></ul><h3 id="数据定义语句"><a href="#数据定义语句" class="headerlink" title="数据定义语句"></a>数据定义语句</h3><ul><li>DB 定义字节,表示其后每个操作数占有一个字节(1Byte)单元</li><li>DW 定义字,表示表示其后每个操作数占有一个字(2Byte)单元</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data_byte     DB      10 , 4 , 10H , ?        ;共定义了4个字节,其中 &#39;?&#39; 是保留单元</span><br><span class="line"></span><br><span class="line">data_word    DW    100 DUP(?)            ;定义100个字的存储空间</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 8086汇编 </tag>
            
            <tag> 考试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>短句分享</title>
      <link href="/2020/06/23/%E7%9F%AD%E5%8F%A5%E5%88%86%E4%BA%AB/"/>
      <url>/2020/06/23/%E7%9F%AD%E5%8F%A5%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘抄了一些很美的短句</p></blockquote><a id="more"></a><p>1/</p><p>四月，应该坦坦荡荡，鸽子从屋檐拥向晴空，青藤从粉墙探向枝头，新茶从瓷碗吻向老桌，传说从故纸堆里挣脱，<strong>你带着苍绿的情书，生锈的戒指，以及喑哑的晚钟，风尘仆仆 ，从远方，奔向我 ，趁风月无边，浮了这盅千里烟波，从此隐入山中，陪你赏朝昏夕落。</strong></p><p>2/</p><p>你是一台磨人的机器 盛产爱和诗意</p><p>3/</p><p>我喜欢的少年打天上来</p><p>他无意掀翻烛火</p><p>点燃我双眸盛满的暮色</p><p> 4/</p><p>ᴹᵉᵉᵗ ʸᵒᵘ ᶠᵘˡˡ ᵒᶠ ˡᵒᵛᵉ / ˢᵉᵉ ᵉᵛᵉʳʸᵗʰⁱⁿᵍ ⁱⁿ ᵗʰᵉ ʷᵒʳˡᵈ / ᶠᵃˡˡ ⁱⁿ ˡᵒᵛᵉ ʷⁱᵗʰ ʸᵒᵘ.</p><p>遇见你爱意汹涌，看世间万物，都浪漫心动。  </p><p> 5/</p><p>山野千里，你是我藏在星星里的浪漫，无尽的温柔与风情都隐匿在皎月清辉中，今晚月色极美，我双手为你奉上</p><p>6/</p><p> 纯洁无暇的善良不够善良。</p><p>遭遇过一切挫折与人性考验后的善良温柔有力量。</p><p>7/</p><p> 很喜欢「日暮里」和「次日清晨」这两个词。<strong>一天的喜怒哀乐都溜进日暮里，在次日清晨给人以重新开始的无限可能。</strong> 疲倦落入温柔暮色里，我会在次日清晨醒着眼睛。</p><p>8/</p><p>あなたの优しさに私は心を引かれた</p><p>你的温柔打动了我的心</p><p>9/</p><p>我是如此单独而完整</p><p>在无数个夜晚我独自顶着冷风</p><p>伫立在老橘树下的桥头</p><p>只为听一曲夜莺的哀歌</p><p>我倚暖了石栏上的青苔</p><p>青苔凉透了我的心坎</p><p>但夜莺不来夜莺不来</p><p>——徐志摩 《我是如此单独而完整》</p><p>10/</p><p>千般荒凉，以此为梦。万里蹀躞，以此为归。</p><p>——余秋雨</p><img src='1.jpg' alt='落日熔金，暮云合璧'><p>11/</p><p> 太阳未出时，全世界都做一个梦，唯有月亮是真实的；</p><p>太阳出来后，全世界都真实了，唯有月亮像一个梦。</p><p>——《冬牧场》</p><p>12/</p><p>ᵂᵃⁿᵗ ᵗᵒ ᵇᵉ ʸᵒᵘʳ / ᵖⁱˡˡᵒʷ ᵇᵒᵒᵏ / ᶜᵃᵗ ⁱⁿ ʸᵒᵘʳ ᵃʳᵐˢ / ˡᵒᵛᵉᵈ ᵒⁿᵉ.</p><p>想做你的枕边书，怀中猫，意中人。 </p><p>13/</p><p>你踩着漫长星辰的光而来，而我在你到来的刹那便失了心智，从此山河过往，凛冬天明，你都有我。</p><p>14/</p><p>树在  山在  大地在</p><p>岁月在</p><p><strong>我在</strong></p><p><strong>你还要怎样更好的世界?</strong></p><p>——张晓风《我在》</p><p>15/</p><p>ᴱˣᵖᵉʳⁱᵉⁿᶜⁱⁿᵍ ᵃ ᵖᵉʳˢᵒⁿ’ˢ ˡᵒⁿᵉˡⁱⁿᵉˢˢ, ᵇᵘᵗ ᵃˡˢᵒ ᵉˣᵖᵉʳⁱᵉⁿᶜⁱⁿᵍ ᵗʰᵉ ᵍⁱᶠᵗ ᵒᶠ ˡᵒⁿᵉˡⁱⁿᵉˢˢ.</p><p>经历着一个人的孤独，也经历着孤独的馈赠。</p><p>16/</p><p>我是个俗气至顶的人，</p><p>见山是山，见海是海，见花便是花。</p><p>唯独见了你，</p><p>云海开始翻涌，江潮开始澎湃，</p><p>昆虫的小触须挠着全世界的痒。</p><p>你无需开口，我和天地万物便通通奔向你。</p><p>17/</p><p>余光中先生说，月色与雪色之间，你是第三种绝色，于我而言,日月星辉之中,你是第四种难得。</p><p>18/</p><p>昼も夜も春も渡らず，夜も眠れない星</p><p>白日春不渡，黑夜万梦星。</p><p>19/</p><p>我是半坏街灯 是将冷煤炭 闪闪烁烁 明明暗暗 只想把有限的光和热 全都给你。</p><p> 20/</p><p>我怀念那个秋天，但我不会因此止步不前我会把有关你的记忆隐于心弦，当然不包括那偶尔泄出的一些思念。</p><img src='2.jpg' alt='风月天边有'><p>21/</p><p>ᵀʰᵉ ᵍʳᵉᵃᵗᵉˢᵗ ʳᵒᵐᵃⁿᶜᵉ ⁱˢ ᵗʰᵉ ᶠᵒᶜᵘˢ ᵒᶠ ᵒⁿᵉ’ˢ ˡⁱᶠᵉ.</p><p>最盛大的浪漫是终其一生的专注。</p><p> 22/</p><p>我希望有个如你一般的人 如山间清爽的风如古城温暖的光，从清晨到夜晚，由山野到书房，不怕路途遥远，只要最后是你就好。</p><p>23/</p><p>我想和你一起生活</p><p>在某个小镇</p><p>共享无尽的黄昏</p><p>和绵绵不绝的钟声</p><p>——茨 维塔耶娃</p><p>24/</p><p>ᴵ ʰᵃᵛᵉ ˢᵃᵛᵉᵈ ᵗᵉⁿᵈᵉʳⁿᵉˢˢ ᵃⁿᵈ ʳᵒᵐᵃⁿᶜᵉ ᶠᵒʳ ᵃ ˡᵒⁿᵍ ᵗⁱᵐᵉ. ᴵ ʷᵃⁿᵗ ᵗᵒ ᵍⁱᵛᵉ ⁱᵗ ᵗᵒ ʸᵒᵘ ᵃˡˡ ᵃᵗ ᵒⁿᶜᵉ.</p><p>攒了好久的温柔与浪漫，想要一次性都给你。 </p><p>25/ </p><p>岁月极美，在于它必然的流逝。 </p><p>春花、秋月、夏日、冬雪。</p><p> 26/</p><p>今夜（こんや）は月（つき）が綺麗（きれい）ですね。</p><p>今晚月色真美。</p><p>27/</p><p><strong>世人慌慌张张，不过是图碎银几两。偏偏这碎银几两，能解世间惆怅，可让父母安康，可护幼子成长，但这碎银几两，也断了儿时的念想，让少年染上沧桑，压弯了脊梁。</strong></p><p>28/</p><p>我是春天里出生的绿皮野兽</p><p>在秋夜里吞下十瓣月亮</p><p>——《桔子》高鹤鸣</p><p>29/</p><p>夏天属于散文和柠檬，属于裸露和慵懒，属于关于回归的想像的永恒闲置，属于稀见的长笛和赤裸的双足，还有八月的卧室卧室中绞结的床单和周日的盐</p><p>——德里克·沃尔科特《夏天的布里克街》</p><p>30/</p><p>读书到某个相似段落的恍神，在外喝冷饮唤起味觉的苏醒，抑或是整理旧衣物时不落痕迹的叹息。这些由你衍生出来的琐碎，在数年如一日的白夜里，融汇成轻柔而遥远的光河。不再触及我。却依然照耀我。</p><img src='3.jpg' alt='凉风有信，风月无边'><p>31/</p><p>最短暂的幸福感和最漫长的余韵，在到达最顶峰的时候迫近死亡，每个人的生命中都有一段summer time。</p><p>32/</p><p>你已穿上书页般的衣冠</p><p>步行在恭敬的瓶形尸首间</p><p>——张枣《十月之水》</p><p>33/</p><p>谁端着夜的筛子<br>将一粒粒光豆豆<br>不停地筛了出来<br>——《星空》</p><p>34/</p><p>我是馊掉的柳丁汁和浓汤，我是爬满虫卵的玫瑰和百合，我是灯火流离的都市里明明存在却没人看得到也没人需要的北极星。</p><p>——林奕含《房思琪的初恋乐园》</p><p>35/</p><p><strong>夕阳染病<br>像潦倒的诗人<br>醉落西湖</strong><br>——《夕阳西下》周末有约</p><p>36/</p><p>阳光退出院子，退得那么慢，其间还有多次停顿，如同一种哽咽。</p><p>——余秀华《月光落在左手上》</p><p>37/</p><p>掉头一去是风吹黑发，回首再来已雪满白头。</p><p>下次你路过，人间已无我。</p><p>——余光中《欢呼哈雷》</p><p>38/</p><p>他来时风尘仆仆，停时依旧是光。</p><p>——高台树色《白日事故》</p>]]></content>
      
      
      <categories>
          
          <category> 摘抄 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 短句 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>夏天的风</title>
      <link href="/2020/06/21/blog-%E8%BF%81%E7%A7%BB/"/>
      <url>/2020/06/21/blog-%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>“在夏天，我们吃绿豆、桃、樱桃和甜瓜。在各种意义上都漫长且愉快，日子发出声响。”</p><p>​                                                                                                ——罗伯特·瓦尔泽《夏天》</p></blockquote><a id="more"></a><p>喜欢夏天，大概是因为夏日有一种特别的感觉吧。</p><p>夏天和雨天一样，有一种特别的韵味。夏天也很有故事感，记忆中好多事都是发生在夏天。夏天也有童年，青春的味道。</p><p>尤其是夏日的午后，蝉声鸣叫，很多人在午睡，全世界就好像安静了下来，只剩自然的声音。</p><p>时光流逝得很慢，蓝蓝的天空，强烈的阳光，喜欢的人。是我爱得无法自拔的夏日～</p><p>印象最深的仍然是那个起风了的夏天，当时的冰淇淋很冰也很甜。</p><!-- more --><p>暗晚风吹起你鬓间的发，抚平回忆留下的疤，你的眼中明交杂，一笑生花。当时是18年的夏天，也是高中毕业的那个夏天。有很复杂的感情，怀念那时的同学，怀念高三的教室，怀念当初那个懵懂无知的自己，怀念着我的青春。</p><p>我们回忆18年的夏天，不是回忆某一年的夏天，每个夏天都不一样，每个人青春的基调却是一样的，有着遗憾，仓促，惋惜</p><p>在这之中，我们变成为现在的自己</p><p>不一定说是我们一定变好了，只是，我们终究长大了</p><p>我们怀念的夏天，只属于我们这一代人</p><p>每一代人的青春都只属于自己</p><p>就像我曾经深爱的你</p><p>后悔吗？</p><p>不知道</p><p>太多太多理由让我喜欢这个季节了</p><p>湛蓝湛蓝的天空，饱满饱满的云朵，树林阴影里穿过凉风，白杨树浓密的叶子簌簌作响，一望无际的田野带着幽香，浓烈的太阳晒得人直发昏，汽车飞驰而过会卷起街道上的尘土，深井里有清冽的凉水，地窖里有甘甜的西瓜，阴凉土房里有的舒服过堂风，漫长的午觉伴着声嘶力竭的蝉鸣。</p><p>学校里还有开了的合欢树，有月季花田，有玉簪，有大湖，外面的小南门里有炸鸡，有热干面，有寿司，有炸串，有麻辣烫，有西瓜。</p><p>在学校，每次下晚课回去的路上很热闹，有情侣争吵，也有热情调笑，他们走在一起，就像青春飘荡在夏风中</p><p>去年夏天我一个人走了很多没走过的路，也遇见和失去了喜欢的人</p><p>我看见了烟波画船，云霞翠轩<br>感受到了朝飞暮卷，雨丝风片</p><p>晚上有时会在小区里溜达，好天气的夜空中能看见浓烈的流云，云片被夜风吹的翻飞。有时也能看见星星。有时也经常和朋友一起去烧烤，坐在露天烧烤摊，吃很多牛板筋，烤土豆，豆角，金针菇，喝下大杯的啤酒，满桌子的小龙虾残骸还有蛤蜊壳。</p><p>夕阳在楼区间若隐若现，晚霞也都被分割成一条一条。</p><blockquote><p>绿槐高柳咽新蝉，薰风初入弦。碧纱窗下水沉烟，棋声惊昼眠。微雨过，小荷翻，榴花开欲然。玉盆纤手弄清泉，琼珠碎却圆。·我喜欢夏日的永昼，我喜欢在多风的黄昏独坐在傍山的阳台上。小山谷里稻浪推涌，美好的稻香翻腾着。慢慢地，绚丽的云霞被浣净了，柔和的晚星一一就位。——张晓风《我喜欢》</p></blockquote><blockquote><p>微风拂过海面，蝉鸣漾入云间。叽叽喳喳的笑声在沙滩上留下深浅不一的足迹，盛暑阳光夺神炫目，模糊了远近的归船。</p></blockquote><p>我希望今年的夏天还能走很多很多的路，吃很多烧烤，西瓜和冰棍。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
