{"meta":{"title":"Aotle","subtitle":"","description":"","author":"John Doe","url":"https://aotle.github.io","root":"/"},"pages":[{"title":"404 Not Found","date":"2020-06-21T05:10:01.101Z","updated":"2020-06-21T05:10:01.101Z","comments":true,"path":"404.html","permalink":"https://aotle.github.io/404.html","excerpt":"","text":"404 哎呀，您访问的页面走丢了呢 可能是输入地址有误或该地址已被删除"},{"title":"关于","date":"2020-08-13T02:54:24.471Z","updated":"2020-08-13T02:54:24.471Z","comments":true,"path":"about/index.html","permalink":"https://aotle.github.io/about/index.html","excerpt":"","text":"旧事大梦一场，不知苦饴。你是北归的飞鸟，在如洗的岁月里居有一方天地。我是南去的良鱼，在深遂的烟海底从此不知归期。听闻路尽之后，便可各自忘记。各有日落与晨曦，各有青山与白衣。可后来我才知道，路尽没有你，日落青山却是你。"},{"title":"所有分类","date":"2020-06-21T05:03:31.662Z","updated":"2020-06-21T05:03:31.662Z","comments":true,"path":"categories/index.html","permalink":"https://aotle.github.io/categories/index.html","excerpt":"","text":""},{"title":"所有标签","date":"2020-06-21T05:06:16.504Z","updated":"2020-06-21T05:06:16.504Z","comments":true,"path":"tags/index.html","permalink":"https://aotle.github.io/tags/index.html","excerpt":"","text":""},{"title":"","date":"2020-06-21T05:07:24.743Z","updated":"2020-06-21T05:07:24.743Z","comments":true,"path":"mylist/index.html","permalink":"https://aotle.github.io/mylist/index.html","excerpt":"","text":""}],"posts":[{"title":"资料整理","slug":"资料整理","date":"2020-11-02T08:53:04.000Z","updated":"2020-11-02T11:50:24.874Z","comments":true,"path":"2020/11/02/资料整理/","link":"","permalink":"https://aotle.github.io/2020/11/02/%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/","excerpt":"本栏目收集了平时看到的写的不错的博客。","text":"本栏目收集了平时看到的写的不错的博客。 主席树https://www.cnblogs.com/zyf0163/p/4749042.html https://www.cnblogs.com/Empress/p/4652449.html","categories":[{"name":"其他","slug":"其他","permalink":"https://aotle.github.io/categories/%E5%85%B6%E4%BB%96/"}],"tags":[{"name":"资料","slug":"资料","permalink":"https://aotle.github.io/tags/%E8%B5%84%E6%96%99/"}]},{"title":"二分查找","slug":"二分查找","date":"2020-10-31T03:33:38.000Z","updated":"2020-11-02T11:50:09.467Z","comments":true,"path":"2020/10/31/二分查找/","link":"","permalink":"https://aotle.github.io/2020/10/31/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","excerpt":"二分查找算法考试复习(不仅仅是二分查找，还有一些水题)","text":"二分查找算法考试复习(不仅仅是二分查找，还有一些水题) 单词排序题目描述小红学会了很多英文单词，妈妈为了帮小红加强记忆，拿出纸、笔，把 N 个单词写在纸上的一行里，小红看了几秒钟后，将这张纸扣在桌子上。妈妈问小红：“你能否将这 N 个单词按照字典排列的顺序，从小到大写出来？”小红按照妈妈的要求写出了答案。现在请你编写程序帮助妈妈检查小红的答案是否正确。注意：所有单词都由小写字母组成，单词两两之间用一个空格分隔。 输入输入包含两行。 第一行仅包括一个正整数N(0&lt;N≤26)。 第二行包含N个单词，表示妈妈写出的单词，两两之间用一个空格分隔。 单个单词长度不超过1010。 输出输出仅有一行。针对妈妈写出的单词，按照字典排列的顺序从小到大排列成一行的结果，每个单词后带一个空格。 样例输入124city boy tree student 样例输出1boy city student tree 思路水题，按照字典序排列后输出即可 代码1234567891011121314151617#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;string s[1015];int main()&#123; int n; cin&gt;&gt;n; for(int i&#x3D;0;i&lt;n;++i)&#123; cin&gt;&gt;s[i]; &#125; sort(s,s+n); for(int i&#x3D;0;i&lt;n;++i)&#123; cout&lt;&lt;s[i]&lt;&lt;&#39; &#39;; &#125;&#125; 渊子赛马题目描述赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为“战国时期”。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。 赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：“下次有机会带我到马场看看，也许我能帮你。” 孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。 比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。 就是这么简单，现在渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。渊子有 N(1&lt;=n&lt;=1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。 输入输入有多组测试数据。 每组测试数据包括 3 行： 第一行输入 N。表示马的数量。 第二行有 N 个整型数字，即渊子的 N 匹马的速度。 第三行有 N 个整型数字，即对手的 N 匹马的速度。 当 N 为 0 时退出。 输出若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出YES。 否则输出NO。 样例输入123456752 3 3 4 51 2 3 4 542 2 1 22 2 3 10 样例输出12YESNO 思路先排序，遍历对手的马，找到刚好能打败对手的马，然后把这匹马标记（不能用了）num++，循环，最后判断num是不是大于n/2+1。 代码123456789101112131415161718192021222324252627282930313233343536#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;algorithm&gt;using namespace std;int s[1015];int d[1015];int flag[1015];int main()&#123; int n; while(cin&gt;&gt;n&amp;&amp;n!=0)&#123; for(int i=0;i&lt;n;++i)&#123; cin&gt;&gt;s[i];//我的马 &#125; for(int i=0;i&lt;n;++i)&#123; cin&gt;&gt;d[i];//对手的马 &#125; sort(s,s+n); sort(d,d+n); int num=0; for(int i=0;i&lt;n;++i)&#123; //遍历对手的马 for(int j=0;j&lt;n;++j)&#123; if(s[j]&gt;d[i]&amp;&amp;flag!=0)&#123; num++; flag[j]=1; break; &#125; &#125; &#125; if(num&gt;n/2+1) cout&lt;&lt;\"YES\"&lt;&lt;endl; else cout&lt;&lt;\"NO\"&lt;&lt;endl; &#125;&#125; 区间第K小题目描述花花上算法课又偷偷摸鱼。她今天刚学会如何求解区间第k小的数，但是感觉没什么意思。于是她将题目稍稍改动了一下：对于一个长度为n的数列a来说，一共有n*(n+1)/2个子区间，对于数列a的每一个子区间，如果这个子区间的长度小于k，我们不管它，否则把该子区间的第k小的数加入新数列b（初始为空）。花花并不关心数列b里面的元素是什么，她只想知道新数列b中第k小的元素是多少。 例如，一个长度为4的数列a={5,3,4,9}，当k取3时只有三个子区间长度是&gt;=3的：{5,3,4},{3,4,9}和{5,3,4,9}。分别提取各自的第3小的数加入b数列得到{5,9,5},其中第3小的数为9。 输入第一行两个数n，k（1&lt;=n, k&lt;=1e5)意义见题目描述 第二行n个数表示数列a中的元素ai。(1&lt;=ai&lt;=1e9) 数据保证数列b中的元素个数不少于k个 输出输出一个数，表示数列b中的第k小的数 样例输入124 35 3 4 9 样例输出19 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//说实话，没看懂这个代码，可能是我太菜了吧#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 100005;int a[N];int n, k;long long max_position(int x)&#123; long long result = 0; int l = 0, r = -1, num = 0; while (r &lt; n) &#123; if (num &lt; k) &#123; if (a[r + 1] &lt;= x)num++; r++; &#125; else &#123; result += n - r; if (a[l] &lt;= x)num--; l++; &#125; &#125; return result;&#125;int main()&#123; cin &gt;&gt; n &gt;&gt; k; int*b=new int[n]; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; b[i] = a[i]; &#125; sort(b, b + n); int len = unique(b, b + n) - b; int l = 0, r = len - 1; int ans = 0; while (l &lt;= r) &#123; int mid = (l + r) / 2; long long ret = max_position(b[mid]); if (ret &gt;= k) &#123; ans = b[mid]; r = mid - 1; &#125; else l = mid + 1; &#125; cout &lt;&lt; ans; return 0;&#125; 元素整除问题题目描述输入20个整数，输出其中能被数组中其它元素整除的那些数组元素。 输入输入20个整数 输出按输入顺序输出符合要求的数字，每行输出一个整数。 样例输入12 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 样例输出12345678910111246891012141516182021 代码123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;using namespace std;int a[20];int b[20];int main()&#123; for (int i = 0; i &lt; 20;++i)&#123; cin &gt;&gt; a[i]; b[i] = a[i]; &#125; sort(b, b + 20); for (int i = 0; i &lt; 20;++i)&#123; bool flag = false; for (int j = 0; j &lt; 20;++j)&#123; if(a[i]&gt;b[j])&#123; if(a[i]%b[j]==0)&#123; flag = true; break; &#125; &#125; else&#123; break; &#125; &#125; if(flag) cout &lt;&lt; a[i] &lt;&lt; endl; &#125; return 0;&#125; 内部收益率题目描述 输入 输出对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。 样例输入123451-1 22-8 6 90 样例输出121.000.50 代码12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;int main()&#123; int n, f, CF[12]; while (cin&gt;&gt;n &amp;&amp; n != 0) &#123; cin &gt;&gt; f; double mid, high = 10000, low = -1, r, k, sum; for (int i = 0; i &lt; n; i++) cin &gt;&gt; CF[i]; while (high - low &gt; 1.0e-6) &#123; mid = (high + low) / 2; k = 1; sum = 0; for (int j = 0; j &lt; n; j++) &#123; k *= (1.0 / (1 + mid)); sum += CF[j] * k; &#125; if (sum + f &gt; 0) low = mid; else high = mid; &#125; cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; mid &lt;&lt; endl; &#125; return 0;&#125; 问题 J: 奶牛的聚会题目描述农历新年马上就要到了，奶牛们计划举办一次聚会庆祝新年的到来。但是，奶牛们并不喜欢走太远的路，这会给他们的聚会带来消极情绪，当一头奶牛的消极指数为Wi，他参加聚会所需行走的距离为si，那么他就会给聚会带来Si3*Wi的消极情绪。所有奶牛所在位置都在一条直线上，已知所有奶牛的坐标和消极指数，求如何确定聚会地点，使得所有奶牛给聚会带来的消极情绪之和最小，输出消极情绪之和的最小值。 输入第一行包含一个整数 Ca(Ca&lt;=20) ，表示有 Ca 组测试数据。 对于每组测试数据：第一行包含一个整数n(1&lt;=n&lt;=50000) ，表示奶牛的数量。接下来 n 行每行包含两个浮点数Si和wi (-106&lt;=Si&lt;=106, 0&lt;Wi&lt;15)。 输出对于每组测试数据，输出 “Case #c: ans” ，其中c表示测试数据编号，ans表示消极情绪之和的最小值，结果四舍五入为一个整数。 样例输入1234567150.9 21.4 43.1 16.2 18.3 2 样例输出1Case #1: 300 思路三分查找法确定消极情绪之和最小的位置，结合注释应该不难理解。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;#include &lt;math.h&gt;using namespace std;typedef long long ll;const int maxn = 50010;double Si[maxn], wi[maxn];int n, Ca;//计算聚会位置在pos时的消极情绪之和double ans(double pos)&#123; double sum = 0; for (int i = 0; i &lt; n; i++) &#123; //计算每个奶牛距离聚会位置的距离(非负) double dist = Si[i] - pos; if (dist &lt; 0) dist = -dist; sum += pow(dist, 3) * wi[i]; &#125; return sum;&#125;int main()&#123; cin &gt;&gt; Ca; for (int i = 1; i &lt;= Ca; i++) &#123; cin &gt;&gt; n; for (int j = 0; j &lt; n; j++) &#123; cin &gt;&gt; Si[j] &gt;&gt; wi[j]; &#125; //找到坐标位置最小的奶牛 double low = Si[0]; for (int k = 0; k &lt; n; k++) if (Si[k] &lt; low) low = Si[k]; //找到坐标位置最小的奶牛 double high = Si[0]; for (int l = 0; l &lt; n; l++) if (Si[l] &gt; high) high = Si[l]; //三分查找法确定最终位置 while (high - low &gt; 1e-7) &#123; double m1 = (high + low) / 2.0; double m2 = (m1 + high) / 2.0; if (ans(m1) &gt; ans(m2)) low = m1; else high = m2; &#125; cout &lt;&lt; \"Case #\" &lt;&lt; i &lt;&lt; \": \" &lt;&lt; ll(ans(low) + 0.5) &lt;&lt; endl; &#125; return 0;&#125; 问题 E: 光合作用题目描述蒜头是个爱学习的孩子，他总喜欢在生活中做一些小实验，这次蒜头想研究一下光合作用。蒜头的实验材料有如下几样：神奇的种子，普通的纸箱和一些光源。一开始，蒜头将种子均匀的种在了箱子底部，你可以将其看成 X 轴，种子的位置为 X 轴上的点。然后蒜头用纸板将箱子盖住，并在纸板上安装了一些光源（具体见图，顶上的为光源，光源两边与顶部的夹角都为45度，黄色部分为光照，绿色的为植物。）。神奇的种子会在有光的情况下一直向上生长直到没光为止。现在蒜头想知道当实验结束时每颗种子的高度是多少？ 输入第一行输入一个整数 T，表示测试数据的组数。 每组数据的第一行是三个整数 n,m,h(1&lt;=n,m&lt;=1e5,0&lt;=m&lt;=1e5,1&lt;=h&lt;=1e4),n表示种子数(编号为1,2…n)，m表示光源数,h 表示箱子的高度。 接下来m行，每行一个整数Xi表示第i个光源在顶部的位置。 输出对于每组测试数据，请输出n行，每行一个数表示第i颗种子的最终高度。 样例输入1234567827 1 244 4 11234 样例输出123456789101100121001111 思路二分法 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;/*********************************************************************************************lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。********************************************************************************************/const int maxn = 1e5 + 5;int x[maxn];int main()&#123; int T; cin &gt;&gt; T; while (T--) &#123; int n, m, h; cin &gt;&gt; n &gt;&gt; m &gt;&gt; h; for (int i = 1; i &lt;= m; i++) &#123; cin &gt;&gt; x[i]; &#125; sort(x + 1, x + m + 1); for (int i = 1; i &lt;= n; i++) &#123; int ans = 0; int cnt = lower_bound(x + 1, x + m + 1, i) - x; if (cnt == 1 &amp;&amp; m != 0) &#123; ans = max(ans, h - x[cnt] + i); &#125; else if (cnt == m + 1 &amp;&amp; m != 0) &#123; ans = max(ans, h - i + x[cnt - 1]); &#125; else if (m != 0) &#123; ans = max(0, max(h - i + x[cnt - 1], h - x[cnt] + i)); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法考试复习2","slug":"算法考试复习2","date":"2020-10-28T06:45:52.000Z","updated":"2020-11-02T11:50:46.407Z","comments":true,"path":"2020/10/28/算法考试复习2/","link":"","permalink":"https://aotle.github.io/2020/10/28/%E7%AE%97%E6%B3%95%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A02/","excerpt":"借鉴了学长们的研究成果","text":"借鉴了学长们的研究成果 0x01 单词排序题目描述小红学会了很多英文单词，妈妈为了帮小红加强记忆，拿出纸、笔，把 N 个单词写在纸上的一行里，小红看了几秒钟后，将这张纸扣在桌子上。妈妈问小红：“你能否将这 N 个单词按照字典排列的顺序，从小到大写出来？”小红按照妈妈的要求写出了答案。现在请你编写程序帮助妈妈检查小红的答案是否正确。注意：所有单词都由小写字母组成，单词两两之间用一个空格分隔。 输入输入包含两行。 第一行仅包括一个正整数N(0&lt;N≤26)。 第二行包含N个单词，表示妈妈写出的单词，两两之间用一个空格分隔。 单个单词长度不超过1010。 输出输出仅有一行。针对妈妈写出的单词，按照字典排列的顺序从小到大排列成一行的结果，每个单词后带一个空格。 样例输入124city boy tree student 样例输出1boy city student tree 代码123456789101112131415161718192021#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;using namespace std;typedef long long ll;string res[30];int main()&#123; int n; cin &gt;&gt; n; for(int i = 0; i &lt; n;++i)&#123; cin &gt;&gt; res[i]; &#125; sort(res, res + n); for (int i = 0; i &lt; n;++i)&#123; cout &lt;&lt; res[i] &lt;&lt; ' '; &#125; return 0;&#125; 0x02 求数组的最长递减序列题目描述给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。 输入输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。 输出输出最长递减子序列，数字之间有一个空格。 样例输入1289 4 3 2 5 4 3 2 样例输出19 5 4 3 2 代码12参考：https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;longest-increasing-subsequence&#x2F;solution&#x2F;zui-chang-shang-sheng-zi-xu-lie-dong-tai-gui-hua-2&#x2F;https:&#x2F;&#x2F;leetcode-cn.com&#x2F;problems&#x2F;number-of-longest-increasing-subsequence&#x2F;solution&#x2F;dong-tai-gui-hua-jie-zui-chang-zi-xu-lie-zi-chua-4&#x2F; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;#include &lt;stack&gt;using namespace std;typedef long long ll;int n;int dp[1005]=&#123;1&#125;, nums[1005], res[1005]=&#123;-1&#125;; //oj好像没办法这样初始化int main()&#123; cin &gt;&gt; n; for (int i = 0; i &lt; n;++i)&#123; cin &gt;&gt; nums[i]; &#125; for (int i = 0; i &lt; n;++i)&#123; dp[i] = 1; res[i] = -1; for (int j = 0; j &lt; i;++j)&#123; if(nums[i]&lt;nums[j]&amp;&amp;dp[j]+1&gt;dp[i]) //严格递减 &#123; dp[i] = dp[j] + 1; res[i] = j;//方便找到字串 &#125; &#125; &#125; int maxn = 0; int num = 0; for(int i=0;i&lt;n;i++) &#123; if(dp[i]&gt;maxn) &#123; maxn=dp[i]; num=i; //找到最优解 &#125; &#125; stack&lt;int&gt; a; a.push(nums[num]); while(res[num]!=-1)&#123; a.push(nums[res[num]]); num = res[num]; &#125; while(!a.empty())&#123; cout &lt;&lt; a.top() &lt;&lt; ' '; a.pop(); &#125;&#125; 0x03 矩形滑雪场题目描述zcb喜欢滑雪。他来到了一个滑雪场，这个滑雪场是一个矩形，为了简便，我们用r行c列的矩阵来表示每块地形。为了得到更快的速度，滑行的路线必须向下倾斜。 例如样例中的那个矩形，可以从某个点滑向上下左右四个相邻的点之一。例如24-17-16-1，其实25-24-23…3-2-1更长，事实上这是最长的一条。 输入第1行:两个数字r，c(1 ≤ r, c ≤ 100)，表示矩阵的行列。第2..r+1行:每行c个数，表示这个矩阵。 输出仅一行:输出1个整数，表示可以滑行的最大长度。 样例输入1234565 51 2 3 4 516 17 18 19 615 24 25 20 714 23 22 21 813 12 11 10 9 样例输出125 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;#include &lt;stack&gt;#include&lt;cmath&gt;using namespace std;typedef long long ll;struct node&#123; int x, y, h;&#125; a[10005];bool cmp(node a,node b)&#123; return a.h&lt;b.h;&#125;int dp[10005];bool check(node a,node b)&#123;//必须满足严格减小才可以滑下去，所以这里加判定 if((b.h&gt;a.h)&amp;&amp;((a.x==b.x&amp;&amp;abs(a.y-b.y)==1)||(a.y==b.y&amp;&amp;abs(a.x-b.x)==1))) return true; return false;&#125;int main()&#123; int num = 0; int m, n; cin &gt;&gt; m &gt;&gt; n; for(int i=1;i&lt;=m;i++) &#123; for(int j=1;j&lt;=n;j++) &#123; cin&gt;&gt;a[num].h; a[num].x=i; a[num].y=j; num++; &#125; &#125; sort(a, a + num, cmp); int mmax = 1;//必定经过自己 for (int i = 0; i &lt; num;++i)&#123; dp[i] = 1; for (int j = 0; j &lt; i;++j)&#123; if(check(a[j],a[i])) dp[i] = max(dp[i], dp[j] + 1); &#125; mmax = max(dp[i], mmax); &#125; cout &lt;&lt; mmax &lt;&lt; endl; return 0;&#125; 0x04 homework题目描述临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。 暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。 I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。 现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。 输入测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。 输出对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位 提示：float 的精度可能不够，你应该使用 double 类型。 样例输入1234564 204 105 2210 31 20 0 样例输出137.00 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int m,n; int a[20],b[20]; double ma[20]; while(cin&gt;&gt;m&gt;&gt;n&amp;&amp;m!=0&amp;&amp;n!=0) &#123; double maxn=0; for(int i=0;i&lt;m;i++) &#123; cin&gt;&gt;a[i]; cin&gt;&gt;b[i]; ma[i]=double(b[i])/a[i]; &#125; int f=0; int s; double vm; while(1) &#123; if(f==m) break; vm=0; for(int i=0;i&lt;m;i++) &#123; if(ma[i]&gt;vm) &#123; vm=ma[i]; s=i; &#125; &#125; if(n&lt;a[s]) &#123; maxn=maxn+n*ma[s]; break; &#125; else &#123; maxn=maxn+b[s]; n=n-a[s]; ma[s]=0; f++; &#125; &#125; cout&lt;&lt;setprecision(2)&lt;&lt;std::fixed&lt;&lt;maxn&lt;&lt;endl; &#125;&#125; 0x05 区间包含问题题目描述已知 n 个左闭右开区间 [a,b)，对其进行 m 次询问，求区间[l,r]最多可以包含 n 个区间中的多少个区间，并且被包含的所有区间都不相交。 输入输入包含多组测试数据，对于每组测试数据： 第一行包含两个整数 n ,m (1≤n≤100000,1≤m≤100) 。 接下来 n 行每行包含两个整数 a ,b (0≤a&lt;b≤10^9) 。 接下来 m 行每行包含两个整数 l ,r (0≤l&lt;r≤10^9) 。 输出对于每组测试数据，输出 m 行，每行包含一个整数。 数据过大请使用快速输入输出。 样例输入123456784 31 32 41 41 21 21 31 4 样例输出123112 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657#include&lt;iostream&gt;#include&lt;algorithm&gt;#define inf 0x7fffffffusing namespace std;typedef struct node&#123; int l; int r;&#125;node;bool cmp(node a, node b)&#123; return a.r &lt; b.r;&#125;int main()&#123; std::ios::sync_with_stdio(false); int n, m; while (cin &gt;&gt; n &gt;&gt; m) &#123; node *nnum = new node[n]; node *mnum = new node[m]; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; nnum[i].l &gt;&gt; nnum[i].r; &#125; for (int i = 0; i &lt; m; i++) &#123; cin &gt;&gt; mnum[i].l &gt;&gt; mnum[i].r; &#125; sort(nnum, nnum + n, cmp); for (int i = 0; i &lt; m; i++) &#123; int res = 0; int k = mnum[i].l; //K初始的时候等于m数组的左边界 for (int j = 0; j &lt; n; j++) &#123; if ((nnum[j].l &gt;= k)) &#123; if (nnum[j].r &lt;= mnum[i].r) &#123; res++; k = nnum[j].r; //每次更新成n数组的右边界 &#125; else //右边界一旦超过，直接扔掉后面的部分结束质询 &#123; break; &#125; &#125; &#125; cout &lt;&lt; res &lt;&lt; endl; &#125; delete[] nnum; delete[] mnum; &#125;&#125; 0x06 最长子序列题目描述在一个数组中找出和最大的连续几个数。（至少包含一个数） 例如： 数组A[] = [-2,1,-3,4,-1,2,1,-5,4]，则连续的子序列[4,-1,2,1]有最大的和6. 输入第一行输入一个不超过1000的整数n。 第二行输入n个整数A[i]。 输出输出一个整数，表示最大的和。 样例输入1231 1 -2 样例输出12 代码1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;#include &lt;stack&gt;#include&lt;cmath&gt;using namespace std;int main()&#123; int n; int a[1005]; int b[1005]=&#123;0&#125;; cin &gt;&gt; n; int sum = 0; for (int i = 1; i &lt;= n;i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 1; i &lt; n;++i)&#123; b[i] = max(b[i - 1] + a[i], a[i]); sum = max(b[i], sum); &#125; cout &lt;&lt; sum; return 0;&#125; 0x07 渊子赛马题目描述赛马是一古老的游戏，早在公元前四世纪的中国，处在诸侯割据的状态，历史上称为“战国时期”。在魏国作官的孙膑，因为受到同僚庞涓的迫害，被齐国使臣救出后，到达齐国国都。 赛马是当时最受齐国贵族欢迎的娱乐项目。上至国王，下到大臣，常常以赛马取乐，并以重金赌输赢。田忌多次与国王及其他大臣赌输赢，屡赌屡输。一天他赛马又输了，回家后闷闷不乐。孙膑安慰他说：“下次有机会带我到马场看看，也许我能帮你。” 孙膑仔细观察后发现，田忌的马和其他人的马相差并不远，只是策略运用不当，以致失败。 比赛前田忌按照孙膑的主意，用上等马鞍将下等马装饰起来，冒充上等马，与齐王的上等马比赛。第二场比赛，还是按照孙膑的安排，田忌用自己的上等马与国王的中等马比赛，在一片喝彩中，只见田忌的马竟然冲到齐王的马前面，赢了第二场。关键的第三场，田忌的中等马和国王的下等马比赛，田忌的马又一次冲到国王的马前面，结果二比一，田忌赢了国王。 就是这么简单，现在渊子也来赛一赛马。假设每匹马都有恒定的速度，所以速度大的马一定比速度小的马先到终点（没有意外！！）。不允许出现平局。最后谁赢的场数多于一半(不包括一半)，谁就是赢家(可能没有赢家)。渊子有 N(1&lt;=n&lt;=1000)匹马参加比赛。对手的马的数量与渊子马的数量一样，并且知道所有的马的速度。聪明的你来预测一下这场世纪之战的结果，看看渊子能否赢得比赛。 输入输入有多组测试数据。 每组测试数据包括 3 行： 第一行输入 N。表示马的数量。 第二行有 N 个整型数字，即渊子的 N 匹马的速度。 第三行有 N 个整型数字，即对手的 N 匹马的速度。 当 N 为 0 时退出。 输出若通过聪明的你精心安排，如果渊子能赢得比赛，那么输出YES。 否则输出NO。 样例输入123456752 3 3 4 51 2 3 4 542 2 1 22 2 3 10 样例输出12YESNO 代码12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;#include &lt;stack&gt;using namespace std;typedef long long ll;int n;int a[1005];int b[1005];int main()&#123; while(cin&gt;&gt;n&amp;&amp;n!=0)&#123; for (int i = 0; i &lt; n;++i)&#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n;++i)&#123; cin &gt;&gt; b[i]; &#125; sort(a, a + n); sort(b, b + n); int sum = 0; for (int i = 0; i &lt; n;++i)&#123; for (int j = 0; j &lt; n;++j)&#123; if(a[j]&gt;b[i])&#123; sum++; a[j] = 0; break; &#125; &#125; &#125; if(sum&gt;=n/2+1)&#123; cout &lt;&lt; \"YES\" &lt;&lt; endl; &#125; else cout &lt;&lt; \"NO\" &lt;&lt; endl; &#125; return 0;&#125; 0x08 最长上升子序列题目描述给定一个长度为n的字符串S（只包含小写字母），给出q次查询，对于每次查询x，求出以S[x]（下标从0开始）为起始的最长上升子序列的长度（严格增）。 输入第一行两个整数n,q(1&lt;=n,q&lt;=1e5)，意义见题目描述。 第二行一个长度为n的字符串S。 第三行q个整数x(0&lt;=x&lt;n)，表示q次查询。 输出输出q个数（以空格分割，行末有空格），表示以S[x]为起始的最长上升子序列的长度。 样例输入12310 3abbaaccbbd2 5 8 样例输出13 2 2 代码12345678910111213141516171819202122232425#include&lt;iostream&gt;using namespace std;int n,q;char a[100010];int ans[100010],p[30];int main()&#123; //cin&gt;&gt;n&gt;&gt;q; scanf(\"%d%d\",&amp;n,&amp;q); //cin&gt;&gt;a; scanf(\"%s\",a); for(int i=n-1;i&gt;=0;i--) &#123; ans[i]=1; for(int j=a[i]-'a'+1;j&lt;26;j++) ans[i]=max(ans[i],p[j]+1); p[a[i]-'a']=ans[i]; &#125; int x; while(q--) &#123; scanf(\"%d\",&amp;x); printf(\"%d \",ans[x]); &#125;&#125; 0x09 区间第K小题目描述花花上算法课又偷偷摸鱼。她今天刚学会如何求解区间第k小的数，但是感觉没什么意思。于是她将题目稍稍改动了一下：对于一个长度为n的数列a来说，一共有n*(n+1)/2个子区间，对于数列a的每一个子区间，如果这个子区间的长度小于k，我们不管它，否则把该子区间的第k小的数加入新数列b（初始为空）。花花并不关心数列b里面的元素是什么，她只想知道新数列b中第k小的元素是多少。 例如，一个长度为4的数列a={5,3,4,9}，当k取3时只有三个子区间长度是&gt;=3的：{5,3,4},{3,4,9}和{5,3,4,9}。分别提取各自的第3小的数加入b数列得到{5,9,5},其中第3小的数为9。 输入第一行两个数n，k（1&lt;=n, k&lt;=1e5)意义见题目描述 第二行n个数表示数列a中的元素ai。(1&lt;=ai&lt;=1e9) 数据保证数列b中的元素个数不少于k个 输出输出一个数，表示数列b中的第k小的数 样例输入124 35 3 4 9 样例输出19 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//没看懂#include&lt;bits/stdc++.h&gt;using namespace std;const int N = 100005;int a[N];int n, k;long long max_position(int x)&#123; long long result = 0; int l = 0, r = -1, num = 0; while (r &lt; n) &#123; if (num &lt; k) &#123; if (a[r + 1] &lt;= x)num++; r++; &#125; else &#123; result += n - r; if (a[l] &lt;= x)num--; l++; &#125; &#125; return result;&#125;int main()&#123; cin &gt;&gt; n &gt;&gt; k; int*b=new int[n]; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; b[i] = a[i]; &#125; sort(b, b + n); int len = unique(b, b + n) - b; int l = 0, r = len - 1; int ans = 0; while (l &lt;= r) &#123; int mid = (l + r) / 2; long long ret = max_position(b[mid]); if (ret &gt;= k) &#123; ans = b[mid]; r = mid - 1; &#125; else l = mid + 1; &#125; cout &lt;&lt; ans; return 0;&#125; 0x0A 元素整除问题题目描述输入20个整数，输出其中能被数组中其它元素整除的那些数组元素。 输入输入20个整数 输出按输入顺序输出符合要求的数字，每行输出一个整数。 样例输入12 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 样例输出12345678910111246891012141516182021 代码123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include&lt;vector&gt;#include&lt;string&gt;#include &lt;iomanip&gt;#include&lt;algorithm&gt;#include &lt;stack&gt;#include&lt;cmath&gt;using namespace std;int main()&#123; int a[20],b[20]; for(int i=0;i&lt;20;i++) &#123; cin&gt;&gt;a[i]; b[i]=a[i]; &#125; sort(b,b+20); for(int i=0;i&lt;20;i++) &#123; //cout&lt;&lt;b[i]&lt;\" \"; int sign=0; for(int j=0;j&lt;20;j++) &#123; if(b[j]&lt;a[i]) &#123; if(a[i]%b[j]==0) sign=1; &#125; else break; &#125; if(sign==1) cout&lt;&lt;a[i]&lt;&lt;endl; &#125; return 0;&#125; 0x0B 八皇后问题题目描述努比亚和苏丹没有子女，所以他要从一些有集成资格的继承者中挑选一个出来继承王位。他希望这个继承者足够聪明，所以他准备了一个西洋棋盘，上面的每个格子中均有一个 1-99 的数字。他又准备了 8 个皇后棋子。 8 皇后的规则就是不能有任何棋子同行或者同列或者同斜线，在满足这个规则的同时，王位继承者还需要让 8 个皇后所在的位置的数字的和是最大的。 输入输入一个数字 k(k≤20)，代表棋盘的数量。 接下来有 k 个棋盘，每个棋盘有 64 个数字，分成 8 行 8 列输入，具体可见样例，每一个数字均小于 100。 输出每一个棋盘对应输出最大的数值， 一共输出 k行 样例输入12345678911 2 3 4 5 6 7 89 10 11 12 13 14 15 1617 18 19 20 21 22 23 2425 26 27 28 29 30 31 3233 34 35 36 37 38 39 4041 42 43 44 45 46 47 4848 50 51 52 53 54 55 5657 58 59 60 61 62 63 64 样例输出1260 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;math.h&gt;#include&lt;string.h&gt;#include&lt;algorithm&gt;using namespace std;int map[8][8],x[8],ans,sum;bool check(int xx,int yy)&#123; for(int i = 0; i &lt; xx; i++) &#123; if(yy == x[i]) return false; if(abs(xx - i) == abs(yy - x[i])) return false; &#125; return true;&#125;void queen(int n)&#123; if(n == 8)&#123;ans = max(ans,sum);return;&#125; for(int i = 0; i &lt; 8; i++) &#123; if(check(n,i)) &#123; x[n] = i; sum += map[n][i]; queen(n+1); x[n] = -1; sum -= map[n][i]; &#125; &#125;&#125;int main()&#123; int t; scanf(\"%d\",&amp;t); while(t--) &#123; ans = 0; sum = 0; for(int i = 0; i &lt; 8; i++) for(int j = 0; j &lt; 8; j++) scanf(\"%d\",&amp;map[i][j]); memset(x,-1,sizeof(x)); queen(0); printf(\"%d\\n\",ans); &#125; return 0;&#125; 0x0C 组合运算式题目描述请考虑一个被空格分隔的，由1到N的整数组成的递增数列：1 2 3 …N。现在请在数列中插入表示加的“+”，或者表示减“-”，亦或者表示空白的“ ”(例如1-2 3就等于1-23)，来将每一对数字组合成一个表达式（第一个数字前无空格）。计算该表达式的结果并判断其值是否为0。请你写一个程序找出所有产生和为零的长度为N的数列。 输入输入为一行，包含一个整数N，3*≤N≤*9。 输出输出为所有在每对数字间插入“+”, “-”, 或 “ ”后能得到和为零的数列，并按照字典（ASCII码）序排列。 样例输入17 样例输出1234561+2-3+4-5-6+71+2-3-4+5+6-71-2 3+4+5+6+71-2 3-4 5+6 71-2+3+4-5+6-71-2-3-4-5+6+7 代码123456789101112131415161718192021222324252627282930313233343536373839#include&lt;iostream&gt;#include&lt;stdio.h&gt;using namespace std;int n;int OP[15] = &#123;1,1&#125;;void dfs(int d,int sum,int pre,int s)&#123; sum += pre; if(d == n) &#123; if(!sum) &#123; printf(\"1\"); for(int i = 2; i &lt;= n; i++) &#123; if(!OP[i]) printf(\" %d\",i); else if(OP[i] == 1) printf(\"+%d\",i); else printf(\"-%d\",i); &#125; printf(\"\\n\"); &#125; return; &#125; if(s&lt;=3)&#123; OP[d+1] = 0; if(pre &gt;= 0) dfs(d+1,sum-pre,pre*10+d+1,s+1); else dfs(d+1,sum-pre,pre*10-d-1,s+1); &#125; OP[d+1] = 1; dfs(d+1,sum,d+1,s); OP[d+1] = 2; dfs(d+1,sum,-d-1,s);&#125;int main()&#123; scanf(\"%d\",&amp;n); dfs(1,0,1,0); return 0;&#125; 0x0D 无脑博士的试管们题目描述无脑博士有三个容量分别是 A,B,C 升的试管，A,B,C分别是三个从 1到 20的整数，最初，A 和 B 试管都是空的，而 C 试管是装满硫酸铜溶液的。有时，无脑博士把硫酸铜溶液从一个试管倒到另一个试管中，直到被灌试管装满或原试管空了。当然每一次灌注都是完全的。由于无脑博士天天这么折腾，早已熟练，溶液在倒的过程中不会有丢失。 写一个程序去帮助无脑博士找出当 A 试管是空的时候，C 试管中硫酸铜溶液所剩量的所有可能性。 输入多组测试用例，对于每组测试用例，输入包括一行，为空格分隔开的三个数，分别为整数 A,B,C。 输出输出包括一行，升序地列出当 A 试管是空的时候，C 试管溶液所剩量的所有可能性。 样例输入12 5 10 样例输出15 6 7 8 9 10 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;set&gt;using namespace std;set&lt;int&gt; s;int na,nb,nc;bool visited[25][25][25];void dfs(int a,int b,int c)&#123; if(visited[a][b][c]) return; visited[a][b][c] = true; if(!a) s.insert(c); if(a &lt;= nb-b) dfs(0,a+b,c); else dfs(a-nb+b,nb,c); if(b &lt;= na-a) dfs(a+b,0,c); else dfs(na,a-na+b,c); if(a &lt;= nc-c) dfs(0,b,a+c); else dfs(a-nc+c,b,nc); if(c &lt;= na-a) dfs(a+c,b,0); else dfs(na,b,c-na+a); if(b &lt;= nc-c) dfs(a,0,b+c); else dfs(a,b-nc+c,nc); if(c &lt;= nb-b) dfs(a,b+c,0); else dfs(a,nb,c-nb+b);&#125;int main()&#123; while(~scanf(\"%d %d %d\",&amp;na,&amp;nb,&amp;nc)) &#123; s.clear(); memset(visited,0,sizeof(visited)); dfs(0,0,nc); set&lt;int&gt;::iterator it = s.begin(); printf(\"%d\",*it); it++; for(; it != s.end(); it++) &#123; printf(\" %d\",*it); &#125; printf(\"\\n\"); &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"快速跳过青年大学习","slug":"快速跳过青年大学习","date":"2020-09-12T05:15:01.000Z","updated":"2020-09-12T05:27:38.386Z","comments":true,"path":"2020/09/12/快速跳过青年大学习/","link":"","permalink":"https://aotle.github.io/2020/09/12/%E5%BF%AB%E9%80%9F%E8%B7%B3%E8%BF%87%E9%9D%92%E5%B9%B4%E5%A4%A7%E5%AD%A6%E4%B9%A0/","excerpt":"本教程适用于安卓手机","text":"本教程适用于安卓手机 准备既然要优雅地完成大学习，首先得让微信给我们一个输入自己的代码的机会 按照如下步骤可以打开微信的开发工具 微信浏览器网页打开http://debugx5.qq.com打开下面两项，就可以调试了 可以将这个网址发给一个好友，就能够在微信里面打开了 开始打开青年大学习，进入视频播放页面，会发现右下角出现一个绿色的vConsole图标，点击它会出现如下界面。 输入以下代码： 12$('.section3').addClass('topindex1');$('.section4,#Cvideo').hide(); 点击ok即可快速跳过 微信朋友圈分享使用上面的代码快速完成大学习后，使用微信分享仍然是未完成状态 查阅资料后得知导致这一问题的原因是腾讯分享的sdk标题是网站自定义的，只好通过下面的代码来重新配置腾讯分享sdk来达到正常效果 12345678910var title = document.title;var newtitle = title.slice(0, 7) + \"网上主题团课\" + title.slice(7);$(\"script\").each(function () &#123; var content = $(this).text(); if (content.indexOf(title)!=-1) &#123; var script = content.replace(title,\"满分！我完成了\"+newtitle+\"，你也来试试吧\"); eval(script); &#125;&#125;); 方案比较暴力，因为对应的dom元素没有id，只好查找替换了 效果 但是为什么是这样的要搞清楚为什么是这样的，那就得使用调试工具对源代码一探究竟了 使用usb线将手机连接到电脑，打开手机的usb调试功能，并对电脑链接进行授权 （这里可能有人想问为啥不使用桌面版chrome的开发者工具直接调试网站，博主刚开始尝试使用桌面版chrome加载该网站时无论使用任何办法都无法将其切换到移动版的学习界面，可能是本人技术不够吧） 授权在微信内复制学习页面的链接，使用移动版chrome进入到开始学习页面，使用桌面版chrome打开chrome://inspect/#devices 稍等片刻后就可以显示出chrome打开的网站 点击inspect即可开始调试该网页 在某个script标签内找到了如下代码 既然视频结束后肯定要暂停视频并且显示某个页面，那么就把代码粘贴到console试试 成功!","categories":[{"name":"js","slug":"js","permalink":"https://aotle.github.io/categories/js/"}],"tags":[{"name":"js","slug":"js","permalink":"https://aotle.github.io/tags/js/"},{"name":"前端","slug":"前端","permalink":"https://aotle.github.io/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"对称加密和非对称加密","slug":"对称加密和非对称加密","date":"2020-09-10T14:31:16.000Z","updated":"2020-09-10T14:34:35.496Z","comments":true,"path":"2020/09/10/对称加密和非对称加密/","link":"","permalink":"https://aotle.github.io/2020/09/10/%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E5%92%8C%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86/","excerpt":"介绍了对称加密和非对称加密","text":"介绍了对称加密和非对称加密 对称加密（Symmetric Cryptography），又称私钥加密对称加密是最快速、最简单的一种加密方式，加密（encryption）与解密（decryption）用的是同样的密钥（secret key）,这种方法在密码学中叫做对称加密算法。对称加密有很多种算法，由于它效率很高，所以被广泛使用在很多加密协议的核心当中。对称加密通常使用的是相对较小的密钥，一般小于256 bit。因为密钥越大，加密越强，但加密与解密的过程越慢。如果你只用1 bit来做这个密钥，那黑客们可以先试着用0来解密，不行的话就再用1解；但如果你的密钥有1 MB大，黑客们可能永远也无法破解，但加密和解密的过程要花费很长的时间。密钥的大小既要照顾到安全性，也要照顾到效率，是一个trade-off。 非对称加密（Asymmetric Cryptography），又称公钥加密1976年，美国学者Dime和Henman为解决信息公开传送和密钥管理问题，提出一种新的密钥交换协议，允许在不安全的媒体上的通讯双方交换信息，安全地达成一致的密钥，这就是“公开密钥系统”。相对于“对称加密算法”这种方法也叫做“非对称加密算法”。非对称加密为数据的加密与解密提供了一个非常安全的方法，它使用了一对密钥，公钥（public key）和私钥（private key）。私钥只能由一方安全保管，不能外泄，而公钥则可以发给任何请求它的人。非对称加密使用这对密钥中的一个进行加密，而解密则需要另一个密钥。比如，你向银行请求公钥，银行将公钥发给你，你使用公钥对消息加密，那么只有私钥的持有人–银行才能对你的消息解密。与对称加密不同的是，银行不需要将私钥通过网络发送出去，因此安全性大大提高。 优缺点对称密钥加密我们从定义中应该就可以明白，它是信息的发送方和接收方都用同一个秘钥去加密和解密数据。这样做它的最大优势是加/解密速度快，适合于对大数据量进行密，但密钥管理困难，密钥在网络传输的过程种容易被窃取。 非对称密钥加密，它需要使用“一对”密钥来分别完成加密和解密操作，一个公开发布，即公开密钥，另一个由用户自己秘密保存，即私用密钥。信息发送者用公开密钥去加密，而信息接收者则用私用密钥去解密。公钥机制灵活，但加密和解密速度却比对称密钥加密慢得多。非对称密钥加密的使用过程： A要向B发送信息，A和B都要产生一对用于加密和解密的公钥和私钥。 A的私钥保密，A的公钥告诉B；B的私钥保密，B的公钥告诉A。 A要给B发送信息时，A用B的公钥加密信息，因为A知道B的公钥。 A将这个消息发给B（已经用B的公钥加密消息）。 B收到这个消息后，B用自己的私钥解密A的消息，其他所有收到这个报文的人都无法解密，因为只有B才有B的私钥。 反过来，B向A发送消息也是一样。 从上面大家应该可以看出对称加密和非对称加密的区别，下面稍微进行一下总结： （1） 对称加密加密与解密使用的是同样的密钥，所以速度快，但由于需要将密钥在网络传输，所以安全性不高。（2） 非对称加密使用了一对密钥，公钥与私钥，所以安全性高，但加密与解密速度慢。（3） 解决的办法是混合加密——将对称加密的密钥使用非对称加密的公钥进行加密，然后发送出去，接收方使用私钥进行解密得到对称加密的密钥，然后双方可以使用对称加密来进行沟通。 混合加密是目前在通信方面最安全的做法。","categories":[{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/categories/%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"密码学","slug":"密码学","permalink":"https://aotle.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"数字签名和数字证书","slug":"数字签名和数字证书","date":"2020-09-10T14:18:38.000Z","updated":"2020-09-10T15:25:42.479Z","comments":true,"path":"2020/09/10/数字签名和数字证书/","link":"","permalink":"https://aotle.github.io/2020/09/10/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E5%92%8C%E6%95%B0%E5%AD%97%E8%AF%81%E4%B9%A6/","excerpt":"介绍了数字签名和数字证书","text":"介绍了数字签名和数字证书 散列函数和消息摘要一段信息，经过摘要算法(散列函数)得到一串哈希值，就是摘要(dijest)。 信息是任意长度，而摘要是定长。 摘要算法有MD5、SHA1、SHA256、SHA512等，算法把无限的映射成有限，因此可能会有碰撞（两个不同的信息，算出的摘要相同） 摘要不同于加密算法，因为不存在解密，只不过从摘要反推原信息很难（可以认为能加密但无法解密还原，但可以用于比对）。类比到人的话：时间一直向前走 ，我没有办法从现在的你身上反观到你过去的样子，也没法从现在的他身上反观到他过去的样子……但你们现在的样子依然有作用，那就是在于“是否相同”：我可以通过比对现在的你和现在的他是否相同，来判断过去的你和他是否相同，而无需知道过去的你和过去的他具体是什么样子。 摘要相同，信息一定相同。如果两张图片的md5相同，说明图片完全一样。 一个安全的摘要算法需要满足： 1、输入长度是任意的，输出是固定的 2、对每一个给定的输入,计算输出是很容易的 3、给定H,找到两个不同的输入，输出同一个值在计算上不可行 4、给定H和一个消息x,找到另一个不同的消息y，使它们散列到同一个值在计算上不可行 常见的散列算法：MD2、MD4、MD5、SHA、SHA-1 数字签名数字签名是指发送方以电子形式签名一个消息或文件，签名后的消息或文件能在网络中传输，并表示签名人对该消息或文件的内容负有责任。数字签名综合使用了消息摘要和非对称加密技术，可以保证接受者能够核实发送者对报文的签名，发送者事后不抵赖报文的签名，接受者不能篡改报文内容和伪造对报文的签名。 数字签名需要做到两点： 1、确认信息是由签名者发送的； 2、确认信息从签发到接受没有被修改过。 数字签名的过程与示意图： 1、发送方要发送消息运用散列函数（MD5、SHA-1等）形成消息摘要； 2、发送方用自己的私钥对消息摘要进行加密，形成数字签名； 3、发送方将数字签名附加在消息后发送给接收方； 4、接受方用发送方的公钥对签名信息进行解密，得到消息摘要； 5、接收方以相同的散列函数对接收到的消息进行散列，也得到一份消息摘要； 6、接收方比较两个消息摘要，如果完全一致，说明数据没有被篡改，签名真实有效；否则拒绝该签名。 如果通信的内容是加密的，就需要采用数字信封：发送方用对称密钥加密明文，然后用对方的公钥加密对称密钥发送给对方，对方收到电子信封，用自己的私钥解密，得到对称密钥解密，还原明文。此时数字签名的过程如下： 1、发送方要发送消息运用散列函数（MD5、SHA-1等）形成消息摘要； 2、发送方用自己的私钥对消息摘要进行加密，形成数字签名； 3、发送方用对称加密算法对消息原文、数字签名进行加密，得到密文信息； 4、发送方用接收方的公钥加密对称加密算法的密钥进行加密，形成数字信封； 5、发送方将3中的密文信息和数字信封一起发给接收方； 6、接收方首先用自己的私钥解密数字信封，还原对称加密算法的密钥； 7、接受方用6中的密钥解密接收到的密文，得到原文信息和数字签名； 8、接受方用发送方的公钥对签名信息进行解密，得到消息摘要； 9、接收方以相同的散列函数对接收到的消息进行散列，也得到一份消息摘要； 10、接收方比较两个消息摘要，如果完全一致，说明数据没有被篡改，签名真实有效；否则拒绝该签名。 数字证书数字签名中“公钥”可能被攻击者替换，为了保证“公钥”是可信的，数字证书应运而生。 数字证书是一种权威的电子文档，由权威公正的第三方认证机构（CA）签发，广泛用于涉及需要身份认证和数据安全的领域。 注意这里有两个不同的非对称算法（对应2个公钥私钥对），一个算法是发送方加密摘要的，用于生成数字签名；另一个算法是CA加密发送方公钥的，用于生成数字证书。两个算法相互独立，没有必然联系。 发送时不仅发送内容、数字签名，还包含发送方的数字证书。接收方拿到后，首先从数字证书中解密出发送方公钥（用的是CA的公钥和CA解密算法），这个公钥必然是可信的。然后就是和前面一样的流程，拿发送方公钥去解密数字证书，得到摘要；最后比对摘要是否一致。 CA是第三方权威机构，CA公钥是公开的，因此不可能伪造。 @example : https 工作流程，基本分为三个阶段：1、认证服务器。浏览器内置一个受信任的CA机构列表，并保存了这些CA机构的证书。第一阶段服务器会提供经CA机构认证颁发的服务器证书，如果签发该证书的CA，存在于浏览器的受信任CA列表中（也就是签发该证书的CA的根证书，能够与客户端中保存的CA根证书比对上），说明这个CA是可信任的，可以保证证书不假。然后，再进一步判断服务器证书中的信息与当前正在访问的网站（域名等）一致，那么浏览器就认为服务端是可信的，并从服务器证书中取得服务器公钥，用于后续流程。否则，浏览器将提示用户，根据用户的选择，决定是否继续。 客户端是否能够信任这个站点的证书，首先取决于客户端程序是否导入了证书颁发者的根证书。 2、协商会话密钥。客户端在认证完服务器，获得服务器的公钥之后，利用该公钥与服务器进行加密通信，协商出两个会话密钥，分别是用于加密客户端往服务端发送数据的客户端会话密钥，用于加密服务端往客户端发送数据的服务端会话密钥。在已有服务器公钥，可以加密通讯的前提下，还要协商两个对称密钥的原因，是因为非对称加密相对复杂度更高，在数据传输过程中，使用对称加密，可以节省计算资源。另外，会话密钥是随机生成，每次协商都会有不一样的结果，所以安全性也比较高。 3、加密通讯。此时客户端服务器双方都有了本次通讯的会话密钥，之后传输的所有Http数据，都通过会话密钥加密。这样网路上的其它用户，将很难窃取和篡改客户端和服务端之间传输的数据，从而保证了数据的私密性和完整性。 IE浏览器在验证证书的时候主要从下面三个方面考察，只要有任何一个不满足都将给出警告 证书的颁发者是否在“根受信任的证书颁发机构列表”中 证书是否过期 证书的持有者是否和访问的网站一致 数字证书种类： 1、服务器证书：证明服务器的身份和进行通信加密，客户端可以与服务器端建立SSL连接，然后通信数据都会被加密。 2、电子邮件证书：证明电子邮件发件人的真实性，也可发送加密邮件，只有接收方才能打得开。 3、客户端证书：主要用于身份验证和数字签名，安全的客户端证书经常存储的专门的USBKey中，使用的时候需要输入保护密码，以防被导出和复制，如指纹识别、语音播报、带显示器的USBKey等等。 数字证书功能： 1、信息保密 2、身份确认 3、不可否认性 4、数据完整性 数字证书的格式： 最简单的可以是：公钥、名称和证书授权中心的数字签名，目前 X.509 是一种通用的证书格式，它的第三个版本目前使用广泛，证书内容包括：版本、序列号、签名算法标识、签发者、有效期、主体、主体公开密钥、CA的数字签名、可选型等等","categories":[{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/categories/%E5%AE%89%E5%85%A8/"}],"tags":[{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"密码学","slug":"密码学","permalink":"https://aotle.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"}]},{"title":"二分与三分","slug":"二分与三分","date":"2020-09-10T10:10:44.000Z","updated":"2020-09-10T10:52:59.490Z","comments":true,"path":"2020/09/10/二分与三分/","link":"","permalink":"https://aotle.github.io/2020/09/10/%E4%BA%8C%E5%88%86%E4%B8%8E%E4%B8%89%E5%88%86/","excerpt":"这是一篇用二分和三分求方程的根的博客","text":"这是一篇用二分和三分求方程的根的博客 二分法求方程的根如果有函数发f(x)，它在区间[a, b]上递增或者递减，并且f(a)*f(b)&lt;0。那么我们知道函数必然有一个等于0的解，而且这个解我们可以用二分法来求近似解。 然后通过二分法缩小范围，直到区间长度足够小，这时候就说明找到了一个误差不超过区间长度的近似解。 在二分法当中，我们没进行一次二分迭代，区间的长度就会缩减一半，这是一个指数级的缩减。所以即使一开始的区间很大，经过二分迭代也可以迅速缩减，得到一个非常精准的结果，并且和泰勒级数一样，除了能得到一个足够精确的值之外，还能得到误差的范围。（注：函数可以不是严格单调的，二分法只需要满足f(a)*f(b)&lt;0，函数连续并且只有一个零点）。 @example1用二分法求f(x)&#x3D;x*x*x-7.7*x*x+19.2*x-15.3在区间[1,2]之间的根． 123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;stdio.h&gt;#include &lt;math.h&gt;const double eps = 1e-6; //定义我们计算的精度double a,b,c,d; //假定我们输入的函数是一元三次方程组，a*x*x*x+b*x*x+c*x+d=0double f(double x) //定义我们的函数&#123;return a*x*x*x+b*x*x+c*x+d;&#125;int main()&#123; double m,n;//求根区间[m,n] double i,j,sum; printf(\"请输入一元三次方程组的系数：a,b,c,d:\"); scanf(\"%lf%lf%lf%lf\",&amp;a,&amp;b,&amp;c,&amp;d); printf(\"\\n请输入求根区间[m,n]:\"); scanf(\"%lf%lf\",&amp;m,&amp;n); if(f(m)*f(n)&lt;0) &#123; while(fabs(m-n)&gt;eps) &#123; i=(m+n)/2.0; sum=f(i); printf(\"[%lf %lf]\\n\",m,n); if(fabs(sum)&lt;eps) &#123; break; //printf(\"\\n该方程组的近似根为:x2*=%lf\\n\",i); //return 1; &#125; else if(f(i)*f(m)&lt;0) &#123; n=i; //修正区间，将[m,n]换成[m,i],这里的i是中点 &#125; else if(f(i)*f(n)&lt;0) &#123; m=i;//修正区间，将[m,n]换成[i,n],这里的i是中点 &#125; &#125; &#125; printf(\"%lf %lf\",m,n); j=(m+n)/2; printf(\"\\n该方程组的近似根为:x*=%lf\\n\",j);&#125; 三分查找1.概念在二分查找的基础上，在右区间（或左区间）再进行一次二分，这样的查找算法称为三分查找，也就是三分法。 三分查找通常用来迅速确定最值。 二分查找所面向的搜索序列的要求是：具有单调性（不一定严格单调）；没有单调性的序列不是使用二分查找。与二分查找不同的是，三分法所面向的搜索序列的要求是：序列为一个凸性函数。通俗来讲，就是该序列必须有一个最大值（或最小值），在最大值（最小值）的左侧序列，必须满足不严格单调递增（递减），右侧序列必须满足不严格单调递减（递增）。如下图，表示一个有最大值的凸性函数： 2.算法思路（1）与二分法类似，先取整个区间的中间值mid。 1mid = (left + right) / 2; （2）再取右侧区间的中间值midmid，从而把区间分为三个小区间。 1midmid = (mid + right) / 2; （3）我们mid比midmid更靠近最值，我们就舍弃右区间，否则我们舍弃左区间？。 比较mid与midmid谁最靠近最值，只需要确定mid所在的函数值与midmid所在的函数值的大小。当最值为最大值时，mid与midmid中较大的那个自然更为靠近最值。最值为最小值时同理。 1234if (cal(mid) &gt; cal(midmid)) right = midmid;else left = mid; （4）重复（1）（2）（3）直至找到最值。 算法的正确性： 1、mid与midmid在最值的同一侧。由于凸性函数在最大值（最小值）任意一侧都具有单调性，因此，mid与midmid中，更大（小）的那个数自然更为靠近最值。此时，我们远离最值的那个区间不可能包含最值，因此可以舍弃。 2、mid与midmid在最值的两侧。由于最值在中间的一个区间，因此我们舍弃一个区间后，并不会影响到最值。 @example123456789101112131415161718192021222324const double EPS = 1e-10; double calc(double x)&#123; // f(x) = -(x-3)^2 + 2; return -(x-3.0)*(x-3.0) + 2;&#125; double ternarySearch(double low, double high)&#123; double mid, midmid; while (low + EPS &lt; high) &#123; mid = (low + high) / 2; midmid = (mid + high) / 2; double mid_value = calc(mid); double midmid_value = calc(midmid); if (mid_value &gt; midmid_value) high = midmid; else low = mid; &#125; return low;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"递归方程求解方法","slug":"递归方程求解方法","date":"2020-09-10T09:15:45.000Z","updated":"2020-09-10T09:20:39.386Z","comments":true,"path":"2020/09/10/递归方程求解方法/","link":"","permalink":"https://aotle.github.io/2020/09/10/%E9%80%92%E5%BD%92%E6%96%B9%E7%A8%8B%E6%B1%82%E8%A7%A3%E6%96%B9%E6%B3%95/","excerpt":"这是一篇关于递归方程求解的简单方法","text":"这是一篇关于递归方程求解的简单方法","categories":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"考试","slug":"考试","permalink":"https://aotle.github.io/tags/%E8%80%83%E8%AF%95/"},{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"算法考试复习","slug":"算法考试复习","date":"2020-09-08T10:47:20.000Z","updated":"2020-09-10T12:11:22.186Z","comments":true,"path":"2020/09/08/算法考试复习/","link":"","permalink":"https://aotle.github.io/2020/09/08/%E7%AE%97%E6%B3%95%E8%80%83%E8%AF%95%E5%A4%8D%E4%B9%A0/","excerpt":"这是一篇算法实验课考试复习","text":"这是一篇算法实验课考试复习 递归与分治内部收益率题目描述 输入 输出对于每组数据，输出仅一行，即项目的IRR，四舍五入保留小数点后两位。 样例输入123451-1 22-8 6 90 样例输出121.000.50 代码12345678910111213141516171819202122232425262728293031#include&lt;iostream&gt;#include &lt;iomanip&gt;using namespace std;int main()&#123; int n, f, CF[12]; while (cin&gt;&gt;n &amp;&amp; n != 0) &#123; cin &gt;&gt; f; double mid, high = 10000, low = -1, r, k, sum; for (int i = 0; i &lt; n; i++) cin &gt;&gt; CF[i]; while (high - low &gt; 1.0e-6) &#123; mid = (high + low) / 2; k = 1; sum = 0; for (int j = 0; j &lt; n; j++) &#123; k *= (1.0 / (1 + mid)); sum += CF[j] * k; &#125; if (sum + f &gt; 0) low = mid; else high = mid; &#125; cout &lt;&lt; fixed &lt;&lt; setprecision(2) &lt;&lt; mid &lt;&lt; endl; &#125; return 0;&#125; 问题 J: 奶牛的聚会题目描述农历新年马上就要到了，奶牛们计划举办一次聚会庆祝新年的到来。但是，奶牛们并不喜欢走太远的路，这会给他们的聚会带来消极情绪，当一头奶牛的消极指数为Wi，他参加聚会所需行走的距离为si，那么他就会给聚会带来Si3*Wi的消极情绪。所有奶牛所在位置都在一条直线上，已知所有奶牛的坐标和消极指数，求如何确定聚会地点，使得所有奶牛给聚会带来的消极情绪之和最小，输出消极情绪之和的最小值。 输入第一行包含一个整数 Ca(Ca&lt;=20) ，表示有 Ca 组测试数据。 对于每组测试数据：第一行包含一个整数n(1&lt;=n&lt;=50000) ，表示奶牛的数量。接下来 n 行每行包含两个浮点数Si和wi (-106&lt;=Si&lt;=106, 0&lt;Wi&lt;15)。 输出对于每组测试数据，输出 “Case #c: ans” ，其中c表示测试数据编号，ans表示消极情绪之和的最小值，结果四舍五入为一个整数。 样例输入1234567150.9 21.4 43.1 16.2 18.3 2 样例输出1Case #1: 300 思路三分查找法确定消极情绪之和最小的位置，结合注释应该不难理解。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455#include &lt;iostream&gt;#include &lt;math.h&gt;using namespace std;typedef long long ll;const int maxn = 50010;double Si[maxn], wi[maxn];int n, Ca;//计算聚会位置在pos时的消极情绪之和double ans(double pos)&#123; double sum = 0; for (int i = 0; i &lt; n; i++) &#123; //计算每个奶牛距离聚会位置的距离(非负) double dist = Si[i] - pos; if (dist &lt; 0) dist = -dist; sum += pow(dist, 3) * wi[i]; &#125; return sum;&#125;int main()&#123; cin &gt;&gt; Ca; for (int i = 1; i &lt;= Ca; i++) &#123; cin &gt;&gt; n; for (int j = 0; j &lt; n; j++) &#123; cin &gt;&gt; Si[j] &gt;&gt; wi[j]; &#125; //找到坐标位置最小的奶牛 double low = Si[0]; for (int k = 0; k &lt; n; k++) if (Si[k] &lt; low) low = Si[k]; //找到坐标位置最小的奶牛 double high = Si[0]; for (int l = 0; l &lt; n; l++) if (Si[l] &gt; high) high = Si[l]; //三分查找法确定最终位置 while (high - low &gt; 1e-7) &#123; double m1 = (high + low) / 2.0; double m2 = (m1 + high) / 2.0; if (ans(m1) &gt; ans(m2)) low = m1; else high = m2; &#125; cout &lt;&lt; \"Case #\" &lt;&lt; i &lt;&lt; \": \" &lt;&lt; ll(ans(low) + 0.5) &lt;&lt; endl; &#125; return 0;&#125; 问题 E: 光合作用题目描述蒜头是个爱学习的孩子，他总喜欢在生活中做一些小实验，这次蒜头想研究一下光合作用。蒜头的实验材料有如下几样：神奇的种子，普通的纸箱和一些光源。一开始，蒜头将种子均匀的种在了箱子底部，你可以将其看成 X 轴，种子的位置为 X 轴上的点。然后蒜头用纸板将箱子盖住，并在纸板上安装了一些光源（具体见图，顶上的为光源，光源两边与顶部的夹角都为45度，黄色部分为光照，绿色的为植物。）。神奇的种子会在有光的情况下一直向上生长直到没光为止。现在蒜头想知道当实验结束时每颗种子的高度是多少？ 输入第一行输入一个整数 T，表示测试数据的组数。 每组数据的第一行是三个整数 n,m,h(1&lt;=n,m&lt;=1e5,0&lt;=m&lt;=1e5,1&lt;=h&lt;=1e4),n表示种子数(编号为1,2…n)，m表示光源数,h 表示箱子的高度。 接下来m行，每行一个整数Xi表示第i个光源在顶部的位置。 输出对于每组测试数据，请输出n行，每行一个数表示第i颗种子的最终高度。 样例输入1234567827 1 244 4 11234 样例输出123456789101100121001111 思路二分法 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445#include &lt;iostream&gt;#include &lt;cstdio&gt;#include &lt;cstring&gt;#include &lt;algorithm&gt;using namespace std;/*********************************************************************************************lower_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于或等于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。upper_bound( begin,end,num)：从数组的begin位置到end-1位置二分查找第一个大于num的数字，找到返回该数字的地址，不存在则返回end。通过返回的地址减去起始地址begin,得到找到数字在数组中的下标。********************************************************************************************/const int maxn = 1e5 + 5;int x[maxn];int main()&#123; int T; cin &gt;&gt; T; while (T--) &#123; int n, m, h; cin &gt;&gt; n &gt;&gt; m &gt;&gt; h; for (int i = 1; i &lt;= m; i++) &#123; cin &gt;&gt; x[i]; &#125; sort(x + 1, x + m + 1); for (int i = 1; i &lt;= n; i++) &#123; int ans = 0; int cnt = lower_bound(x + 1, x + m + 1, i) - x; if (cnt == 1 &amp;&amp; m != 0) &#123; ans = max(ans, h - x[cnt] + i); &#125; else if (cnt == m + 1 &amp;&amp; m != 0) &#123; ans = max(ans, h - i + x[cnt - 1]); &#125; else if (m != 0) &#123; ans = max(0, max(h - i + x[cnt - 1], h - x[cnt] + i)); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; &#125; return 0;&#125; 动态规划跳台阶题目描述一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法。 输入多组测试样例。每组测试样例包含一个整数n。(1&lt;=n&lt;=100) 输出每组测试样例输出一行，表示青蛙跳上n级台阶的跳法数量. 所得到的结果模1000000007 样例输入1234 样例输出1235 思路可以有多种方法，我这里选用动态规划。 dp[i]表示i阶台阶的跳法有多少种，一次只能跳一阶或两阶。 已知dp[1]=1,dp[2]=2，所以dp[i]=dp[i-1]+dp[i-2]，表示：到达i阶 = （最后一步跳一阶到达i）+ (最后一步跳两阶到达i) 代码12345678910111213141516171819202122232425#include &lt;iostream&gt;using namespace std;typedef long long ll;int dp[105];int climb(int n)&#123; if (n == 1) return 1; dp[1] = 1; dp[2] = 2; for (int i = 3; i &lt;= n; i++) &#123; dp[i] = (dp[i - 1] + dp[i - 2]) % 1000000007; &#125; return dp[n];&#125;int main()&#123; int n; while (cin &gt;&gt; n) &#123; cout &lt;&lt; climb(n) &lt;&lt; endl; &#125; return 0;&#125; 最长公共子序列题目描述给你一个序列X和另一个序列Z，当Z中的所有元素都在X中存在，并且在X中的下标顺序是严格递增的，那么就把Z叫做X的子序列。例如：Z=&lt;a,b,f,c&gt;是序列X=&lt;a,b,c,f,b,c&gt;的一个子序列，Z中的元素在X中的下标序列为&lt;1,2,4,6&gt;。现给你两个序列X和Y，请问它们的最长公共子序列的长度是多少？ 输入输入包含多组测试数据。每组输入占一行，为两个字符串，由若干个空格分隔。每个字符串的长度不超过100。 输出对于每组输入，输出两个字符串的最长公共子序列的长度。 样例输入123abcfbc abfcabprogramming contest abcd mnp 样例输出123420 思路 代码12345678910111213141516171819202122232425262728293031323334#include&lt;iostream&gt;#include&lt;string.h&gt;using namespace std;const int MAXN = 105;int main()&#123; char x[MAXN], y[MAXN]; int c[MAXN][MAXN] = &#123; 0 &#125;; while (cin &gt;&gt; x &gt;&gt; y) &#123; int m = strlen(x); int n = strlen(y); for (int i = 1; i &lt;= m; i++) &#123; for (int j = 1; j &lt;= n; j++) &#123; if (x[i-1] == y[j-1]) &#123; c[i][j] = c[i - 1][j - 1] + 1; &#125; else if (c[i - 1][j] &gt; c[i][j - 1]) &#123; c[i][j] = c[i - 1][j]; &#125; else &#123; c[i][j] = c[i][j - 1]; &#125; &#125; &#125; cout &lt;&lt; c[m][n] &lt;&lt; endl; &#125; return 0;&#125; 矩阵连乘题目描述给定n个矩阵{A1,A2,…,An}，及m个矩阵连乘的表达式，判断每个矩阵连乘表达式是否满足矩阵乘法法则，如果满足，则计算矩阵的最小连乘次数，如果不满足输出“MengMengDa“。 输入输入数据由多组数据组成（不超过10组样例）。每组数据格式如下：第一行是2个整数n (1≤n≤26)和m(1≤m≤3)，表示矩阵的个数。接下来n行，每行有一个大写字母，表示矩阵的名字，后面有两个整数r和c，分别表示该矩阵的行数和列数，其中1&lt;r, c&lt;100。第n+1行到第n+m行，每行是一个矩阵连乘的表达式(2&lt;=矩阵个数&lt;=100)。 输出对于每个矩阵连乘表达式，如果运算不满足矩阵乘法法则的情况（即左矩阵列数与右矩阵的行数不同），则输出“MengMengDa”，否则输出最小矩阵连乘次数。 数据保证结果不超过1e9。 样例输入1234563 2A 10 100B 5 50C 100 5ACBABC 样例输出127500MengMengDa 思路矩阵连乘递归式： 矩阵连乘的部分不是很复杂，一个函数即可完成，主要的代码量集中在数据的输入和转换上。 用结构体Matrix表示矩阵的行和列 再map存储名字和对应的矩阵 将输入的矩阵转换为p数组的同时，判断每相邻的两个矩阵，前一矩阵的行数是否等于后一矩阵的列数，若存在不等的情况，直接输出MengMengda;否则将其列数存入p数组内 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485#include &lt;iostream&gt;#include &lt;map&gt;#include &lt;string&gt;using namespace std;const int maxn = 105;int m[maxn][maxn];//用Matrix表示一个矩阵void MatrixLength(int *p, int n)&#123; //置对角线为0 for (int i = 1; i &lt;= n; i++) m[i][i] = 0; //该循环总共n-1次 for (int r = 2; r &lt;= n; r++) &#123; //n-r+1表示每一斜列的个数，i表示行号 for (int i = 1; i &lt;= n - r + 1; i++) &#123; int j = r - 1 + i; //在第一个矩阵后面加断点 m[i][j] = m[i + 1][j] + p[i - 1] * p[i] * p[j]; for (int k = i + 1; k &lt; j; k++) &#123; //每次将断点的位置向后移位一次，并更新 int t = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j]; if (t &lt; m[i][j]) &#123; m[i][j] = t; &#125; &#125; &#125; &#125; cout &lt;&lt; m[1][n] &lt;&lt; endl;&#125;struct Matrix&#123; int r; int c;&#125;;int main()&#123; int n, l; while(cin&gt;&gt;n&gt;&gt;l) &#123; map&lt;char, Matrix&gt; matrix; while(n--) &#123; char name; int row, col; cin &gt;&gt; name &gt;&gt; row &gt;&gt; col; Matrix temp; temp.r = row; temp.c = col; matrix[name] = temp; &#125; string Multi; int p[105]; while(l--) &#123; cin &gt;&gt; Multi; int len = Multi.length(); int flag = 0; p[0] = matrix[Multi[0]].r; p[1] = matrix[Multi[0]].c; for (int j = 1; j &lt; len;j++) &#123; if(matrix[Multi[j-1]].c!=matrix[Multi[j]].r) &#123; flag = 1; break; &#125; p[j + 1] = matrix[Multi[j]].c; &#125; if(flag==1) cout &lt;&lt; \"MengMengDa\" &lt;&lt; endl; else &#123; MatrixLength(p, len); &#125; &#125; &#125; return 0;&#125; 背包问题题目描述已知有N种物品和一个可容纳C重量的背包。每种物品i的重量为Wi，价值为Pi。那么，采用怎样的装包方法才会使装入背包物品的总价值最大。 输入包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=10)，代表测试数据个数。 接下来有T组测试数据。每组测试数据第一行为背包的重量C(C&lt;10000)和物品个数N(N&lt;1000)。接下来的N行分别为物品的重量cost(1&lt;=cost&lt;=100)和价值val(1&lt;=val&lt;=3000000)。（注意：结果可能超过int范围） 输出对每组测试数据，输出其对应的所装物品的最大价值。 样例输入1234567110 52 62 36 55 44 6 样例输出115 思路m(i,j)表示背包容量为j，可选物品为i,i+1,...,n时的最优解。 这一题不知道为什么用cin\\cout就会报错，用scanf和printf则正确… 代码1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using namespace std;typedef long long ll;const int maxn = 1005;ll m[maxn][maxn];int main()&#123; int t, n; ll c, w[maxn], v[maxn]; scanf(\"%d\", &amp;t); //cin &gt;&gt; t; while (t--) &#123; scanf(\"%lld %d\", &amp;c, &amp;n); //cin &gt;&gt; c &gt;&gt; n; for (int i = 1; i &lt;= n; i++) &#123; scanf(\"%lld %lld\", &amp;w[i], &amp;v[i]); //cin &gt;&gt; w[i] &gt;&gt; v[i]; &#125; int i,j,jMax = min(w[n] - 1, c); for (int j = 0; j &lt;= jMax; j++) m[n][j] = 0; for (int j = w[n]; j &lt;= c; j++) m[n][j] = v[n]; for (int i = n - 1; i &gt; 1; i--) &#123; jMax = min(w[i] - 1, c); for (int j = 0; j &lt;= jMax; j++) m[i][j] = m[i + 1][j]; for (int j = w[i]; j &lt;= c; j++) m[i][j] = max(m[i + 1][j], m[i + 1][j - w[i]] + v[i]); &#125; m[1][c] = m[2][c]; if (c &gt;= w[1]) m[1][c] = max(m[1][c], m[2][c - w[1]] + v[1]); printf(\"%lld\\n\", m[1][c]); //cout &lt;&lt; m[1][c] &lt;&lt; endl; &#125; return 0;&#125; 最大子段和题目描述给定n个整数组成的序列a1,a2,…an, 求子段和ai+ai+1+…+aj（子段可为空集）的最大值。 输入包含多组测试数据。第一行为一个整数T(1&lt;=T&lt;=20)，代表测试数据个数。 每组测试数据第一行为一个整数n，代表有n个整数(1&lt;=n&lt;=10000)。 接下来一行有n个数x(-1000&lt;=x&lt;=1000)。 输出输出其对应的最大子段和。 样例输入123162 -11 4 13 -1 2 样例输出118 提示子段可为空集，答案为0 思路 递归方程如下，b[j]表示1到j的最大字段和： 代码12345678910111213141516171819202122232425262728#include&lt;bits/stdc++.h&gt;using namespace std;const int maxn = 100005;int a[maxn],b[maxn];int main()&#123; int t, n; cin &gt;&gt; t; while(t--) &#123; cin &gt;&gt; n; int sum = 0; for (int i = 1; i &lt;= n;i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 1; i &lt;= n;i++) &#123; if(b[i-1]&gt;0) b[i] = b[i - 1] + a[i]; else b[i] = a[i]; sum = max(sum, b[i]); &#125; cout &lt;&lt; sum &lt;&lt; endl; &#125; return 0;&#125; 节食的限制题目描述Bessie像她的诸多姊妹一样，因為从Farmer John的草地吃了太多美味的草而长出了太多的赘肉。所以FJ将她置於一个及其严格的节食计划之中。她每天不能吃多过H(5&lt;=H&lt;=45000)公斤的乾草。Bessie只能吃一整綑乾草；当她开始吃一綑乾草的之后就再也停不下来了。她有一个完整的N(1&lt;=n&lt;=50)綑可以给她当作晚餐的乾草的清单。她自然想要尽量吃到更多的乾草。很自然地，每綑乾草只能被吃一次（即使在列表中相同的重量可能出现2次，但是这表示的是两綑乾草，其中每綑乾草最多只能被吃掉一次）。 给定一个列表表示每綑乾草的重量Si(1&lt;=Si&lt;=H),求Bessie不超过节食的限制的前提下可以吃掉多少乾草（注意一旦她开始吃一綑乾草就会把那一綑乾草全部吃完）。 输入第一行：两个由空格隔开的整数：H和N， 第2到N+1行：第i+1行是一个单独的整数，表示第i綑乾草的重量Si。 输出一个单独的整数表示Bessie在限制范围内最多可以吃多少公斤的乾草。 样例输入1234556 415192021 样例输出156 思路重量和价值相等的0-1背包问题。 代码12345678910111213141516171819202122232425262728293031#include &lt;bits/stdc++.h&gt;using namespace std;int dp[55][45005];int w[55];int main()&#123; int c, n; cin &gt;&gt; c &gt;&gt; n; for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; w[i]; &#125; int jMax = min(w[n] - 1, c); for (int j = 0; j &lt;= jMax; j++) dp[n][j] = 0; for (int j = w[n]; j &lt;= c; j++) dp[n][j] = w[n]; for (int i = n - 1; i &gt; 1; i--) &#123; jMax = min(w[i] - 1, c); for (int j = 0; j &lt;= jMax; j++) dp[i][j] = dp[i + 1][j]; for (int j = w[i]; j &lt;= c; j++) dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - w[i]] + w[i]); &#125; dp[1][c] = dp[2][c]; if (c &gt;= dp[1][c]) dp[1][c] = max(dp[1][c], dp[2][c - w[1]] + w[1]); cout &lt;&lt; dp[1][c] &lt;&lt; endl; return 0;&#125; 汽车费用题目描述一个特别的单行街道在每公里处有一个汽车站。顾客根据他们乘坐汽车的公里使来付费。例如下表就是一个费用的单子。没有一辆车子行驶超过10公里，一个顾客打算行驶n公里(1&lt;=n&lt;100)，它可以通过无限次的换车来完成旅程。最后要求费用最少。 输入第一行十个整数分别表示行走1到10公里的费用(&lt;=500)。注意这些数并无实际的经济意义，即行驶10公里费用可能比行驶一公里少。第二行一个整数n表示，旅客的总路程数。 输出仅一个整数表示最少费用。 样例输入1212 21 31 40 49 58 69 79 90 10115 样例输出1147 思路动态规划，依次计算出行走i公里需要的最少费用。 计算行走i公里最少费用时，用j遍历[1~i-1]，依次比较price[i]和price[j]+price[i-j]的值，遍历完成后，price[i]为最少费用。 例如，price[4] = min(price[4], price[1]+price[3], price[2]+price[2], price[3]+price[1]) 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;using namespace std;int price[105];int dist;const int inf = 0x3f3f3f3f;int main()&#123; for (int i = 1; i &lt;= 10; i++) &#123; cin &gt;&gt; price[i]; &#125; cin &gt;&gt; dist; for (int i = 11; i &lt;= dist; i++) &#123; price[i] = inf; &#125; for (int i = 1; i &lt;= dist; i++) &#123; for (int j = 1; j &lt; i; j++) &#123; price[i] = min(price[i], price[j] + price[i - j]); &#125; &#125; cout &lt;&lt; price[dist] &lt;&lt; endl; return 0;&#125; 求数组的最长递减子序列题目描述给定一个整数序列，输出它的最长递减（注意不是“不递增”）子序列。 输入输入包括两行，第一行包括一个正整数N（N&lt;=1000），表示输入的整数序列的长度。第二行包括用空格分隔开的N个整数，整数范围区间为[-30000,30000]。 输出输出最长递减子序列，数字之间有一个空格。 样例输入1289 4 3 2 5 4 3 2 样例输出19 5 4 3 2 思路dp[i]存储[i~n]区间的最长递减子序列，双重循环从后向前遍历，内层循环从[i+1~n]，找出最大值小于i的最长递减子序列的长度；外层循环从[n-2~0]，将内层循环找到的最大值加一，更新所有的dp[i]。 输出最优解时，因为刚才是从后向前遍历的,所以所有最大递增子序列均在maxpos之后。遍历[maxpos~n]，寻找最大递减子序列的下一元素时，只需要判断其值是否小于上一元素且它的最大递减子序列是否比上一元素的小1，即可。 解答123456789101112131415161718192021222324252627282930313233343536373839404142434445464748#include &lt;iostream&gt;using namespace std;const int maxn = 1005;int a[maxn];//dp[i]存储[i~end]区间的最长递减子序列int dp[maxn];int main()&#123; int n, maxval = 1, maxpos = 0; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; a[i]; dp[i] = 1; &#125; for (int i = n - 2; i &gt;= 0; i--) &#123; int max = 0; //保存从[i+1~end]区间内的最长递减子序列 for (int j = i + 1; j &lt; n; j++) &#123; //找出[i+1~end]区间中最大值比i小的最长递减子序列 if (a[i] &gt; a[j]) &#123; max = dp[j] &gt; max ? dp[j] : max; &#125; &#125; //i的最长递减子序列=[i+1~end]区间的最长递减子序列+1 dp[i] = max + 1; if (dp[i] &gt; maxval) &#123; //存储最优值 maxval = dp[i]; //存储最优值的位置 maxpos = i; &#125; &#125; cout &lt;&lt; a[maxpos] &lt;&lt; \" \"; //从后向前遍历的,因此所有最大递增子序列均在maxpos之后 for (int i = maxpos + 1; i &lt; n; i++) &#123; if (dp[maxpos] == dp[i] + 1 &amp;&amp; a[maxpos] &gt; a[i]) &#123; cout &lt;&lt; a[i] &lt;&lt; \" \"; maxpos = i; &#125; &#125; return 0;&#125; 贪心算法问题 B: 哈夫曼编码题目描述给定一只含有小写字母的字符串；输出其哈夫曼编码的长度 输入第一行一个整数T，代表样例的个数，接下来T行，每行一个字符串，0&lt;T&lt;=2000,字符串长度0&lt;L&lt;=1500. 输出对于每个字符串，输出其哈夫曼编码长度 样例输入12343hrvshlcxeasexdphiopdmntflolfbtbpplahqolqykrqdnwdoq 样例输出1231051115 思路哈夫曼编码的思路不难，主要讲一下优先级队列的使用。 在STL里有这个priority_queue，实现优先队列的结构，在优先队列中，优先级高的元素先出队列。 模板声明(3个参数)：priority_queue&lt;Type, Container, Functional&gt; Type 为数据类型 Container 为保存数据的容器， 必须是用数组实现的容器，比如 vector、 deque 但不能用 list。默认用的是 vector Functional 为元素比较方式，默认用 operator&lt; , 即队头元素最大。 所以如果后面俩个参数缺省的话，优先队列就是大顶堆，队头元素最大。 如果要用到小顶堆，则一般要把模板的三个参数都带进去。STL里面定义了一个仿函数 greater&lt;&gt;，对于基本类型可以用这个仿函数声明小顶堆priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt; &gt;q;，即队头元素最小。对于自定义类型，则必须自己重载 operator&lt; 或者自己写比较函数。 优先级队列的几个操作： empty() 如果优先队列为空，则返回真 pop() 删除第一个元素 push() 插入一个元素 size() 返回优先队列中拥有的元素的个数 top() 返回优先队列中有最高优先级的元素 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt; #include&lt;queue&gt;#include&lt;string.h&gt; using namespace std;int main() &#123; int T; cin &gt;&gt; T; while (T--) &#123; char s[1505]; //存放每个字母的频率 int n[26] = &#123;0&#125;; cin &gt;&gt; s; for (int i = 0; i &lt; strlen(s); i++) &#123; n[s[i] - 'a']++; &#125; //建立一个优先级队列 priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; q; for (int i = 0; i &lt; 26; i++) &#123; if (n[i] &gt; 0) q.push(n[i]); &#125; int sum = 0; //不断更新优先级队列 while (q.size() &gt;= 2) &#123; int a = q.top(); q.pop(); int b = q.top(); q.pop(); int temp = a + b; q.push(temp); sum += temp; &#125; cout &lt;&lt; sum &lt;&lt; endl; &#125; return 0; &#125; 问题 D: Homework题目描述临近开学了，大家都忙着收拾行李准 备返校，但 I_Love_C 却不为此担心! 因为他的心思全在暑假作业上：目前为止还未开动。 暑假作业是很多张试卷，我们这些从试卷里爬出来的人都知道，卷子上的题目有选择题、填空题、简答题、证明题等。而做选择题的好处就在于工作量很少，但又因为选择题题目都普遍很长。如果有 5 张试卷，其中 4 张是选择题，最后一张是填空题，很明显做最后一张所花的时间要比前 4 张长很多。但如果你只做了选择题，虽然工作量很少，但表面上看起来也已经做了4/5的作业了。 I_Love_C决定就用这样的方法来蒙混过关，他统计出了做完每一张试卷所需的时间以及它做完后能得到的价值（按上面的原理，选择题越多价值当然就越高咯）。 现在就请你帮他安排一下，用他仅剩的一点时间来做最有价值的作业。 输入测试数据包括多组。每组测试数据以两个整数 M,N(1&lt;M&lt;20,1&lt;N&lt;10000) 开头，分别表示试卷的数目和 I_Love_C 剩下的时间。接下来有 M 行，每行包括两个整数 T,V(1&lt;T&lt;N,1&lt;V&lt;10000)分别表示做完这张试卷所需的时间以及做完后能得到的价值，输入以 0 0 结束。 输出对应每组测试数据输出 I_Love_C 能获得的最大价值。保留小数点 2 位 提示：float 的精度可能不够，你应该使用 double 类型。 样例输入1234564 204 105 2210 31 20 0 样例输出137.00 思路0-1背包类的贪心算法，计算物品性价比，按性价比从大到小排序，优先装入性价比大的，直到容量满为止。 解答12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;iomanip&gt;using namespace std;const int maxn = 25;struct paper&#123; double t, v; double cost; //性价比&#125; paper[maxn];bool cmp(struct paper a, struct paper b)&#123; return a.cost &gt; b.cost;&#125;int main()&#123; int n, c; while (cin &gt;&gt; n &gt;&gt; c) &#123; if (n == 0 &amp;&amp; c == 0) break; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; paper[i].t &gt;&gt; paper[i].v; //计算每张试卷的性价比 paper[i].cost = paper[i].v / paper[i].t; &#125; //按性价比排序 sort(paper, paper + n, cmp); double max = 0, time = c; for (int i = 0; i &lt; n; i++) &#123; if (paper[i].t &lt;= time) &#123; max += paper[i].v; time -= paper[i].t; &#125; else &#123; //得到部分价值(时间*性价比) max += time * paper[i].cost; break; &#125; &#125; //printf(\"%.2f\\n\", max); cout &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(2) &lt;&lt; max &lt;&lt; endl; &#125; return 0;&#125; 回溯图的m着色问题题目描述给定无向连通图G和m种不同的颜色，用这些颜色给图的各个顶点着一种颜色，若某种方案使得图中每条边的2个顶点的颜色都不相同，则是一个满足的方案，找出所有的方案。 输入第一行有3个正整数n，k和m，分别表示n个顶点，k条边，m种颜色接下来k行，每行2个正整数，表示一条边的两个顶点 输出所有不同的着色方案数 样例输入1234567895 8 4 1 21 3 1 42 32 42 53 44 5 样例输出148 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#include &lt;iostream&gt;using namespace std;const int maxn = 2e3 + 5;//n个顶点，k条边，m种颜色int n, k, m, res = 0;int map[maxn][maxn];int color[maxn];void dfs(int d)&#123; if (d == n + 1) &#123; res++; return; &#125; //m种颜色 for (int i = 1; i &lt;= m; i++) &#123; int flag = 1; //深度优先,若相邻且有子节点同样上了i颜色,则剪去 for (int j = 1; j &lt;= n; j++) &#123; if (map[d][j] == 1 &amp;&amp; color[j] == i) &#123; flag = 0; break; &#125; &#125; if (flag == 1) //可行 &#123; color[d] = i; //上色 dfs(d + 1); //递归下一节点 color[d] = 0; //恢复颜色 &#125; &#125;&#125;int main()&#123; cin &gt;&gt; n &gt;&gt; k &gt;&gt; m; for (int i = 0; i &lt; k; i++) &#123; int tmp1, tmp2; cin &gt;&gt; tmp1 &gt;&gt; tmp2; map[tmp1][tmp2] = 1; map[tmp2][tmp1] = 1; &#125; dfs(1); cout &lt;&lt; res &lt;&lt; endl; return 0;&#125; 部分和问题题目描述给定n个整数，判断是否可以从中选择若干数字，使得他们的和恰好为k。 输入多组测试用例。 对于每组测试用例，第一行一个正整数n，第二行n个整数，第三行一个整数k。 1≤N≤20，输入整数及k均小于1e8。 输出若可以使得和为k，输出”Yes”,否则”No”。 样例输入12341 2 4 713 样例输出1Yes 思路每个数有加或不加两种可能，可以构造一棵二叉树，深度优先遍历，终止调节为和达到要求（返回true），遍历完全（返回false）。 代码1234567891011121314151617181920212223242526#include &lt;iostream&gt;using namespace std;const int maxn = 25;int n, k, d[maxn];bool dfs(int l, int sum)&#123; if (sum == k) return true; if (l == n) return false; return dfs(l + 1, sum) || dfs(l + 1, sum + d[l]);&#125;int main()&#123; while (cin &gt;&gt; n) &#123; for (int i = 0; i &lt; n; i++) cin &gt;&gt; d[i]; cin &gt;&gt; k; if (dfs(0, 0)) cout &lt;&lt; \"Yes\" &lt;&lt; endl; else cout &lt;&lt; \"No\" &lt;&lt; endl; &#125; return 0;&#125; 其他法师康的工人题目描述三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。 你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。 ·最长的至少有一个工人在工作的时间段 ·最长的无人工作的时间段（从有人工作开始计） 输入输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。 输出输出为一行，用空格分隔开两个我们所求的数。 样例输入12343200 1000700 11001500 2100 样例输出1900 400 思路 先按开始时间排序，然后对每个人进行遍历。 如果前人的结束时间小于后人的开始时间，那么中间这段连续时间是没有人的，则更新最长的无人工作的时间。 如果前人的结束时间大于后人的开始时间，就比较两者结束的时间，从前人开始时间到两者间更晚结束的时间内都至少有一个人在，因此更新最长的至少有一个工人在工作的时间。 不断更新直到最后一个人。 12345678910111213141516171819202122232425262728293031323334353637383940#include &lt;bits/stdc++.h&gt; using namespace std; const int maxn = 5005; int b[maxn], e[maxn]; struct data &#123; int s, e; &#125; worker[maxn]; bool cmp(struct data a, struct data b) &#123; return a.s &lt; b.s; &#125; int main() &#123; int n, sb, nb; cin &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; worker[i].s &gt;&gt; worker[i].e; &#125; sort(worker, worker + n, cmp); sb = worker[0].e - worker[0].s; nb = 0; int j = 0; for (int i = 1; i &lt; n; i++) &#123; if (worker[i].s &lt;= worker[j].e) &#123; worker[j].e = max(worker[i].e, worker[j].e); sb = max(sb, worker[j].e - worker[j].s); &#125; else &#123; nb = max(nb, worker[i].s - worker[j].e); j = i; &#125; &#125; cout &lt;&lt; sb &lt;&lt; \" \" &lt;&lt; nb &lt;&lt; endl; return 0; &#125; 配对元素题目描述给出2个序列A={a[1]，a[2]，…，a[n]}，B={b[1]，b[2]，…，b[n]}，从A、B中各选出n个元素进行一一配对（可以不按照原来在序列中的顺序），并使得所有配对元素差的绝对值之和最大。 输入输入的第1行为1个整数n 第2行包含n个整数，题目中的A序列。 第3行包含n个整数，题目中的B序列。 输出一个数，最大配对 3与6配对，2与7配对，5与4配对，6与1配对，绝对值之差和为14 对于10%的数据，有n≤20； 对于30%的数据，有n≤100； 对于50%的数据，有n≤1000； 对于100%的数据，有n≤10000；a[i]，b[i]≤1000。 样例输入12342 5 6 31 4 6 7 样例输出114 思路将两个数组分别进行升序和降序排列，然后让一个数组的最大值与另一个数组的最小值相减，依次类推，然后累和即可。 解答123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 10005;int a[maxn], b[maxn];int n, sum;bool cmp(int a, int b)&#123; return a &gt; b;&#125;int main()&#123; cin &gt;&gt; n; for (int i = 0; i &lt; n;i++) &#123; cin &gt;&gt; a[i]; &#125; for (int i = 0; i &lt; n;i++) &#123; cin &gt;&gt; b[i]; &#125; sort(a, a + n); sort(b, b + n, cmp); for (int i = 0; i &lt; n;i++) &#123; int temp = abs(b[i] - a[i]); sum += temp; &#125; cout &lt;&lt; sum &lt;&lt; endl; return 0;&#125; 判断日期是否符合格式题目描述我们知道一年有12个月，每个月最多有31天，年有平年和闰年之分，本题目要求如果输入一个日期，程序需要判断用户输入的日期是否正确。 提示：测试输入的三个数字中，年份是正数，月份和日期有可能是负数，程序需要对这两个数为负数的情况进行判断。 输入多组测试用例，对每组测试用例： 用户输入是三个数字，分别表示年，月和日。 例如 2007 10 21 ，表示2007年10月21日，这个输入经过判断是正确的。又例如输入 1993 11 38 ，这个输入经过判断是错误的，因为日期不能超过31天。 输出程序的输出分为两种，1或者0。1表示输入正确，0表示输入错误。 样例输入12011 21 10 样例输出10 思路闰年判断：（能被4整除&amp;&amp;不能被100整除）||能被400整除其他没啥好说的，开一个大小为12的数组month[12]，存每个月的天数，如果是闰年的话就将month[1]加1 解答123456789101112131415161718192021222324#include &lt;bits/stdc++.h&gt;using namespace std;bool Judge(int year)&#123; if ((year % 4 == 0 &amp;&amp; year % 100 != 0) || year % 400 == 0) return true; else return false;&#125;int main()&#123; int y, m, d; while (cin &gt;&gt; y &gt;&gt; m &gt;&gt; d) &#123; int month[12] = &#123;31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31&#125;; int flag = 0; if (Judge(y)) month[1]++; if (m &gt; 0 &amp;&amp; m &lt;= 12 &amp;&amp; d &gt; 0 &amp;&amp; d &lt;= month[m - 1]) flag = 1; cout &lt;&lt; flag &lt;&lt; endl; &#125; return 0;&#125; 进制转换题目描述输入一个十进制正整数，然后输出它所对应的八进制数。 输入输入一个十进制正整数n(1≤n≤106) 。 输出输出n对应的八进制数，输出在一行。 样例输入110 样例输出112 代码1234567891011121314151617181920#include &lt;iostream&gt;using namespace std;int main()&#123; int x, count = 0; int r[100000]; cin &gt;&gt; x; while (x != 0) &#123; r[count++] = x % 8; x = x / 8; &#125; //倒序输出 for (int i = count - 1; i &gt;= 0; i--) &#123; cout &lt;&lt; r[i]; &#125; cout &lt;&lt; endl; return 0;&#125; 16级考试题目问题 A: 星空梦想——鲁班题目描述鲁班七号是王者峡谷里的射手，站撸英雄。战场上的鲁班七号，机制强大的鲨嘴炮，立刻将挡在前路的任何物体轰飞。正如他所说的，“借你们的肉体试验下新发明的威力”。是的，这就是鲁班大师和他的天才机关造物鲁班七号。然而，鲁班最为致命的缺点是腿短，跑得慢，一个稍不留神，便会被刺客所击杀。 既然腿短，那么就来多多运动吧，跳跳台阶可还行？假设鲁班七号一次可以跳上1级台阶，但极限一次只能跳上2级台阶（腿短没办法，嘤嘤嘤）。鲁班七号现在从0级阶梯开始，最终跳上第n级的台阶，求总共有多少种跳法？ 输入多组测试用例。 第一行输入包含一个整数T（1&lt;=T&lt;=50），代表测试用例个数。 接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=50），代表鲁班最终跳上了第n级台阶。 输出每组测试用例对应一行输出，每行输出一个整数ans，代表鲁班最终跳上第n级台阶的跳法种数。 样例输入123433450 样例输出1233520365011074 提示注意结果超过int范围，请用long long类型存储ans 思路思路一：递归法+打表 思路二：动态规划 用dp[i]表示跳到第i级台阶的方法数，则dp[1]=1、dp[2]=2 … dp[i]=dp[i-1]+dp[i-2]，即到第i级台阶的最后一步可以选择跳1级，也可以选择跳2级，而这两种方法的结果我们已经由动态规划得到，直接相加即可。 代码123456789101112131415161718192021#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 55;ll dp[maxn];int main()&#123; int t, n; cin &gt;&gt; t; while (cin &gt;&gt; n) &#123; dp[1] = 1; dp[2] = 2; for (int i = 3; i &lt;= n;i++) &#123; dp[i] = dp[i - 1] + dp[i - 2]; &#125; cout &lt;&lt; dp[n] &lt;&lt; endl; &#125; return 0;&#125; 问题 B: 午夜歌剧——元歌题目描述元歌是王者峡谷里的刺客。何谓至高机关之美呢？唯有以至高权力的手令太古奇迹重现人世，方能称得上啊。 是的，元歌擅长操控，所做傀儡能起到以假乱真的作用，今天元歌的傀儡变成你的初中数学老师，给你出个数学题：给你一个数字x，让你求出k7、k6、k5、k4、k3、k2、k1、k0（0&lt;=ki&lt;=9），使得以下等式1成立，最后根据等式2求出最终ans值。 等式1： 等式2： 输入多组测试用例。 第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。 接下来T行，每一行包含一个整数x（1&lt;=x&lt;=1500000）。 输出每组测试用例对应一行输出，每行输出一个整数ans，代表最终运算结果。 样例输入1234371433223193224 样例输出12310151163311433223 提示测试数据均大于等于1，不用特判0 思路其实就是10进制转7进制 代码123456789101112131415161718192021222324252627282930#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1e8;void convert(int n)&#123; int c, r; r = n % 7; c = n / 7; if (c &gt; 0) &#123; convert(c); cout &lt;&lt; r; &#125; else &#123; cout &lt;&lt; n; &#125;&#125;int main()&#123; int t, n; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; n; convert(n); cout &lt;&lt; endl; &#125; return 0;&#125; 问题 C:圣诞恋歌——貂蝉题目描述貂蝉是王者峡谷里的法师/刺客，貂蝉打法一定要注意配合技能与被动。半肉出装加上蛇皮走位，往往可以1打5，轻松拿下5杀。语花印被动描述为：技能命中会为敌人叠加花之印记，叠加满4层后印记触发被动，会给自身回复生命，同时会对周围敌人造成真实伤害并减速。我们现在对貂蝉的技能及被动进行简化如下：每使用1次技能会攻击1次目标，每攻击3次目标，会自动额外攻击1次目标。现在，貂蝉在游戏中使用了n次技能，请问总共会给目标带来多少次攻击。 输入多组测试数据，第一行输入包含一个整数T，代表测试样例个数。接下来T行，每行输入包含一个整数n（1&lt;=n&lt;=100），代表貂蝉使用了n次技能。 输出每组测试用例对应一行输出，每行输出一个整数ans，代表貂蝉对目标进行了ans次攻击。 样例输入123456761234581 样例输出12345612457121 提示没思路，喝瓶汽水冷静下？ 思路每次攻击ans++，攻击次数n--，count来记录攻击的次数，每攻击3次（count==3），则攻击次数加1（白送一次），同时将count清0，知道所剩攻击次数为0，停止。 代码1234567891011121314151617181920212223242526#include &lt;bits/stdc++.h&gt;using namespace std;int main()&#123; int t, n; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; n; int ans = 0, count = 0; while (n != 0) &#123; count++; //每3次攻击,就多一次攻击 if (count == 3) &#123; n++; count = 0; &#125; ans += 1; n--; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 问题 D: 海之征途——孙策题目描述孙策是王者峡谷里的坦克/战士。大船靠岸，江郡欢呼着迎来了他们的新领袖，人称江东小霸王的年轻人。游戏中，孙策的技能长帆破浪，可以驾船冲锋，可将船撞向敌方单位或者阻挡物，并造成一定的伤害。 现在，有一群好奇的江郡小朋友想跟着孙策一起出海航行，但孙策的船承载不了所有小朋友，所以孙策决定，尽可能带更多的小朋友出海，现在请你帮孙策谋一个策略，使得更多的小朋友有机会出海航行。已知的条件是孙策船的最大载重m，以及n个小朋友的体重。 输入多组测试用例。第一行输入包含一个整数T（1&lt;=T&lt;=1000），代表测试用例个数。 每组测试用例第一行有两个整数m和n。（0&lt;=m&lt;=1000， 0&lt;=n&lt;=1000），分别代表船的载重重量和小朋友的个数，接下来一行为n个小朋友的体重。 输出每组测试用例对应一行输出，每行输出一个整数ans，代表最多能有ans个小朋友跟着一起出海。 样例输入12345210 43 5 2 420 93 5 2 4 6 1 8 5 9 样例输出1236 提示1.小朋友的体重可能相同 2.船可以满载 思路贪心算法，先对小朋友按体重升序排列，然后体重小的优先上船，直到容量满为止。 代码1234567891011121314151617181920212223242526272829#include &lt;bits/stdc++.h&gt;using namespace std;const int maxn = 1005;int t, m, n;int w[maxn];int main()&#123; cin &gt;&gt; t; while (t--) &#123; cin &gt;&gt; m &gt;&gt; n; for (int i = 0; i &lt; n; i++) &#123; cin &gt;&gt; w[i]; &#125; sort(w, w + n); int ans = 0, c = m; for (int i = 0; i &lt; n; i++) &#123; if (w[i] &lt;= c) &#123; ans++; c -= w[i]; &#125; &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125; 问题 E: 极冰防御——盾山题目描述盾山是王者峡谷里的辅助，一夫当关、万夫莫开，一个好的辅助往往可以给团队带来极大帮助。 盾山的游戏中的一个技能为不动如山：手握一块由石头组成的巨盾，张开巨盾砸向地面，将敌人推开，并持续一段时间。 假设盾山最多只能承受C重量的盾牌，而现在有N个小石头，每个石头i的重量为Wi，防御值为Pi。那么，呆萌的盾山想知道，他从N个小石头中挑选M个（M&lt;=N）组成他可承受盾牌，最大的防御值是多少？ 输入多组测试用例。第一行输入包含一个整数T（1&lt;=T&lt;=10），代表测试用例个数。 接下来有T组测试用例。每组测试用例第一行为盾山承受盾牌的最大重量C(C&lt;10000)和小石头的个数N(N&lt;1000)。接下来的N行分别为小石头的重量Wi(1&lt;=Wi&lt;=100)和防御值Pi(1&lt;=Pi&lt;=3000000)。 输出每组测试用例对应一行输出，每行输出一个整数ans，代表可承受盾牌的最大防御值。 样例输入1234567110 52 62 36 55 44 6 样例输出115 提示结果可能超过int范围，请使用long long类型变量 思路说了这么多，其实就是经典的01背包问题。 之前有一道01背包用cin/cout过不了，只能用scanf/printf，所以到时候看情况吧.. 代码123456789101112131415161718192021222324252627282930313233343536373839404142#include &lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;const int maxn = 10005;ll dp[maxn][maxn];ll w[maxn], p[maxn];ll c, n;int main()&#123; int t; cin &gt;&gt; t; //scanf(\"%d\", &amp;t); while (t--) &#123; cin &gt;&gt; c &gt;&gt; n; //scanf(\"%lld %lld\", &amp;c, &amp;n); for (int i = 1; i &lt;= n; i++) &#123; cin &gt;&gt; w[i] &gt;&gt; p[i]; //scanf(\"%lld %lld\", &amp;w[i], &amp;p[i]); &#125; ll jMax = min(w[n] - 1, c); for (int j = 0; j &lt;= jMax; j++) dp[n][j] = 0; for (int j = w[n]; j &lt;= c; j++) dp[n][j] = p[n]; for (int i = n - 1; i &gt; 0; i--) &#123; jMax = min(w[i] - 1, c); for (int j = 0; j &lt;= jMax; j++) dp[i][j] = dp[i + 1][j]; for (int j = w[i]; j &lt;= c; j++) dp[i][j] = max(dp[i + 1][j], dp[i + 1][j - w[i]] + p[i]); &#125; dp[1][c] = dp[2][c]; if (c &gt; w[1]) dp[1][c] = max(dp[2][c], dp[2][c - w[1]] + p[1]); cout &lt;&lt; dp[1][c] &lt;&lt; endl; //printf(\"%lld\\n\", dp[1][c]); &#125; return 0;&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"考试","slug":"考试","permalink":"https://aotle.github.io/tags/%E8%80%83%E8%AF%95/"},{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"PHP快速入门","slug":"PHP快速入门","date":"2020-09-07T09:33:31.000Z","updated":"2020-09-07T11:20:58.134Z","comments":true,"path":"2020/09/07/PHP快速入门/","link":"","permalink":"https://aotle.github.io/2020/09/07/PHP%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/","excerpt":"这是一篇PHP快速入门的总结","text":"这是一篇PHP快速入门的总结 hello，world1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?phpecho &quot;Hello World!&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; PHP 脚本可放置于文档中的任何位置 PHP 脚本以 &lt;?php 开头，以 ?&gt; 结尾，文件后缀名.php 语句以分号结尾 ; 注释：# 单行注释，// 单行注释，/* 多行注释 */ 变量名对大小写敏感：$color 和 $Color 是不同的变量 用户定义的函数、类和关键字（例如 if、else、echo 等等）都对大小写不敏感：Echo &quot;Ok&quot; 和 echo &quot;Ok&quot; 是一样的效果 输出内容到网页上用 echo var_dump()：会返回变量的数据类型和值，调试的时候很有用: var_dump(“text”): string(4) &quot;text&quot;; print_r：Prints human-readable information about a variable PHP变量规则： 变量以 $ 符号开头，其后是变量的名称 变量名称必须以字母或下划线开头 变量名称不能以数字开头 变量名称只能包含字母数字字符和下划线（A-z、0-9 以及 _） 变量名称对大小写敏感（$y 与 $Y 是两个不同的变量） 创建变量 创建变量的时候不指定变量的类型 变量没有类型 PHP 自动的根据变量的值转换为正确的数据类型 变量会在首次赋值时被创建 123&lt;?php$x &#x3D; 10; &#x2F;&#x2F; 这样就创建好了一个变量?&gt; 创建常量 使用define()函数创建常量 它使用三个参数 首个参数定义常量的名称 第二个参数定义常量的值 可选的第三个参数规定常量是否对大小写敏感，默认是false（大小写敏感） 1234&lt;?phpdefine(\"TIME_ZONE\", \"Beijin\");echo TIME_ZONE; // Beijin?&gt; 变量的作用域 global：函数之外声明的变量拥有 global 作用域，只能在函数以外进行访问 local ：函数内部声明的变量拥有 local 作用域，只能在函数内部进行访问 static：变量在函数执行完后不会被删除，就像 C 语言中用 static $GLOBALS[index] 的数组中存储了所有的全局变量，下标为变量名 1234567891011121314151617181920212223242526272829303132&lt;?php$x = 10; // 全局变量$y = 20; // 全局变量function foo() &#123; // 函数定义 global $x; // 函数内访问全局变量需要在全局变量前加 global 关键字 $z = 30; // 局部变量 // 输出：[x: 10, y: , z: 30]，函数内不能访问全局变量 echo \"[x: $x, y: $y, z: $z]&lt;br&gt;\"; // 用 GLOBAL 数组访问全局变量 echo \"x: &#123;$GLOBALS['x']&#125; &lt;br&gt;\";&#125;foo(); // 执行函数// 输出：[x: 10, y: 20, z: ]，函数外不能访问局部变量echo \"[x: $x, y: $y, z: $z]&lt;br&gt;\"; /////////////////////////////////////////////////////////////////////////function bar() &#123; static $x = 0; echo \"static: $x &lt;br&gt;\"; $x++;&#125;bar(); // static: 0 bar(); // static: 1bar(); // static: 2?&gt; 运算符+ - * / %&gt; &lt; &gt;= &lt;= != == === || &amp;&amp;前置++ 后置++ 前置-- 后置--. .= 用于字符串连接 比较特别的是 ==(值相同就认为相等) ===(值相同，并且类型也要相同) 12345678910111213141516171819202122&lt;?php$x = 10;$y = \"10\";var_dump($x); // int(10)echo \"&lt;br&gt;\";var_dump($y); // string(2) \"10\"echo \"&lt;br&gt;\";echo $x == $y; // 1echo \"&lt;br&gt;\";echo $x === $y; // false 输出是空字符串echo \"&lt;br&gt;\";echo ($x === $y) == false; // 1echo \"&lt;br&gt;\";echo ($x === $y) === false; // 1echo \"&lt;br&gt;\";echo $x . \" apples\"; // 10 apples?&gt; 数字与字符串比较数字与字符串比较时, 先尝试将字符串转换为数字, 再比较, 一个不能转换为数字的字符串, 转换结果为0, 故, 与 0 比较总返回 true 123456789101112131415&lt;?php// String to integer// 返回字符串中第一个不是数字的字符之前的数字串所代表的整数值。// 如果字符串第一个是‘-'，则从第二个开始算起echo (int)(\"a11\"); // 0echo \"&lt;br&gt;\";echo (int)(\"11a\"); // 11echo \"&lt;br&gt;\";echo intval(\"a11\"); // 0echo \"&lt;br&gt;\";echo intval(\"11a\"); // 0echo \"&lt;br&gt;\";echo intval(\"11\", 2); // 3// 这个函数后面的参数代表需要转化的数是几进制?&gt; 控制语句if else for foreach while do while switch case 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778&lt;?php///////////////////////////////////////////////////////////////////////////////// if else///////////////////////////////////////////////////////////////////////////////echo \"&lt;br&gt;&lt;br&gt;If else&lt;br&gt;\";$score = 70;if ($score &lt; 60) &#123; echo \"小于 60 &lt;br&gt;\";&#125; else if ($score &lt; 80) &#123; echo \"大于等于 60，小于 80 &lt;br&gt;\";&#125; else &#123; echo \"大于 80 &lt;br&gt;\";&#125;///////////////////////////////////////////////////////////////////////////////// for: 输出 1 到 10///////////////////////////////////////////////////////////////////////////////echo \"&lt;br&gt;&lt;br&gt;For&lt;br&gt;\";for ($i = 1; $i &lt;= 10; $i++) &#123; echo \"$i&lt;br&gt;\";&#125;///////////////////////////////////////////////////////////////////////////////// foreach: 输出数组中的所有元素///////////////////////////////////////////////////////////////////////////////// foreach 循环只适用于数组，并用于遍历数组中的每个键/值对。echo \"&lt;br&gt;&lt;br&gt;Foreach&lt;br&gt;\";$colors = array(\"Red\", \"Green\", \"Blue\", \"White\", \"Black\");foreach ($colors as $color) &#123; echo \"$color &lt;br&gt;\";&#125;///////////////////////////////////////////////////////////////////////////////// while: 输出 1 到 10///////////////////////////////////////////////////////////////////////////////echo \"&lt;br&gt;&lt;br&gt;While&lt;br&gt;\";$i = 0;while ($i++ &lt; 10) &#123; echo \"$i&lt;br&gt;\";&#125;///////////////////////////////////////////////////////////////////////////////// do while: 输出 1 到 10///////////////////////////////////////////////////////////////////////////////echo \"&lt;br&gt;&lt;br&gt;Do while&lt;br&gt;\";$i = 1;do &#123; echo \"$i&lt;br&gt;\";&#125; while (++$i &lt;= 10);///////////////////////////////////////////////////////////////////////////////// switch: 可以使用字符串，数字等///////////////////////////////////////////////////////////////////////////////echo \"&lt;br&gt;&lt;br&gt;Switch&lt;br&gt;\";$condition = \"A\";switch ($condition) &#123;case 1: echo \"Is 1 &lt;br&gt;\"; break;case \"a\":case \"A\": echo \"Is A &lt;br&gt;\"; break;case \"B\": echo \"Is B &lt;br&gt;\"; break;default: echo \"Default &lt;br&gt;\";&#125;?&gt; 函数PHP 内置了 1000 多个函数，功能很强大，例如要计算一个字符串的 MD5 并转换为大写 strtoupper(md5(&quot;Tidy Code&quot;)) 得到 ADCF1E98EBD0FD99E1227346B70BD9E2。 函数创建和 JavaScript 很像，都是以关键字 function 开头，然后是函数名和参数列表，参数支持默认值，函数的定义和调用顺序没有要求，可以递归调用。 12345678910111213141516171819202122232425262728293031323334353637&lt;?phpecho fibonacc(10) . \"&lt;br&gt;\"; // 函数调用，输出：55/** * 函数定义: 递归实现斐波那契数列 */function fibonacc($n) &#123; // 变量 $n 的作用域 是 local. if ($n == 1 || $n == 2) &#123; // 递归结束条件 return 1; &#125; return fibonacc($n - 1) + fibonacc($n - 2); // 递归&#125;// 输出：1, 1, 2, 3, 5, 8, 13, 21, 34, 55,for ($i = 1; $i &lt;= 10; $i++) &#123; echo fibonacc($i) . \", \";&#125;echo \"&lt;br&gt;\";/** * 默认参数只能在参数列表最后面，可以有多个默认参数 */function foo($name, $email = \"xxxx@gmail.com\", $mobile = \"xxxxxxxxxxx\") &#123; echo \"Name is: $name, EMail is: $email, Mobile is: $mobile &lt;br&gt;\";&#125;// 输出：Name is: Alice, EMail is: alice@salmon.com, Mobile is: 12345678901foo(\"Alice\", \"alice@salmon.com\", \"12345678901\");// 输出：Name is: Alice, EMail is: alice@salmon.com, Mobile is: xxxxxxxxxxxfoo(\"Alice\", \"alice@salmon.com\");// 输出：Name is: Alice, EMail is: xxxx@gmail.com, Mobile is: xxxxxxxxxxxfoo(\"Alice\");?&gt; 数组PHP 里的数组实际上是一个字典 Dictionary，也可以叫 Map，就是用 key/value 的形式存储。没有给出 key 的时候 key 默认就是用下标 0，1，2 等。 数组用 array() 来创建，数组的长度用 count() 来计算。 同一个 array 对象推荐单纯的作为数组使用，或者是 Map 使用。不要既有数组的用法，同时也有 Map 的用法。 作为普通数组使用12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?php$colors = array(\"Red\", \"Green\", \"Blue\"); // 定义数组///////////////////////////////////////////////////////////////////////////////// 使用下标直接访问数组元素///////////////////////////////////////////////////////////////////////////////$colors[0] = \"Yellow\"; // 给数组赋元素值echo \"$colors[0], $colors[1], $colors[2] &lt;br&gt;\"; // 用下标访问数组的元素echo \"-------------------------------------------&lt;br&gt;\";///////////////////////////////////////////////////////////////////////////////// 使用 for 循环遍历数组///////////////////////////////////////////////////////////////////////////////$len = count($colors);for ($i = 0; $i &lt; $len; $i++) &#123; echo $colors[$i]; echo \"&lt;br&gt;\";&#125;echo \"-------------------------------------------&lt;br&gt;\";///////////////////////////////////////////////////////////////////////////////// 使用 foreach 循环遍历数组///////////////////////////////////////////////////////////////////////////////foreach ($colors as $color) &#123; echo $color; echo \"&lt;br&gt;\";&#125;?&gt;///////////////////////////////////////////////////////////////////////////////// 使用数组排序sort() // 以升序对数组排序rsort() // 以降序对数组排序asort() // 根据值，以升序对关联数组进行排序ksort() // 根据键，以升序对关联数组进行排序arsort() // 根据值，以降序对关联数组进行排序krsort() // 根据键，以降序对关联数组进行排序//////////////////////////////////////////////////////////////////////////////&lt;?php$numbers = array(1, 3, 5, 9, 5, 8, 4);$len = count($numbers);echo join(\", \", $numbers) . \"&lt;br&gt;\"; // 输出数组元素// 选择排序: 升序for ($i = 0; $i &lt; $len - 1; $i++) &#123; $k = $i; for ($j = $i; $j &lt; $len; $j++) &#123; if ($numbers[$j] &lt; $numbers[$k]) &#123; $k = $j; &#125; &#125; $temp = $numbers[$k]; $numbers[$k] = $numbers[$i]; $numbers[$i] = $temp;&#125;echo join(\", \", $numbers) . \"&lt;br&gt;\";?&gt; 作为 Map 使用123456789101112131415161718192021222324252627282930&lt;?php$ages = array(\"Alice\"=&gt;\"20\", \"Bob\"=&gt;\"25\", \"Josh\"=&gt;\"30\"); // 创建 Map// 另外一种声明方法$age['Peter']=\"35\";$age['Ben']=\"37\";$age['Joe']=\"43\";///////////////////////////////////////////////////////////////////////////////// 使用 key 访问 value，就像 Java 的 Map： map.getValue(key)///////////////////////////////////////////////////////////////////////////////echo $ages[\"Alice\"];echo \"&lt;br&gt;\";echo \"-------------------------------------------&lt;br&gt;\";///////////////////////////////////////////////////////////////////////////////// 输出所有的 key 和 value.///////////////////////////////////////////////////////////////////////////////foreach($ages as $key=&gt;$value) &#123; echo \"Key: $key, Value: $value\"; echo \"&lt;br&gt;\";&#125;echo \"-------------------------------------------&lt;br&gt;\";///////////////////////////////////////////////////////////////////////////////// 输出所有的 value///////////////////////////////////////////////////////////////////////////////foreach($ages as $value) &#123; echo \"Value: $value\"; echo \"&lt;br&gt;\";&#125;?&gt; 作为数组和 Map 混用，下标和 key 理解起来就比较混乱123456789101112131415161718192021222324&lt;?php$colors = array(\"Red\", \"Green\", \"Blue\"); // 下标是 0，1，2，实际应该理解为 key。$colors[5] = \"Yellow\";$colors[6] = \"Purple\";$colors[\"pink\"] = \"Pink\"; // 第 5 个元素，但是不能用 $colors[5] 访问(是 Yellow)$len = count($colors);for ($i = 0; $i &lt; $len; ++$i) &#123; echo $i . \" \" . $colors[$i]; // 下标 3，4 没有元素，所以输出 到 3，4 时会报错 echo \"&lt;br&gt;\";&#125;echo \"-------------------------------------------&lt;br&gt;\";foreach ($colors as $color) &#123; echo $color; echo \"&lt;br&gt;\";&#125;echo \"-------------------------------------------&lt;br&gt;\";echo $colors[5]; // 数字为 key 时可以不用引号echo \"&lt;br&gt;\";echo $colors[\"5\"];?&gt; 处理 GET 和 POST 请求使用 $_GET[&quot;fieldName&quot;] 取得 get 请求的数据使用 $_POST[&quot;fieldName&quot;] 取得 post 请求的数据 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;form action&#x3D;&quot;form.php&quot; method&#x3D;&quot;GET&quot;&gt; &lt;!-- 换成 POST --&gt; Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;name&quot;&gt; Mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail&quot;&gt; &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt; &lt;&#x2F;form&gt; &lt;hr&gt;&lt;?php$name &#x3D; $_GET[&quot;name&quot;]; &#x2F;&#x2F; 换成 $_POST$mail &#x3D; $_GET[&quot;mail&quot;];echo &quot;Name is: $name, Mail is: $mail&quot;;?&gt;&lt;hr&gt;&lt;?php$name &#x3D; &quot;&quot;;$mail &#x3D; &quot;&quot;;if ($_SERVER[&quot;REQUEST_METHOD&quot;] &#x3D;&#x3D; &quot;GET&quot;) &#123; &#x2F;&#x2F; GET or POST $name &#x3D; $_GET[&quot;name&quot;]; $mail &#x3D; $_GET[&quot;mail&quot;];&#125; else &#123; $name &#x3D; $_POST[&quot;name&quot;]; $mail &#x3D; $_POST[&quot;mail&quot;];&#125;echo &quot;Request method: &#123;$_SERVER[&quot;REQUEST_METHOD&quot;]&#125;&lt;br&gt;&quot;;echo &quot;Name is: $name, Mail is: $mail&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; Cookie设置 cookie: setcookie(name, value, expire, path, domain)取得 cookie: $_COOKIE[name]删除 cookie: setcookie(name, “”, time()-3600) 设置 cookie 过期就可以了测试 cookie: isset($_COOKIE[name]) 设置 cookie 的页面12345678910111213&lt;?phpsetcookie(&quot;user&quot;, &quot;Bob&quot;, time() + 3600); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 访问 cookie 的页面123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?phpecho $_COOKIE[&quot;user&quot;];echo &quot;&lt;br&gt;&quot;;if (isset($_COOKIE[&quot;mail&quot;])) &#123; echo $_COOKIE[&quot;mail&quot;];&#125;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; Session使用 session 前必须启动 session: session_start()设置 session: $_SESSION[name]=value取得 session: $_SESSION[name]删除 session: unset($_SESSION[name])，session_destroy()测试 session: isset($\\ _SESSION[name]) 设置 session 的页面1234567891011121314&lt;?phpsession_start(); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie$_SESSION[&#39;number&#39;]&#x3D;1;?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 访问 session 的页面12345678910111213141516&lt;?phpsession_start(); &#x2F;&#x2F; 必须在 html 的内容前面设置 cookie?&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;&#x2F;title&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?phpecho $_SESSION[&quot;number&quot;];?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; Include / Require 文件 通过 include 或 require 语句，可以将 PHP 文件的内容插入另一个 PHP 文件（在服务器执行它之前）。include 和 require 语句是相同的，除了错误处理方面： require 会生成致命错误（E_COMPILE_ERROR）并停止脚本 include 只生成警告（E_WARNING），并且脚本会继续 因此，如果您希望继续执行，并向用户输出结果，即使包含文件已丢失，那么请使用 include。否则，在框架、CMS 或者复杂的 PHP 应用程序编程中，请始终使用 require 向执行流引用关键文件。这有助于提高应用程序的安全性和完整性，在某个关键文件意外丢失的情况下。包含文件省去了大量的工作。这意味着您可以为所有页面创建标准页头、页脚或者菜单文件。然后，在页头需要更新时，您只需更新这个页头包含文件即可。 include &#39;filename&#39;;require &#39;filename&#39;;include_once(&quot;fileName&quot;);require_once(&quot;fileName&quot;); 括号可要可不要 类的定义推荐用 require_once 1234&lt;!-- footer.php --&gt;&lt;?phpecho \"&lt;p&gt;Copyright © 2006-\" . date(\"Y\") . \" W3School.com.cn&lt;/p&gt;\";?&gt; 12345678910&lt;!-- hello.php --&gt;&lt;html&gt;&lt;body&gt; &lt;?php include 'header1.php';?&gt;&lt;/body&gt; &lt;h1&gt;Hello World!&lt;/h1&gt; &lt;p&gt;Section 1&lt;/p&gt; &lt;p&gt;Section 2&lt;/p&gt; &lt;?php require 'footer.php';?&gt;&lt;/body&gt; &lt;p&gt;End&lt;/p&gt;&lt;/html&gt; PHP 的面向对象：类，和 Java 的类很像 类的定义：class className {} 没有访问权限一说 成员变量定义：[qualifier|var] $field; 可以初始化 成员函数定义：[qualifier] function methodName() {}，可带参数 构造函数：__construct() {}，可带参数 创建对象：$obj = new className();，$obj = new className($v1,$v2); 函数调用：$obj-&gt;methodName(); 成员函数内访问成员变量：$this-&gt;fieldName 不是 $this-&gt;$fieldName 成员函数内访问成员函数：$this-&gt;methodName() PHP 不会自动调用父类的构造函数(不支持构造函数重载，可以使用默认参数实现重载)，必须使用 parent 关键字显式地调用 PHP 只支持单继承，使用关键字 extends PHP 也有接口，使用关键字 interface 定义接口，实现接口使用关键字 implements 接口的方法没有实现会报错 访问权限 qualifier：public, protected, private, abstract, final, static。默认是 public 的访问权限 可以把类的定义放在单独的文件里，然后使用 require_once 加载 类定义和继承12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849&lt;html&gt;&lt;body&gt;&lt;?phpclass Employee &#123; var $name; var $salary; protected $id; function __construct($name, $salary) &#123; &#x2F;&#x2F; 构造函数 $this-&gt;name &#x3D; $name; $this-&gt;salary &#x3D; $salary; &#125; function getName() &#123; return $this-&gt;name; &#x2F;&#x2F; 不能直接用 return $name; &#125; function setName($name) &#123; $this-&gt;name &#x3D; $name; &#125;&#125;$employee &#x3D; new Employee(&quot;Alice&quot;, 2000);echo $employee-&gt;getName() . &quot;&lt;br&gt;&quot;;$employee-&gt;setName(&quot;Bob&quot;);echo $employee-&gt;getName() . &quot;&lt;br&gt;&quot;;?&gt;&lt;?php&#x2F;&#x2F; 使用继承class Manager extends Employee &#123; var $title; function __construct($name, $salary, $title) &#123; parent::__construct($name, $salary); &#x2F;&#x2F; 调用父类的构造函数 $this-&gt;title &#x3D; $title; &#125; function getTitle() &#123; return $this-&gt;title; &#125;&#125;$manager &#x3D; new Manager(&quot;Alice&quot;, 3000, &quot;Project Manager&quot;);echo $manager-&gt;getName() . &quot;, &quot; . $manager-&gt;getTitle() . &quot;&lt;br&gt;&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 实现接口123456789101112131415161718192021222324252627&lt;html&gt;&lt;body&gt;&lt;?phpinterface Flyable &#123; function fly();&#125;interface Runnable &#123; function run();&#125;class Bird implements Flyable, Runnable &#123; function fly() &#123; echo &quot;I can fly.&lt;br&gt;&quot;; &#125; function run() &#123; echo &quot;I can run.&lt;br&gt;&quot;; &#125;&#125;$bird &#x3D; new Bird();$bird-&gt;fly();$bird-&gt;run();?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 静态访问 关键字 self12345678910111213141516171819202122232425&lt;html&gt;&lt;body&gt;&lt;?phpclass Test &#123; public static $count &#x3D; 0; &#x2F;&#x2F; 每创建一个对象 count 就加 1 function __construct() &#123; self::$count++; &#x2F;&#x2F; 函数内部访问静态成员 echo self::$count . &quot; instances are created.&lt;br&gt;&quot;; &#125; static function getCount() &#123; return self::$count; &#125;&#125;echo Test::getCount() . &quot;&lt;br&gt;&quot;; &#x2F;&#x2F; 类外部访问静态成员函数new Test();new Test();new Test();echo Test::getCount() . &quot;&lt;br&gt;&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; 实用代码Array to JSON1234&lt;?php$props = array(\"background\"=&gt;\"black\", \"width\"=&gt;300, \"height\"=&gt;600);echo json_encode($props); // &#123;\"background\":\"black\",\"width\":300,\"height\":600&#125;?&gt; 取得正在访问的网页的网址1234567&lt;?php$url = \"http://\".$_SERVER['HTTP_HOST'].$_SERVER['PHP_SELF'];echo $url . \"&lt;br&gt;\"; // http://localhost:8000/hello.php$name = dirname($url);echo $name . \"&lt;br&gt;\"; // http://localhost:8000?&gt; 使用 PHP 发邮件1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;html&gt;&lt;head&gt;&lt;meta http-equiv&#x3D;&quot;content-type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;UTF-8&quot; &#x2F;&gt;&lt;&#x2F;head&gt;&lt;body&gt; &lt;form action&#x3D;&quot;hello.php&quot; method&#x3D;&quot;post&quot;&gt; &lt;table&gt; &lt;tr&gt; &lt;td&gt;Mail to:&lt;&#x2F;td&gt; &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail_to&quot; &#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;Subject:&lt;&#x2F;td&gt; &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;subject&quot; &#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td&gt;Mail From:&lt;&#x2F;td&gt; &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;mail_from&quot; &#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td colspan&#x3D;&quot;2&quot;&gt;&lt;textarea name&#x3D;&quot;contents&quot; cols&#x3D;&quot;50&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;tr&gt; &lt;td colspan&#x3D;&quot;2&quot; align&#x3D;&quot;center&quot;&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Send Mail&quot;&#x2F;&gt;&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;table&gt; &lt;&#x2F;form&gt; &lt;?php $mailTo &#x3D; $_POST[&quot;mail_to&quot;]; $mailFrom &#x3D; $_POST[&quot;mail_from&quot;]; $subject &#x3D; $_POST[&quot;subject&quot;]; $contents &#x3D; $_POST[&quot;contents&quot;]; if ($mailTo &amp;&amp; $mailFrom &amp;&amp; $subject &amp;&amp; $contents) &#123; &#x2F;&#x2F; 前面那些HTML代码都是为了填写信息更容易，实际发送邮件代码只是下面一句 &#x2F;&#x2F; 但首先机器上得启动邮件发送程序，Mac下是默认启动的，Linux好像要自己先配置启动 mail($mailTo, $subject, $contents, &quot;From:&quot;.$mailFrom); echo &quot;Mail is successfully sent!&quot;, &quot;&lt;br&gt;&quot;; &#125; ?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt; PHP中的非贪婪匹配，默认用的是贪婪匹配12345678910111213141516171819202122232425262728&lt;pre&gt;&lt;?php// 替换图片的目录为统一路径$string = 'a&lt;img src=\"a/b/x.png\"&gt;,Biao,&lt;img src=\"uploads/y.jpg\"&gt;';$string2 = 'a&lt;img src=\"a/b/x.png\"&gt;,Biao,&lt;img src=\"uploads/y.jpg\"&gt;';// /U为非贪婪，这种非贪婪，是从后面向前找，与+?有些区别$pattern ='/&lt;img src=\"(.*)\\/(.+\\\\..+)\"&gt;/U';$replacement = \"&lt;img src=\\\"__IMG_BASE__/$2\\\"&gt;\";echo preg_replace($pattern, $replacement, $string);echo \"-------------\";$pattern ='/&lt;img src=\"(.*)\\/(.+\\\\..+)\"&gt;+?/'; // +?结果与上面的不一样echo preg_replace($pattern, $replacement, $string2);echo \"-------------\";// 找出所有的图片，图片名$pattern =\"/&lt;img src=\\\"(.*)\\/(.+\\\\..+)\\\"&gt;/U\";preg_match_all($pattern, $string, $images);print_r($images);// 输出图片名foreach ($images[2] as $index =&gt; $imageName) &#123; echo \"$imageName&lt;br/&gt;\";&#125;?&gt; 字符串和timestamp的转换 Date Document12345678&lt;?phpecho (strtotime(\"2010-10-28 10:52:21\")); // MySQL格式的字符串转换成秒数echo \"&lt;br/&gt;\";echo (strtotime(\"2010-10-01 00:00:00\"));echo \"&lt;br/&gt;\";$d = date(\"Y-m-d H:i:s\", time()); // 秒数转换成MySQL格式的timestampecho $d;?&gt; 访问 MySQL12345678910111213141516171819202122&lt;?php// 插入数据到数据库中, 数据库操作语句都是使用mysql_querymysql_connect(\"localhost\", \"root\", \"root\"); // 连接到数据库: url, username, passwordmysql_select_db(\"qt\"); // 选择使用数据库中的表$result = mysql_query(\"SELECT username, password FROM user\");while ($row = mysql_fetch_array($result)) &#123; // 每使用一次后，会自动移向下一个游标 // username 和 password 是数据库中列名 echo $row[\"username\"], \", \", $row[\"password\"], \"&lt;br&gt;\";&#125;?&gt;&lt;?php$username = \"Blabla\";$password = date(\"H:i:s\");// 插入数据mysql_query(\"INSERT INTO USER (username, password) VALUES ('$username', '$password')\");// Close MySQL connectionmysql_close();?&gt;","categories":[{"name":"PHP","slug":"PHP","permalink":"https://aotle.github.io/categories/PHP/"}],"tags":[{"name":"PHP","slug":"PHP","permalink":"https://aotle.github.io/tags/PHP/"}]},{"title":"数据结构--线性表","slug":"数据结构-线性表","date":"2020-06-29T13:13:25.000Z","updated":"2020-08-13T06:37:58.287Z","comments":true,"path":"2020/06/29/数据结构-线性表/","link":"","permalink":"https://aotle.github.io/2020/06/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%BF%E6%80%A7%E8%A1%A8/","excerpt":"数据结构之线性表","text":"数据结构之线性表 概念线性表是数据结构中最简单的数据存储结构，可以理解为“线性的表”。 线性，是说数据在逻辑结构上具有线性关系。将具有线性关系的数据存储到计算机中所使用的存储结构称为线性表。 首先是一个序列 其次是有限的 存储的数据本身的类型一定保持相同。 线性表的开始元素没有前驱元素只有后继元素，线性表的结束元素没有后继元素只有前驱元素，除了开头元素和结尾元素以外，每个元素都有且只有一个前驱元素和后继元素。 数据一旦用线性表存储，各个数据元素之间的相对位置就固定了。 存储结构线性表的存储结构有顺序存储结构和链式存储结构两种，前者称为顺序表，后者称为链表。 顺序存储结构顺序表就是把线性表中的所有元素按照某种逻辑顺序，依次存储到从指定位置开始的一块连续的存储空间，重点是连续的存储空间。 数组长度和线性表的长度区别：数组长度是存放线性表的存储空间的长度，存储分配后这个量一般是不变的，线性表的长度是线性表中数据元素的个数，随着线性表插入和删除操作的进行，这个量是变化的。 在顺序表中，各个表项的逻辑顺序与其存放的物理顺序一致，即第i个表项存储于第i个物理位置（1&lt;i≤n）。 对顺序表中所有表项，既可以进行顺序访问，也可以进行随机访问。也就是说，既可以从表的第一个表项开始逐个访问表项，也可以按照表项的序号（亦称为下标）直接访问表项。 顺序表的静态存储表示：123456#define maxSize 100typedef int T;typedef struct&#123;T data[maxSize];int n;&#125;SeqList; 顺序表的动态存储表示：12345typedef int T;typedef struct&#123;T* data;int maxSize，n;&#125;SeqList; 顺序表搜索算法：123456789template &lt;class T&gt;int Seqlist&lt;T&gt;::search(T&amp; x)&#123;//搜索函数，在表中找到x，找到则返回元素位置，否则返回0//last表示最后一个元素的数组标号，从0开始，表项是从1开始 for(int i=0;i&lt;=last;++i)&#123; if(data[i]==x) return i+1; &#125; return 0;&#125; 顺序表插入算法：123456789101112template &lt;class T&gt;bool Seqlist&lt;T&gt;::insert(int i,T&amp; x)&#123;//将新元素插入到表第i个元素之后，函数返回true，否则返回false if(last==maxsize-1)return false; if(i&lt;0||i&gt;last+1)return false; for(int j=last;j&gt;=i;j--)&#123; data[j+1]=data[j]; &#125; data[i]=x; last++; return true;&#125; 顺序表删除算法：123456789101112template &lt;class T&gt;bool Seqlist&lt;T&gt;::remove(int i,T&amp; x)&#123;//删除第i个表项，通过x返回删除的元素值，成功返回true if(last==-1)return false; if(i&lt;1||i&gt;last+1)return false; x=data[i-1]; for(int j=i;j&lt;=last;j++)&#123; data[j-1]=data[j]; &#125; last--; return true;&#125; 链式存储结构链表，别名链式存储结构或单链表，用于存储逻辑关系为 “一对一” 的数据。与顺序表不同，链表不限制数据的物理存储状态，换句话说，使用链表存储的数据元素，其物理存储位置是随机的。线性表的链式存储结构的特点是用一组任意的存储单元存储线性表的数据元素，这组存储单元可以是连续的，也可以是不连续的，这就意味着这些数据元素可以存在内存未被占用的任意位置。还有一点就是在顺序存储结构中，每个数据空间只需要存储数据元素的信息即可，但是在链式结构中，除了要存储数据元素信息外，还需要存储他的后继元素的存储位置。我们把存储数据元素信息的域称为数据域，把存储直接后继位置的域称为指针域，指针域中存储的信息称为指针或链，数据域和指针域组成数据元素的存储映像，称为结点。 单链表单链表的定义123456789struct linknode&#123; int data; linknode* link;&#125;;class list&#123; private: linknode* first; public:&#125;; 单链表的查找算法12345678910template &lt;class T&gt;linknode&lt;T&gt;* list&lt;T&gt;::search(T X)&#123; //成功的时候返回地址，否则返回null linknode&lt;T&gt;* current = first-&gt;link;//带附加头结点 while(current!=null)&#123; if(current-&gt;data==x)break; else current=current-&gt;link; &#125; return current;&#125; 单链表的插入算法1234567891011template &lt;class T&gt;bool list&lt;T&gt;::inscrt(int i,T&amp; X)&#123; //将新元素插入i结点之后 linknode&lt;T&gt; *current = locate(i);//return i address if(current==null)return false; linknode&lt;T&gt; *newnode = new linknode&lt;T&gt;(x); if(newnode==null)&#123;cerr&lt;&lt;\"error\"&lt;&lt;endl;exit(1)&#125; newnnode-&gt;link=current-&gt;link; current-&gt;link=newnode; return true;&#125; 单链表的删除算法1234567891011template &lt;class T&gt;bool list&lt;T&gt;::remove(int i,T&amp; X)&#123; //将第i个元素删除，x返回被删除的值 linknode&lt;T&gt; *current = locate(i-1);//return i-1 address if(current==null||current-&gt;link==null)return false; linknode&lt;T&gt; *del = current-&gt;link; x=del-&gt;data; current-&gt;link=del-&gt;link; delete del; return true;&#125; 循环链表循环链表（circular list）是另一种形式的表示线性表的链表，它的结点结构与单链表相同，与单链表不同的是链表中表尾结点的link域中不是NULL，而是存放了一个指向链表开始结点的指针。这样，只要知道表中任何一个结点的地址，就能遍历表中其他任一结点。 双向链表双向链表又称为双链表。使用双向链表（doubly linked list）的目的是为了解决在链表中访问直接前驱和直接后继的问题。因为在双向链表中每个结点都有两个链指针，一个指向结点的直接前驱，一个指向结点的直接后继，这样不论是向前驱方向搜索还是向后继方向搜索，其时间开销都只有O(1)。 静态链表如果为数组中每一个元素附加一个链接指针，就形成静态链表结构。它允许我们不改变各元素的物理位置，只要重新链接就能够改变这些元素的逻辑顺序。由于它是利用数组定义的，在整个运算过程中存储空间的大小不会变化，因此称之为静态链表。静态链表的每个结点由两个数据成员构成：data域存储数据，link域存放链接指针。所有结点形成一个结点数组。","categories":[{"name":"数据结构","slug":"数据结构","permalink":"https://aotle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://aotle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"线性表","slug":"线性表","permalink":"https://aotle.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"}]},{"title":"常用汇编指令整理","slug":"常用汇编指令整理","date":"2020-06-25T15:12:52.000Z","updated":"2020-08-13T06:36:14.641Z","comments":true,"path":"2020/06/25/常用汇编指令整理/","link":"","permalink":"https://aotle.github.io/2020/06/25/%E5%B8%B8%E7%94%A8%E6%B1%87%E7%BC%96%E6%8C%87%E4%BB%A4%E6%95%B4%E7%90%86/","excerpt":"这是一些常用汇编指令的整理。","text":"这是一些常用汇编指令的整理。 数据传送指令通用数据传送指令MOV 格式：MOV dst,src 功能：将src传送到dst 限制：段寄存器间不可直接相互传送，立即数不能直接送段寄存器，CS 不可作为目的操作数。 PUSH &amp; POP 格式：PUSH src &amp; POP dst 功能：将 src 压栈 &amp; 出栈送入 dst 限制：CS 不可作目的操作数 XCHG 格式：XCHG dst,src 含义：交换两个操作数内容（Exchange） 限制：段寄存器不可为操作数，也不能同时为存储单元，两个操作数也不能同时为内存变量。 XLAT 格式：XLAT 含义：转换表（Table Look-up Translation） 功能：把待查表格（表格位于 DS:BX）的一个字节内容送到AL累加器中。在执行该指令前，应将TABLE首地址送至BX寄存器中，然后将待查字节与其在表格中距表首地址位移量送AL,即AL&lt;–((BX)+(AL)). 地址目标传送指令LEA 格式：LEA dst,src 含义：把地址偏移量传送目的操作数（Load Effective Address） 功能：取src地址偏移量送dst 注：源操作数必须是存储单元，目的操作数必须是除段寄存器之外的 16 位寄存器。 LDS &amp; LES 格式：LDS dst,src &amp; LES dst,src 含义：取双字指针送到目的寄存器和 DS/ES 功能：从源操作数指定的存储单元中取出 4 字节，前两个字节送到目的寄存器，后两个字节送到 DS/ES。 标志传送指令PUSHF &amp; POPF 格式：PUSHF &amp; POPF 含义：将标志寄存器压栈/出栈 功能：PUSHF：执行操作: SP=SP-1,(SP)=PSW的高8位, SP=SP-1, (SP)=PSW的低8位，POPF相反。 LAHF &amp; SAHF 格式：LAHF &amp; SAHF 含义：Load(Store) AH from(into) Flags 功能：将标志寄存器低字节送到 AH &amp; 将 AH 送到标志寄存器低字节 输入输出指令IN &amp; OUT 格式：IN AL/AX, ADDR &amp; OUT ADDR, AL/AX 功能：从端口地址（寄存器）获取数据送到寄存器（端口地址） 地址格式：端口地址有两种格式，小于 FFH 时可以是直接写出，否则必须先送入 DX 再使用。 算术运算指令加减法指令ADD &amp; ADC 格式：ADD dst,src &amp; ADC dst,src 含义：（带进位）加法 功能：dst = src + dst (+ CF) INC 格式：INC dst 功能：自增 1，dst = dst + 1 SUB &amp; SBB: 格式：SUB dst,src &amp; SBB dst,src 含义：（带借位）减法 功能：dst = dst - src (- CF) DEC: 格式：DEC dst 功能：自减 1，dst = dst + 1 NEG: 格式：NEG dst 功能：对目的操作数取负，dst = -dst 乘除法指令MUL &amp; IMUL 格式：IMUL src &amp; MUL src 含义：无符号数/整数乘法 功能：只有一个源操作数，当其为 8 位时，AX = AL * src，为 16 位时，（DX,AX）= AX * src DIV &amp; IDIV 格式：IDIV src &amp; DIV src 含义：无符号数/整数乘法 功能：只有一个源操作数作为除数，当其为 8 位时，AX 为被除数，AL 作为商，AH 作为余数。当 src 为 16 位时，（DX,AX）作为被除数，AX 作为商，DX 作为余数。 逻辑运算与移位指令逻辑运算 指令 功能 NOT dst 取反，逻辑非 AND dst,src 逻辑与 OR dst,src 逻辑或 XOR dst,src 异或 算术逻辑移位 指令 含义 功能 SAL dst,cnt Shift Arithmetic Left 算术左移 cnt 位 SAR dst,cnt Shift Arithmetic Right 算术右移 cnt 位 SHL dst,cnt Shift Logic Left 逻辑左移 cnt 位 SHR dst,cnt Shift Logic Right 逻辑右移 cnt 位 cnt 为 1 或者 CL。算术右移时补最高位，逻辑右移补 0，被移出的移入 CF。 循环移位 指令 含义 功能 ROL dst,cnt Rotate Left 循环左移 cnt 位 ROR dst,cnt Rotate Right 循环右移 cnt 位 RCL dst,cnt Rotate through Carry Left 带进位左移 cnt 位 RCR dst,cnt Rotate through Carry Right 带进位右移 cnt 位 字符串操作指令 指令（字节/字） 功能 MOVSB / MOVSW 字符串传送 CMPSB / CMPSW 字符串比较 SCASB / SCASW 字符串扫描 LODSB / LODSW 字符串装入 STOSB / STOSW 字符串存储 对于后三条指令，操作使用 AL/AX 寄存器（根据操作数类型决定）。 源串起始地址为 DS:SI，目的串位于 ES:DI 每一次操作都会自动修改 SI 和 DI DF 标志位可以控制字符串处理方向，DF = 0 递增，DF = 1 递减，可通过 CLD/STD 设置 处理字符串长度放在 CX 中 这些指令前可以用重复前缀 REP 反复执行，或是 REPE/REPZ 相等/为零则重复，REPNE/REPNZ 不相等/非零则重复。 处理器控制指令标志处理指令 指令 含义 功能 CLC Clear Carry CF = 0 CMC Complement Carry CF = NOT CF STC Set Carry CF = 1 CLD Clear Direction DF = 0 STD Set Direction DF = 1 CLI Clear Interrupt IF = 0 STI Set Interrupt IF = 1 外部同步指令ESC 格式：ESC 外部操作码，src 功能：用来实现对 8087 协处理器控制。 WAIT 格式：WAIT 功能：往往跟在 ESC 后等待，直到 TEST 为低电平。 LOCK 格式：LOCK 功能：封锁总线，禁止其他处理器使用总线。 停机和空操作HLT 格式：HLT 功能：进入暂停状态不进行任何操作，直到复位或 NMI 引脚/INTR 引脚出现中断请求信号。 NOP 格式：NOP 功能：耗费三个时钟周期但不进行任何操作。 控制转移指令比较指令CMP 格式：CMP dst,src 功能：用 dst 减去 src，但结果仅反映到标志位，不送回目的操作数。 常见用法：后跟JZ（相等跳转） &amp; JNZ （不相等跳转）。 TEST 格式：TEST dst,src 功能：对两个操作数作逻辑与，结果仅反映到标志位，不送回目的操作数。 常见用法：测试某一位，为 1JNZ跳转，为 0 JZ跳转。 无条件转移JMP 格式：JMP dst 功能：无条件跳转到目的地址。 跳转分为两种，一种是段内转移或近（NEAR）转移，跳转时仅改变 IP 的值，另一种是段间转移或远（FAR）转移，此时跳转长度超过 IP 最大值，CS 和 IP 都要改变。这两种情况都提供直接转移和间接转移两种方法，前者直接给出目的地址，后者将目的地址放在寄存器或者存储单元中。 类型 方式 寻址目标 举例 段内 直接 立即短转移（8位） JMP SHORT 标号 段内 直接 立即近转移（16位） JMP NEAR PTR 标号或JMP 标号 段内 间接 寄存器（16位） JMP BX 段内 间接 存储器（16位） JMP WORD PTR 5[BX] 段间 直接 立即转移（32位） JMP FAR PTR 标号 段间 间接 存储器（32位） JMP DWORD PTR[REG] CALL 格式：CALL 过程名 功能：调用过程。 同样有段内与段间，直接与间接的区分，指令格式与 JMP 类似。 类型 方式 寻址目标 举例 段内 直接 立即调用 CALL 标号 段内 间接 寄存器（16位） CALL BX 段内 间接 存储器（16位） CALL WORD PTR 5[BX] 段间 直接 立即调用（32位） CALL FAR PTR 标号 段间 间接 存储器（32位） CALL DWORD PTR[REG] RET 格式：RET (n) 功能：过程返回。如果有 n 则在弹出返回地址后再弹出 n 个字节，这一目的是让调用过程可以传递参数。 条件转移 格式：操作符 标号 功能：根据操作符，满足即跳转到标号。 直接标志转移 指令 测试条件 判断条件 JC/JNC CF = 1 / 0 有 / 无进位 JZ/JNZ ZF = 1 / 0 相等 / 不相等 JE/JNE ZF = 1 / 0 相等 / 不相等 JS/JNS SF = 1 / 0 符号为负 / 正 JO/JNO OF = 1 / 0 溢出 / 无溢出 JP/JNP PF = 1 / 0 为偶数 / 奇数 JPE/JPO PF = 1 / 0 为偶数 / 奇数 无符号数比较测试 指令 测试条件 判断条件 JA/JNBE CF ∨∨ ZF = 0 高于 / 不低于等于 JAE/JNB CF = 0 高于等于 / 不低于 JNAE/JB CF = 1 不高于等于 / 低于 JNA/JBE CF ∨∨ ZF = 1 不高于 / 低于等于 有符号数比较测试 指令 测试条件 判断条件 JG/JNLE (SF XORXOR OF) ∨∨ ZF = 0 大于 / 不小于等于 JGE/JNL SF XORXOR OF = 0 大于等于 / 不小于 JNGE/JL SF XORXOR OF = 1 不大于等于 / 小于 JNG/JLE (SF XORXOR OF) ∨∨ ZF = 1 不大于 / 小于等于 循环控制指令LOOP 格式：LOOP 标号 功能：跳至标号继续循环，每执行一次 CX 减一，若减一后为零则不跳转。 LOOPE &amp; LOOPNE 格式：LOOPE 标号 &amp; LOOPNE 标号 功能：（不）相等时循环，其他与 LOOP 相同。 LOOPZ &amp; LOOPNZ 格式：LOOPZ 标号 &amp; LOOPNZ 标号 功能：结果（不）为零时循环，其他与 LOOP 相同。 JCXZ 格式：JCXZ 标号 功能：CX 为零则跳转，否则就往下执行， CS 不会减一。 中断指令INT 格式：INT n 功能：调用 n 对应的功能。 INTO 格式：INTO 功能：如果溢出标识 OF 为 1 则产生类型为 4 的中断，否则就继续向下执行。 IRET 格式：IRET 功能：中断返回。 BIOS &amp; DOS 调用调用这两者用的是 INT 中断指令。 格式：INT n 功能：调用 n 对应的功能。 其中 n = 21H 是最为强大的 DOS 中断。一般调用中断须先将参数放入指定寄存器，功能号放入 AH，子功能号放入 AL，例如 12MOV AX,4C00H INT 21H 常用的功能号有 功能号 功能 参数 01H 输入一个字符 AL = 输入字符 0AH 输入字符串 DX:DX = 缓冲区首地址 02H 显示一个字符 DL = 显示字符 09H 显示 $ 结尾的字符串 DX:DX = 字符串首地址 常用伪指令数值回送操作符TYPE 格式：TYPE expression_r(or label) 功能：返回变量以字节数表示的类型 &amp; 返回标号类型的数值 LENGTH 格式：TYPE variable 功能：对于变量使用DUP的情况,将回送分配给该变量的单元数; 对其它情况则回送1 SIZE 格式：TYPE variable 功能：回送分配给该变量的字节数 = TYPE * LENGTH OFFSET 格式：TYPE variable (or lable) 功能：回送变量或标号的偏移地址 SEG 格式：TYPE variable (or lable) 功能：回送变量或标号的段地址 数据定义语句 DB 定义字节,表示其后每个操作数占有一个字节(1Byte)单元 DW 定义字,表示表示其后每个操作数占有一个字(2Byte)单元 123data_byte DB 10 , 4 , 10H , ? ;共定义了4个字节,其中 &#39;?&#39; 是保留单元data_word DW 100 DUP(?) ;定义100个字的存储空间","categories":[{"name":"汇编","slug":"汇编","permalink":"https://aotle.github.io/categories/%E6%B1%87%E7%BC%96/"}],"tags":[{"name":"8086汇编","slug":"8086汇编","permalink":"https://aotle.github.io/tags/8086%E6%B1%87%E7%BC%96/"},{"name":"考试","slug":"考试","permalink":"https://aotle.github.io/tags/%E8%80%83%E8%AF%95/"}]},{"title":"短句分享","slug":"短句分享","date":"2020-06-23T06:26:06.000Z","updated":"2020-08-13T06:37:11.673Z","comments":true,"path":"2020/06/23/短句分享/","link":"","permalink":"https://aotle.github.io/2020/06/23/%E7%9F%AD%E5%8F%A5%E5%88%86%E4%BA%AB/","excerpt":"摘抄了一些很美的短句","text":"摘抄了一些很美的短句 1/ 四月，应该坦坦荡荡，鸽子从屋檐拥向晴空，青藤从粉墙探向枝头，新茶从瓷碗吻向老桌，传说从故纸堆里挣脱，你带着苍绿的情书，生锈的戒指，以及喑哑的晚钟，风尘仆仆 ，从远方，奔向我 ，趁风月无边，浮了这盅千里烟波，从此隐入山中，陪你赏朝昏夕落。 2/ 你是一台磨人的机器 盛产爱和诗意 3/ 我喜欢的少年打天上来 他无意掀翻烛火 点燃我双眸盛满的暮色 4/ ᴹᵉᵉᵗ ʸᵒᵘ ᶠᵘˡˡ ᵒᶠ ˡᵒᵛᵉ / ˢᵉᵉ ᵉᵛᵉʳʸᵗʰⁱⁿᵍ ⁱⁿ ᵗʰᵉ ʷᵒʳˡᵈ / ᶠᵃˡˡ ⁱⁿ ˡᵒᵛᵉ ʷⁱᵗʰ ʸᵒᵘ. 遇见你爱意汹涌，看世间万物，都浪漫心动。 5/ 山野千里，你是我藏在星星里的浪漫，无尽的温柔与风情都隐匿在皎月清辉中，今晚月色极美，我双手为你奉上 6/ 纯洁无暇的善良不够善良。 遭遇过一切挫折与人性考验后的善良温柔有力量。 7/ 很喜欢「日暮里」和「次日清晨」这两个词。一天的喜怒哀乐都溜进日暮里，在次日清晨给人以重新开始的无限可能。 疲倦落入温柔暮色里，我会在次日清晨醒着眼睛。 8/ あなたの优しさに私は心を引かれた 你的温柔打动了我的心 9/ 我是如此单独而完整 在无数个夜晚我独自顶着冷风 伫立在老橘树下的桥头 只为听一曲夜莺的哀歌 我倚暖了石栏上的青苔 青苔凉透了我的心坎 但夜莺不来夜莺不来 ——徐志摩 《我是如此单独而完整》 10/ 千般荒凉，以此为梦。万里蹀躞，以此为归。 ——余秋雨 11/ 太阳未出时，全世界都做一个梦，唯有月亮是真实的； 太阳出来后，全世界都真实了，唯有月亮像一个梦。 ——《冬牧场》 12/ ᵂᵃⁿᵗ ᵗᵒ ᵇᵉ ʸᵒᵘʳ / ᵖⁱˡˡᵒʷ ᵇᵒᵒᵏ / ᶜᵃᵗ ⁱⁿ ʸᵒᵘʳ ᵃʳᵐˢ / ˡᵒᵛᵉᵈ ᵒⁿᵉ. 想做你的枕边书，怀中猫，意中人。 13/ 你踩着漫长星辰的光而来，而我在你到来的刹那便失了心智，从此山河过往，凛冬天明，你都有我。 14/ 树在 山在 大地在 岁月在 我在 你还要怎样更好的世界? ——张晓风《我在》 15/ ᴱˣᵖᵉʳⁱᵉⁿᶜⁱⁿᵍ ᵃ ᵖᵉʳˢᵒⁿ’ˢ ˡᵒⁿᵉˡⁱⁿᵉˢˢ, ᵇᵘᵗ ᵃˡˢᵒ ᵉˣᵖᵉʳⁱᵉⁿᶜⁱⁿᵍ ᵗʰᵉ ᵍⁱᶠᵗ ᵒᶠ ˡᵒⁿᵉˡⁱⁿᵉˢˢ. 经历着一个人的孤独，也经历着孤独的馈赠。 16/ 我是个俗气至顶的人， 见山是山，见海是海，见花便是花。 唯独见了你， 云海开始翻涌，江潮开始澎湃， 昆虫的小触须挠着全世界的痒。 你无需开口，我和天地万物便通通奔向你。 17/ 余光中先生说，月色与雪色之间，你是第三种绝色，于我而言,日月星辉之中,你是第四种难得。 18/ 昼も夜も春も渡らず，夜も眠れない星 白日春不渡，黑夜万梦星。 19/ 我是半坏街灯 是将冷煤炭 闪闪烁烁 明明暗暗 只想把有限的光和热 全都给你。 20/ 我怀念那个秋天，但我不会因此止步不前我会把有关你的记忆隐于心弦，当然不包括那偶尔泄出的一些思念。 21/ ᵀʰᵉ ᵍʳᵉᵃᵗᵉˢᵗ ʳᵒᵐᵃⁿᶜᵉ ⁱˢ ᵗʰᵉ ᶠᵒᶜᵘˢ ᵒᶠ ᵒⁿᵉ’ˢ ˡⁱᶠᵉ. 最盛大的浪漫是终其一生的专注。 22/ 我希望有个如你一般的人 如山间清爽的风如古城温暖的光，从清晨到夜晚，由山野到书房，不怕路途遥远，只要最后是你就好。 23/ 我想和你一起生活 在某个小镇 共享无尽的黄昏 和绵绵不绝的钟声 ——茨 维塔耶娃 24/ ᴵ ʰᵃᵛᵉ ˢᵃᵛᵉᵈ ᵗᵉⁿᵈᵉʳⁿᵉˢˢ ᵃⁿᵈ ʳᵒᵐᵃⁿᶜᵉ ᶠᵒʳ ᵃ ˡᵒⁿᵍ ᵗⁱᵐᵉ. ᴵ ʷᵃⁿᵗ ᵗᵒ ᵍⁱᵛᵉ ⁱᵗ ᵗᵒ ʸᵒᵘ ᵃˡˡ ᵃᵗ ᵒⁿᶜᵉ. 攒了好久的温柔与浪漫，想要一次性都给你。 25/ 岁月极美，在于它必然的流逝。 春花、秋月、夏日、冬雪。 26/ 今夜（こんや）は月（つき）が綺麗（きれい）ですね。 今晚月色真美。 27/ 世人慌慌张张，不过是图碎银几两。偏偏这碎银几两，能解世间惆怅，可让父母安康，可护幼子成长，但这碎银几两，也断了儿时的念想，让少年染上沧桑，压弯了脊梁。 28/ 我是春天里出生的绿皮野兽 在秋夜里吞下十瓣月亮 ——《桔子》高鹤鸣 29/ 夏天属于散文和柠檬，属于裸露和慵懒，属于关于回归的想像的永恒闲置，属于稀见的长笛和赤裸的双足，还有八月的卧室卧室中绞结的床单和周日的盐 ——德里克·沃尔科特《夏天的布里克街》 30/ 读书到某个相似段落的恍神，在外喝冷饮唤起味觉的苏醒，抑或是整理旧衣物时不落痕迹的叹息。这些由你衍生出来的琐碎，在数年如一日的白夜里，融汇成轻柔而遥远的光河。不再触及我。却依然照耀我。 31/ 最短暂的幸福感和最漫长的余韵，在到达最顶峰的时候迫近死亡，每个人的生命中都有一段summer time。 32/ 你已穿上书页般的衣冠 步行在恭敬的瓶形尸首间 ——张枣《十月之水》 33/ 谁端着夜的筛子将一粒粒光豆豆不停地筛了出来——《星空》 34/ 我是馊掉的柳丁汁和浓汤，我是爬满虫卵的玫瑰和百合，我是灯火流离的都市里明明存在却没人看得到也没人需要的北极星。 ——林奕含《房思琪的初恋乐园》 35/ 夕阳染病像潦倒的诗人醉落西湖——《夕阳西下》周末有约 36/ 阳光退出院子，退得那么慢，其间还有多次停顿，如同一种哽咽。 ——余秀华《月光落在左手上》 37/ 掉头一去是风吹黑发，回首再来已雪满白头。 下次你路过，人间已无我。 ——余光中《欢呼哈雷》 38/ 他来时风尘仆仆，停时依旧是光。 ——高台树色《白日事故》","categories":[{"name":"摘抄","slug":"摘抄","permalink":"https://aotle.github.io/categories/%E6%91%98%E6%8A%84/"}],"tags":[{"name":"短句","slug":"短句","permalink":"https://aotle.github.io/tags/%E7%9F%AD%E5%8F%A5/"}]},{"title":"夏天的风","slug":"blog-迁移","date":"2020-06-21T04:33:42.000Z","updated":"2020-08-13T06:34:59.686Z","comments":true,"path":"2020/06/21/blog-迁移/","link":"","permalink":"https://aotle.github.io/2020/06/21/blog-%E8%BF%81%E7%A7%BB/","excerpt":"“在夏天，我们吃绿豆、桃、樱桃和甜瓜。在各种意义上都漫长且愉快，日子发出声响。” ​ ——罗伯特·瓦尔泽《夏天》","text":"“在夏天，我们吃绿豆、桃、樱桃和甜瓜。在各种意义上都漫长且愉快，日子发出声响。” ​ ——罗伯特·瓦尔泽《夏天》 喜欢夏天，大概是因为夏日有一种特别的感觉吧。 夏天和雨天一样，有一种特别的韵味。夏天也很有故事感，记忆中好多事都是发生在夏天。夏天也有童年，青春的味道。 尤其是夏日的午后，蝉声鸣叫，很多人在午睡，全世界就好像安静了下来，只剩自然的声音。 时光流逝得很慢，蓝蓝的天空，强烈的阳光，喜欢的人。是我爱得无法自拔的夏日～ 印象最深的仍然是那个起风了的夏天，当时的冰淇淋很冰也很甜。 暗晚风吹起你鬓间的发，抚平回忆留下的疤，你的眼中明交杂，一笑生花。当时是18年的夏天，也是高中毕业的那个夏天。有很复杂的感情，怀念那时的同学，怀念高三的教室，怀念当初那个懵懂无知的自己，怀念着我的青春。 我们回忆18年的夏天，不是回忆某一年的夏天，每个夏天都不一样，每个人青春的基调却是一样的，有着遗憾，仓促，惋惜 在这之中，我们变成为现在的自己 不一定说是我们一定变好了，只是，我们终究长大了 我们怀念的夏天，只属于我们这一代人 每一代人的青春都只属于自己 就像我曾经深爱的你 后悔吗？ 不知道 太多太多理由让我喜欢这个季节了 湛蓝湛蓝的天空，饱满饱满的云朵，树林阴影里穿过凉风，白杨树浓密的叶子簌簌作响，一望无际的田野带着幽香，浓烈的太阳晒得人直发昏，汽车飞驰而过会卷起街道上的尘土，深井里有清冽的凉水，地窖里有甘甜的西瓜，阴凉土房里有的舒服过堂风，漫长的午觉伴着声嘶力竭的蝉鸣。 学校里还有开了的合欢树，有月季花田，有玉簪，有大湖，外面的小南门里有炸鸡，有热干面，有寿司，有炸串，有麻辣烫，有西瓜。 在学校，每次下晚课回去的路上很热闹，有情侣争吵，也有热情调笑，他们走在一起，就像青春飘荡在夏风中 去年夏天我一个人走了很多没走过的路，也遇见和失去了喜欢的人 我看见了烟波画船，云霞翠轩感受到了朝飞暮卷，雨丝风片 晚上有时会在小区里溜达，好天气的夜空中能看见浓烈的流云，云片被夜风吹的翻飞。有时也能看见星星。有时也经常和朋友一起去烧烤，坐在露天烧烤摊，吃很多牛板筋，烤土豆，豆角，金针菇，喝下大杯的啤酒，满桌子的小龙虾残骸还有蛤蜊壳。 夕阳在楼区间若隐若现，晚霞也都被分割成一条一条。 绿槐高柳咽新蝉，薰风初入弦。碧纱窗下水沉烟，棋声惊昼眠。微雨过，小荷翻，榴花开欲然。玉盆纤手弄清泉，琼珠碎却圆。·我喜欢夏日的永昼，我喜欢在多风的黄昏独坐在傍山的阳台上。小山谷里稻浪推涌，美好的稻香翻腾着。慢慢地，绚丽的云霞被浣净了，柔和的晚星一一就位。——张晓风《我喜欢》 微风拂过海面，蝉鸣漾入云间。叽叽喳喳的笑声在沙滩上留下深浅不一的足迹，盛暑阳光夺神炫目，模糊了远近的归船。 我希望今年的夏天还能走很多很多的路，吃很多烧烤，西瓜和冰棍。","categories":[{"name":"随笔","slug":"随笔","permalink":"https://aotle.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"笔记","slug":"笔记","permalink":"https://aotle.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}],"categories":[{"name":"其他","slug":"其他","permalink":"https://aotle.github.io/categories/%E5%85%B6%E4%BB%96/"},{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/categories/%E7%AE%97%E6%B3%95/"},{"name":"js","slug":"js","permalink":"https://aotle.github.io/categories/js/"},{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/categories/%E5%AE%89%E5%85%A8/"},{"name":"PHP","slug":"PHP","permalink":"https://aotle.github.io/categories/PHP/"},{"name":"数据结构","slug":"数据结构","permalink":"https://aotle.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"汇编","slug":"汇编","permalink":"https://aotle.github.io/categories/%E6%B1%87%E7%BC%96/"},{"name":"摘抄","slug":"摘抄","permalink":"https://aotle.github.io/categories/%E6%91%98%E6%8A%84/"},{"name":"随笔","slug":"随笔","permalink":"https://aotle.github.io/categories/%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"资料","slug":"资料","permalink":"https://aotle.github.io/tags/%E8%B5%84%E6%96%99/"},{"name":"算法","slug":"算法","permalink":"https://aotle.github.io/tags/%E7%AE%97%E6%B3%95/"},{"name":"js","slug":"js","permalink":"https://aotle.github.io/tags/js/"},{"name":"前端","slug":"前端","permalink":"https://aotle.github.io/tags/%E5%89%8D%E7%AB%AF/"},{"name":"安全","slug":"安全","permalink":"https://aotle.github.io/tags/%E5%AE%89%E5%85%A8/"},{"name":"密码学","slug":"密码学","permalink":"https://aotle.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"},{"name":"考试","slug":"考试","permalink":"https://aotle.github.io/tags/%E8%80%83%E8%AF%95/"},{"name":"PHP","slug":"PHP","permalink":"https://aotle.github.io/tags/PHP/"},{"name":"数据结构","slug":"数据结构","permalink":"https://aotle.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"线性表","slug":"线性表","permalink":"https://aotle.github.io/tags/%E7%BA%BF%E6%80%A7%E8%A1%A8/"},{"name":"8086汇编","slug":"8086汇编","permalink":"https://aotle.github.io/tags/8086%E6%B1%87%E7%BC%96/"},{"name":"短句","slug":"短句","permalink":"https://aotle.github.io/tags/%E7%9F%AD%E5%8F%A5/"},{"name":"笔记","slug":"笔记","permalink":"https://aotle.github.io/tags/%E7%AC%94%E8%AE%B0/"}]}